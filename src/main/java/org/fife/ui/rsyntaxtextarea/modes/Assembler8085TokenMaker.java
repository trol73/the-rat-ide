/* The following code was generated by JFlex 1.4.1 on 2/4/24, 2:08 PM */

/*
 * 19/10/2015
 *
 * AssemblerAvrTokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing Atmel AVR assembler.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class takes plain text and returns tokens representing AVR
 * assembler.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>AssemblerAvrTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Oleg Trifonov
 * @version 0.1
 *
 */

public class Assembler8085TokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\22\1\0\1\23\23\0\1\23\1\26\1\15\1\71"+
    "\1\14\1\13\1\26\1\16\2\24\1\21\1\27\1\25\1\27\1\44"+
    "\1\20\1\6\1\5\6\2\1\67\1\2\1\42\1\17\1\47\1\26"+
    "\1\50\1\24\1\45\1\4\1\11\1\53\1\57\1\41\1\35\1\54"+
    "\1\30\1\36\1\1\1\70\1\37\1\61\1\60\1\63\1\32\1\64"+
    "\1\62\1\33\1\31\1\65\1\66\1\43\1\7\1\51\1\55\1\25"+
    "\1\0\1\25\1\46\1\12\1\0\1\3\1\10\1\52\1\56\1\40"+
    "\1\34\1\54\1\72\1\36\1\1\1\70\1\37\1\61\1\60\1\63"+
    "\1\32\1\64\1\62\1\33\1\31\1\65\1\66\1\73\1\7\1\51"+
    "\1\55\1\0\1\46\1\0\1\26\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\2\3\1\2\1\1\2\3\1\1"+
    "\1\4\1\5\1\6\1\7\1\4\1\10\1\11\1\3"+
    "\3\1\1\2\1\1\3\3\1\1\4\3\1\1\1\3"+
    "\3\1\1\12\2\13\1\14\7\13\1\15\6\13\2\1"+
    "\2\16\1\1\1\16\3\1\3\2\4\1\2\3\1\1"+
    "\1\17\1\20\1\21\1\22\1\1\1\3\6\1\1\3"+
    "\1\1\1\16\1\1\15\0\1\1\2\16\1\2\1\16"+
    "\2\1\2\2\4\1\2\0\1\23\1\13\2\0\3\13"+
    "\2\0\1\13\2\0\3\13\2\0\1\24\1\25\1\26"+
    "\3\1\1\12\2\1\2\16\2\0\1\27\13\0\1\30"+
    "\10\0\1\13\2\0\3\13\2\0\1\13\2\0\3\13"+
    "\2\0\2\1\1\0\1\27\17\0\1\13\1\0\2\13"+
    "\1\31\1\0\1\13\1\0\2\13\1\32\1\0\1\1"+
    "\1\0\1\27\1\0\1\27\2\0\1\27\7\0\1\13"+
    "\2\0\1\13\1\0\1\1\11\0\1\1\4\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\33\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\360\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\360\0\u0438\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac"+
    "\0\u08e8\0\u0924\0\u0960\0\360\0\u099c\0\u09d8\0\u0a14\0\u0a50"+
    "\0\u0a8c\0\u0ac8\0\u0b04\0\360\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4"+
    "\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0ce4\0\u0d5c\0\u0d98"+
    "\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0fb4\0\u0ff0\0\u0ce4\0\u0e88\0\u102c\0\360\0\360\0\360"+
    "\0\360\0\u1068\0\u10a4\0\u10e0\0\u0d98\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u0fb4\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338"+
    "\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518"+
    "\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u0e88\0\u16bc"+
    "\0\u1248\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u10a4\0\u17e8\0\u08ac"+
    "\0\u1824\0\360\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c"+
    "\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c"+
    "\0\u1ba8\0\u1be4\0\u0ca8\0\u0f3c\0\u0f78\0\u1c20\0\u1c5c\0\u1c98"+
    "\0\u0ce4\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c"+
    "\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c"+
    "\0\u2058\0\u2094\0\u20d0\0\360\0\u210c\0\u2148\0\u2184\0\u21c0"+
    "\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0"+
    "\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580"+
    "\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\360"+
    "\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904"+
    "\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4"+
    "\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4"+
    "\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4"+
    "\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084"+
    "\0\u30c0\0\u30fc\0\u3138\0\u2bd4\0\u3174\0\u31b0\0\u2d3c\0\u31ec"+
    "\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc"+
    "\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac"+
    "\0\u35e8\0\u3624\0\u3660\0\u369c\0\360\0\u36d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\7\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\5\1\20\1\21\1\22"+
    "\1\23\1\17\1\24\1\25\2\5\2\17\1\26\1\27"+
    "\1\30\1\31\1\27\1\32\1\33\1\34\1\35\1\36"+
    "\1\5\1\27\1\37\1\5\3\17\1\27\1\40\1\41"+
    "\2\27\1\42\1\43\1\44\1\45\1\46\1\47\3\27"+
    "\1\7\1\27\1\50\1\26\1\27\1\5\1\6\1\7"+
    "\1\10\1\11\1\7\1\12\1\13\1\14\1\15\1\16"+
    "\1\51\1\5\1\20\1\21\1\22\1\23\1\17\1\24"+
    "\1\25\2\5\2\17\1\26\1\27\1\30\1\31\1\27"+
    "\1\32\1\33\1\34\1\35\1\36\1\5\1\27\1\37"+
    "\1\5\3\17\1\27\1\40\1\41\2\27\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\3\27\1\7\1\27\1\50"+
    "\1\26\1\27\21\52\1\53\1\54\5\52\1\55\3\52"+
    "\1\56\1\57\5\52\1\60\26\52\1\61\1\62\22\63"+
    "\1\64\5\63\1\65\3\63\1\66\1\67\5\63\1\70"+
    "\26\63\1\71\1\72\74\0\1\73\12\74\1\0\4\73"+
    "\4\0\1\73\1\0\1\73\1\0\2\74\1\75\7\74"+
    "\1\73\1\74\1\0\1\74\3\73\1\74\2\76\1\74"+
    "\1\76\2\74\1\77\1\100\7\74\1\73\2\74\2\73"+
    "\1\7\1\73\3\7\2\73\1\7\1\73\1\0\4\73"+
    "\4\0\1\73\1\0\1\73\1\0\5\73\1\7\3\73"+
    "\1\7\2\73\1\0\6\73\1\7\3\73\1\7\7\73"+
    "\1\7\5\73\12\74\1\0\4\73\4\0\1\73\1\0"+
    "\1\73\1\0\12\74\1\73\1\74\1\0\1\74\3\73"+
    "\1\74\2\101\2\74\2\102\1\103\10\74\1\73\2\74"+
    "\1\73\1\74\1\104\1\74\3\104\2\74\1\104\1\74"+
    "\1\0\4\73\4\0\1\73\1\0\1\73\1\0\5\74"+
    "\1\104\3\74\1\104\1\73\1\74\1\0\1\74\3\73"+
    "\1\74\1\101\1\105\2\74\1\102\1\106\1\103\6\74"+
    "\1\104\1\74\1\73\2\74\2\73\1\7\1\73\3\7"+
    "\1\107\1\110\1\7\1\73\1\0\4\73\4\0\1\73"+
    "\1\0\1\73\1\0\5\73\1\7\3\73\1\7\2\73"+
    "\1\0\6\73\1\7\3\73\1\7\7\73\1\7\5\73"+
    "\12\74\1\0\4\73\4\0\1\73\1\0\1\73\1\0"+
    "\1\74\1\111\10\74\1\73\1\74\1\0\1\74\3\73"+
    "\1\74\2\112\6\74\1\103\6\74\1\73\2\74\1\73"+
    "\12\74\1\0\4\73\4\0\1\73\1\0\1\73\1\0"+
    "\12\74\1\73\1\74\1\0\1\74\3\73\1\74\2\113"+
    "\15\74\1\73\2\74\1\73\1\74\1\104\1\74\3\104"+
    "\2\74\1\104\1\74\1\0\4\73\4\0\1\73\1\0"+
    "\1\73\1\0\5\74\1\104\3\74\1\104\1\73\1\74"+
    "\1\0\1\74\3\73\1\74\1\113\1\114\3\74\1\104"+
    "\7\74\1\104\1\74\1\73\2\74\1\73\12\74\1\0"+
    "\4\73\4\0\1\73\1\0\1\73\1\0\3\74\1\115"+
    "\6\74\1\73\1\74\1\0\1\74\3\73\20\74\1\73"+
    "\2\74\15\20\1\116\56\20\16\21\1\117\55\21\22\22"+
    "\1\0\51\22\20\0\1\120\1\121\75\0\1\25\50\0"+
    "\1\73\12\74\1\0\4\73\4\0\1\73\1\0\1\73"+
    "\1\0\6\74\1\122\1\123\2\74\1\73\1\74\1\0"+
    "\1\74\3\73\20\74\1\73\2\74\1\73\12\74\1\0"+
    "\4\73\4\0\1\73\1\0\1\73\1\0\12\74\1\73"+
    "\1\74\1\0\1\74\3\73\20\74\1\73\2\74\1\73"+
    "\12\74\1\0\4\73\4\0\1\73\1\0\1\73\1\0"+
    "\3\74\1\124\6\74\1\73\1\74\1\0\1\74\3\73"+
    "\1\74\2\111\7\74\1\125\1\74\1\126\3\74\1\73"+
    "\2\74\1\73\7\74\2\127\1\74\1\0\4\73\4\0"+
    "\1\73\1\0\1\73\1\0\1\130\1\131\1\132\3\74"+
    "\1\133\3\74\1\73\1\74\1\0\1\74\3\73\14\74"+
    "\1\127\3\74\1\73\1\130\1\74\1\73\1\74\1\104"+
    "\1\74\3\104\2\74\1\104\1\74\1\0\4\73\4\0"+
    "\1\73\1\0\1\73\1\0\5\74\1\104\3\74\1\104"+
    "\1\73\1\74\1\0\1\74\3\73\2\74\1\104\3\74"+
    "\1\104\7\74\1\104\1\74\1\73\2\74\1\73\12\74"+
    "\1\0\4\73\4\0\1\73\1\0\1\73\1\0\12\74"+
    "\1\73\1\74\1\0\1\74\3\73\7\74\1\134\10\74"+
    "\1\73\2\74\1\73\6\74\1\101\3\74\1\0\4\73"+
    "\4\0\1\73\1\0\1\73\1\0\1\130\11\74\1\73"+
    "\1\74\1\0\1\74\3\73\5\74\2\135\3\74\1\122"+
    "\5\74\1\73\1\130\1\74\1\73\12\74\1\0\4\73"+
    "\4\0\1\73\1\0\1\73\1\0\6\74\1\76\3\74"+
    "\1\73\1\74\1\0\1\74\3\73\20\74\1\73\2\74"+
    "\1\73\1\74\1\104\1\74\3\104\2\74\1\104\1\74"+
    "\1\0\4\73\4\0\1\73\1\0\1\73\1\0\5\74"+
    "\1\104\1\76\2\74\1\104\1\73\1\74\1\0\1\74"+
    "\3\73\2\74\1\104\3\74\1\104\7\74\1\104\1\74"+
    "\1\73\2\74\10\0\2\136\21\0\1\137\2\0\1\140"+
    "\1\141\2\142\1\0\1\143\6\0\2\144\1\145\1\0"+
    "\2\146\1\147\1\150\1\0\1\151\1\0\1\152\5\0"+
    "\1\143\1\73\2\74\2\153\6\74\1\0\4\73\4\0"+
    "\1\73\1\0\1\73\1\0\2\74\1\154\7\74\1\73"+
    "\1\74\1\0\1\74\3\73\1\74\2\76\1\74\1\76"+
    "\2\74\1\77\1\155\7\74\1\73\2\74\1\73\1\74"+
    "\1\104\1\153\1\156\2\104\2\74\1\104\1\74\1\0"+
    "\4\73\4\0\1\73\1\0\1\73\1\0\2\74\1\154"+
    "\2\74\1\104\3\74\1\104\1\73\1\74\1\0\1\74"+
    "\3\73\1\74\1\76\1\157\1\74\1\76\1\74\1\104"+
    "\1\77\1\155\5\74\1\104\1\74\1\73\2\74\1\73"+
    "\2\74\2\160\6\74\1\0\4\73\4\0\1\73\1\0"+
    "\1\73\1\0\6\74\1\76\1\74\2\113\1\73\1\74"+
    "\1\0\1\74\3\73\1\74\2\161\15\74\1\73\2\74"+
    "\1\73\1\74\1\104\1\160\1\162\2\104\2\74\1\104"+
    "\1\74\1\0\4\73\4\0\1\73\1\0\1\73\1\0"+
    "\5\74\1\104\1\76\1\74\1\113\1\114\1\73\1\74"+
    "\1\0\1\74\3\73\1\74\1\161\1\163\3\74\1\104"+
    "\7\74\1\104\1\74\1\73\2\74\1\73\12\74\1\0"+
    "\4\73\4\0\1\73\1\0\1\73\1\0\12\74\1\73"+
    "\1\74\1\0\1\74\3\73\12\74\1\125\5\74\1\73"+
    "\2\74\1\73\12\74\1\0\4\73\4\0\1\73\1\0"+
    "\1\73\1\0\12\74\1\73\1\74\1\0\1\74\3\73"+
    "\12\74\1\164\2\74\1\101\2\74\1\73\2\74\1\73"+
    "\2\74\2\165\6\74\1\0\4\73\4\0\1\73\1\0"+
    "\1\73\1\0\2\74\1\75\1\166\2\74\1\133\1\167"+
    "\2\166\1\73\1\74\1\0\1\74\3\73\1\74\2\76"+
    "\1\74\1\76\2\74\1\77\1\76\1\167\6\74\1\73"+
    "\2\74\1\73\12\74\1\0\4\73\4\0\1\73\1\0"+
    "\1\73\1\0\12\74\1\73\1\74\1\0\1\74\3\73"+
    "\11\74\1\103\2\74\1\166\3\74\1\73\2\74\23\0"+
    "\1\170\12\0\1\171\36\0\12\51\15\0\12\51\1\0"+
    "\1\51\5\0\20\51\1\0\2\51\21\52\2\0\11\52"+
    "\1\0\35\52\22\0\1\172\53\0\21\52\2\0\6\52"+
    "\1\173\2\52\1\0\35\52\33\0\1\174\4\0\1\175"+
    "\35\0\21\52\2\0\6\52\1\176\2\52\1\0\1\52"+
    "\1\177\33\52\2\0\21\52\2\0\11\52\1\0\6\52"+
    "\1\200\26\52\1\0\1\201\31\0\1\202\105\0\1\201"+
    "\27\0\1\201\22\63\1\0\11\63\1\0\35\63\2\0"+
    "\22\63\1\0\6\63\1\203\2\63\1\0\35\63\33\0"+
    "\1\204\4\0\1\205\35\0\22\63\1\0\6\63\1\206"+
    "\2\63\1\0\1\63\1\207\33\63\2\0\22\63\1\0"+
    "\11\63\1\0\6\63\1\210\26\63\1\0\1\211\31\0"+
    "\1\212\105\0\1\211\27\0\1\211\13\73\1\0\4\73"+
    "\4\0\1\73\1\0\1\73\1\0\14\73\1\0\30\73"+
    "\12\74\1\0\4\73\4\0\1\73\1\0\1\73\1\0"+
    "\12\74\1\213\1\74\1\0\1\74\3\73\20\74\1\73"+
    "\2\74\1\73\12\74\1\0\4\73\4\0\1\73\1\0"+
    "\1\73\1\0\10\74\2\76\1\213\1\74\1\0\1\74"+
    "\3\73\12\74\1\76\5\74\1\73\2\74\1\73\12\74"+
    "\1\0\4\73\4\0\1\73\1\0\1\73\1\0\12\74"+
    "\1\213\1\74\1\0\1\74\3\73\1\74\2\76\1\74"+
    "\1\76\13\74\1\73\2\74\1\73\12\74\1\0\4\73"+
    "\4\0\1\73\1\0\1\73\1\0\2\74\1\76\7\74"+
    "\1\213\1\74\1\0\1\74\3\73\20\74\1\73\2\74"+
    "\1\73\12\74\1\0\4\73\4\0\1\73\1\0\1\73"+
    "\1\0\6\74\1\76\3\74\1\213\1\74\1\0\1\74"+
    "\3\73\20\74\1\73\2\74\1\73\12\74\1\0\4\73"+
    "\4\0\1\73\1\0\1\73\1\0\6\74\1\76\3\74"+
    "\1\213\1\74\1\0\1\74\3\73\1\74\2\76\2\74"+
    "\2\76\11\74\1\73\2\74\1\73\2\74\2\76\6\74"+
    "\1\0\4\73\4\0\1\73\1\0\1\73\1\0\6\74"+
    "\1\76\3\74\1\213\1\74\1\0\1\74\3\73\20\74"+
    "\1\73\2\74\1\73\1\74\1\104\1\74\3\104\2\74"+
    "\1\104\1\74\1\0\4\73\4\0\1\73\1\0\1\73"+
    "\1\0\5\74\1\104\3\74\1\104\1\213\1\74\1\0"+
    "\1\74\3\73\2\74\1\104\3\74\1\104\7\74\1\104"+
    "\1\74\1\73\2\74\1\73\1\74\1\104\1\74\3\104"+
    "\2\74\1\104\1\74\1\0\4\73\4\0\1\73\1\0"+
    "\1\73\1\0\5\74\1\104\1\76\2\74\1\104\1\213"+
    "\1\74\1\0\1\74\3\73\2\74\1\104\3\74\1\104"+
    "\7\74\1\104\1\74\1\73\2\74\1\73\1\74\1\104"+
    "\1\74\3\104\2\74\1\104\1\74\1\0\4\73\4\0"+
    "\1\73\1\0\1\73\1\0\5\74\1\104\1\76\2\74"+
    "\1\104\1\213\1\74\1\0\1\74\3\73\1\74\1\76"+
    "\1\157\2\74\1\76\1\157\7\74\1\104\1\74\1\73"+
    "\2\74\2\73\5\214\1\73\2\214\1\73\1\0\4\73"+
    "\4\0\1\73\1\0\1\73\1\0\4\73\2\214\2\73"+
    "\2\214\2\73\1\0\5\73\2\214\2\73\2\214\7\73"+
    "\1\214\11\73\2\215\4\73\1\0\4\73\4\0\1\73"+
    "\1\0\1\73\1\0\14\73\1\0\30\73\12\74\1\0"+
    "\4\73\4\0\1\73\1\0\1\73\1\0\1\216\11\74"+
    "\1\213\1\74\1\0\1\74\3\73\20\74\1\73\1\216"+
    "\1\74\1\73\12\74\1\0\4\73\4\0\1\73\1\0"+
    "\1\73\1\0\1\217\11\74\1\213\1\74\1\0\1\74"+
    "\3\73\20\74\1\73\1\217\1\74\1\73\12\74\1\0"+
    "\4\73\4\0\1\73\1\0\1\73\1\0\4\74\2\220"+
    "\4\74\1\213\1\74\1\0\1\74\3\73\20\74\1\73"+
    "\2\74\1\73\12\74\1\0\4\73\4\0\1\73\1\0"+
    "\1\73\1\0\12\74\1\213\1\74\1\0\1\74\3\73"+
    "\16\74\1\221\1\74\1\73\2\74\1\73\12\74\1\0"+
    "\4\73\4\0\1\73\1\0\1\73\1\0\1\74\1\76"+
    "\10\74\1\213\1\74\1\0\1\74\3\73\20\74\1\73"+
    "\2\74\1\73\12\74\1\0\4\73\4\0\1\73\1\0"+
    "\1\73\1\0\12\74\1\213\1\113\1\0\1\74\3\73"+
    "\20\74\1\73\1\74\1\113\1\73\12\74\1\0\4\73"+
    "\4\0\1\73\1\0\1\73\1\0\3\74\1\222\6\74"+
    "\1\213\1\74\1\0\1\74\3\73\20\74\1\73\2\74"+
    "\1\73\7\74\2\76\1\74\1\0\4\73\4\0\1\73"+
    "\1\0\1\73\1\0\6\74\1\76\3\74\1\213\1\74"+
    "\1\0\1\74\3\73\20\74\1\73\2\74\1\73\12\74"+
    "\1\0\4\73\4\0\1\73\1\0\1\73\1\0\7\74"+
    "\1\223\2\74\1\213\1\74\1\0\1\74\3\73\20\74"+
    "\1\73\2\74\1\73\2\74\2\224\6\74\1\0\4\73"+
    "\4\0\1\73\1\0\1\73\1\0\12\74\1\213\1\74"+
    "\1\0\1\74\3\73\1\74\2\76\15\74\1\73\2\74"+
    "\1\73\12\74\1\0\4\73\4\0\1\73\1\0\1\73"+
    "\1\0\12\74\1\213\1\74\1\0\1\74\3\73\10\74"+
    "\1\76\7\74\1\73\2\74\1\73\6\74\1\76\3\74"+
    "\1\0\4\73\4\0\1\73\1\0\1\73\1\0\12\74"+
    "\1\213\1\74\1\0\1\74\3\73\11\74\1\76\6\74"+
    "\1\73\2\74\1\73\2\74\2\225\6\74\1\0\4\73"+
    "\4\0\1\73\1\0\1\73\1\0\12\74\1\213\1\74"+
    "\1\0\1\74\3\73\20\74\1\73\2\74\51\0\1\226"+
    "\62\0\2\227\66\0\2\230\22\0\1\231\51\0\1\232"+
    "\44\0\1\233\23\0\1\234\3\0\1\235\20\0\1\236"+
    "\1\0\1\237\1\0\1\240\12\0\2\241\122\0\1\242"+
    "\77\0\1\243\44\0\2\244\21\0\1\234\4\0\2\245"+
    "\1\0\1\244\12\0\2\244\4\0\1\244\6\0\1\244"+
    "\63\0\1\246\13\0\2\247\33\0\2\250\114\0\1\251"+
    "\3\0\1\252\65\0\1\253\13\0\1\73\12\74\1\0"+
    "\4\73\4\0\1\73\1\0\1\73\1\0\7\74\1\216"+
    "\2\74\1\213\1\74\1\0\1\74\3\73\20\74\1\73"+
    "\2\74\1\73\12\74\1\0\4\73\4\0\1\73\1\0"+
    "\1\73\1\0\6\74\1\76\1\74\2\76\1\213\1\74"+
    "\1\0\1\74\3\73\12\74\1\76\5\74\1\73\2\74"+
    "\1\73\2\74\2\76\6\74\1\0\4\73\4\0\1\73"+
    "\1\0\1\73\1\0\2\74\1\76\7\74\1\213\1\74"+
    "\1\0\1\74\3\73\1\74\2\76\15\74\1\73\2\74"+
    "\1\73\1\74\1\104\1\74\3\104\2\74\1\104\1\74"+
    "\1\0\4\73\4\0\1\73\1\0\1\73\1\0\5\74"+
    "\1\104\1\74\1\216\1\74\1\104\1\213\1\74\1\0"+
    "\1\74\3\73\2\74\1\104\3\74\1\104\7\74\1\104"+
    "\1\74\1\73\2\74\1\73\2\74\2\76\6\74\1\0"+
    "\4\73\4\0\1\73\1\0\1\73\1\0\12\74\1\213"+
    "\1\74\1\0\1\74\3\73\5\74\2\76\11\74\1\73"+
    "\2\74\1\73\1\74\1\104\1\76\1\157\2\104\2\74"+
    "\1\104\1\74\1\0\4\73\4\0\1\73\1\0\1\73"+
    "\1\0\5\74\1\104\3\74\1\104\1\213\1\74\1\0"+
    "\1\74\3\73\2\74\1\104\2\74\1\76\1\157\7\74"+
    "\1\104\1\74\1\73\2\74\1\73\1\74\1\104\1\74"+
    "\3\104\1\76\1\74\1\104\1\74\1\0\4\73\4\0"+
    "\1\73\1\0\1\73\1\0\5\74\1\104\3\74\1\104"+
    "\1\213\1\74\1\0\1\74\3\73\2\74\1\104\3\74"+
    "\1\104\2\74\1\76\4\74\1\104\1\74\1\73\2\74"+
    "\1\73\12\74\1\0\4\73\4\0\1\73\1\0\1\73"+
    "\1\0\12\74\1\213\1\74\1\0\1\74\3\73\15\74"+
    "\1\76\2\74\1\73\2\74\1\73\12\74\1\0\4\73"+
    "\4\0\1\73\1\0\1\73\1\0\7\74\1\76\2\74"+
    "\1\213\1\74\1\0\1\74\3\73\11\74\1\76\6\74"+
    "\1\73\2\74\1\73\12\74\1\0\4\73\4\0\1\73"+
    "\1\0\1\73\1\0\12\74\1\213\1\74\1\0\1\74"+
    "\3\73\1\74\2\76\15\74\1\73\2\74\60\0\1\254"+
    "\13\0\21\52\2\0\6\52\1\255\2\52\1\0\35\52"+
    "\34\0\1\256\100\0\1\257\34\0\21\52\2\0\7\52"+
    "\1\260\1\52\1\0\35\52\2\0\21\52\2\0\11\52"+
    "\1\0\2\52\1\261\32\52\2\0\21\52\2\0\11\52"+
    "\1\0\6\52\1\262\26\52\1\0\1\263\43\0\1\263"+
    "\27\0\1\263\31\0\1\264\42\0\22\63\1\0\6\63"+
    "\1\265\2\63\1\0\35\63\34\0\1\266\100\0\1\267"+
    "\34\0\22\63\1\0\7\63\1\270\1\63\1\0\35\63"+
    "\2\0\22\63\1\0\11\63\1\0\2\63\1\271\32\63"+
    "\2\0\22\63\1\0\11\63\1\0\6\63\1\272\26\63"+
    "\1\0\1\273\43\0\1\273\27\0\1\273\31\0\1\274"+
    "\42\0\1\73\12\74\1\0\4\73\4\0\1\73\1\0"+
    "\1\73\1\0\7\74\1\76\2\74\1\213\1\74\1\0"+
    "\1\74\3\73\20\74\1\73\2\74\1\73\12\74\1\0"+
    "\4\73\4\0\1\73\1\0\1\73\1\0\12\74\1\213"+
    "\1\74\1\0\1\74\3\73\3\74\1\76\14\74\1\73"+
    "\2\74\1\73\12\74\1\0\4\73\4\0\1\73\1\0"+
    "\1\73\1\0\12\74\1\213\1\74\1\0\1\74\3\73"+
    "\11\74\1\275\6\74\1\73\2\74\1\73\12\74\1\0"+
    "\4\73\4\0\1\73\1\0\1\73\1\0\1\76\11\74"+
    "\1\213\1\74\1\0\1\74\3\73\20\74\1\73\1\76"+
    "\1\74\1\73\12\74\1\0\4\73\4\0\1\73\1\0"+
    "\1\73\1\0\12\74\1\213\1\74\1\0\1\74\3\73"+
    "\5\74\2\76\11\74\1\73\2\74\1\73\6\74\1\76"+
    "\3\74\1\0\4\73\4\0\1\73\1\0\1\73\1\0"+
    "\12\74\1\213\1\74\1\0\1\74\3\73\1\74\2\276"+
    "\15\74\1\73\2\74\1\73\6\74\1\76\3\74\1\0"+
    "\4\73\4\0\1\73\1\0\1\73\1\0\12\74\1\213"+
    "\1\74\1\0\1\74\3\73\20\74\1\73\2\74\31\0"+
    "\1\277\73\0\1\300\120\0\2\301\1\253\65\0\2\302"+
    "\53\0\1\303\71\0\1\304\4\0\1\227\75\0\2\251"+
    "\65\0\1\277\2\0\1\245\113\0\2\305\76\0\1\306"+
    "\76\0\1\300\70\0\1\307\51\0\2\310\115\0\1\311"+
    "\44\0\2\300\75\0\1\312\23\0\1\313\62\0\2\314"+
    "\53\0\1\315\114\0\1\300\57\0\2\316\110\0\2\301"+
    "\66\0\2\317\20\0\21\52\2\0\7\52\1\320\1\52"+
    "\1\0\35\52\44\0\1\321\71\0\2\256\32\0\21\52"+
    "\2\0\11\52\1\0\5\52\1\322\27\52\2\0\21\52"+
    "\2\0\11\52\1\0\3\52\2\260\30\52\2\0\21\52"+
    "\2\0\11\52\1\0\7\52\1\323\25\52\46\0\1\324"+
    "\61\0\1\325\41\0\22\63\1\0\7\63\1\326\1\63"+
    "\1\0\35\63\44\0\1\327\71\0\2\266\32\0\22\63"+
    "\1\0\11\63\1\0\5\63\1\330\27\63\2\0\22\63"+
    "\1\0\11\63\1\0\3\63\2\270\30\63\2\0\22\63"+
    "\1\0\11\63\1\0\7\63\1\331\25\63\46\0\1\332"+
    "\61\0\1\333\41\0\1\73\11\74\1\334\1\0\4\73"+
    "\4\0\1\73\1\0\1\73\1\0\12\74\1\213\1\74"+
    "\1\0\1\74\3\73\20\74\1\73\2\74\1\73\12\74"+
    "\1\0\4\73\4\0\1\73\1\0\1\73\1\0\12\74"+
    "\1\213\1\74\1\0\1\74\3\73\17\74\1\113\1\73"+
    "\2\74\40\0\2\300\72\0\2\245\71\0\1\335\65\0"+
    "\1\336\102\0\2\337\70\0\1\245\22\0\1\340\75\0"+
    "\1\341\70\0\1\342\67\0\1\343\27\0\2\344\120\0"+
    "\1\345\123\0\1\252\67\0\1\346\44\0\1\347\122\0"+
    "\1\350\50\0\1\351\34\0\21\52\2\0\10\52\1\260"+
    "\1\0\5\52\1\322\27\52\22\0\1\352\53\0\20\52"+
    "\1\353\2\0\11\52\1\0\35\52\2\0\1\52\14\323"+
    "\1\52\3\323\1\354\1\0\1\52\10\323\1\324\11\323"+
    "\3\52\21\323\2\324\1\0\12\324\1\354\1\324\1\0"+
    "\2\354\1\324\1\354\2\0\4\354\12\324\1\354\1\324"+
    "\2\354\3\0\20\324\1\354\2\324\33\0\1\256\6\0"+
    "\1\321\31\0\22\63\1\0\10\63\1\270\1\0\5\63"+
    "\1\330\27\63\22\0\1\355\53\0\20\63\1\356\1\63"+
    "\1\0\11\63\1\0\35\63\2\0\1\63\14\331\1\63"+
    "\4\331\1\0\1\63\10\331\1\332\11\331\3\63\21\331"+
    "\2\332\1\0\12\332\1\357\1\332\1\0\2\357\1\332"+
    "\1\357\2\0\4\357\12\332\1\357\1\332\2\357\3\0"+
    "\20\332\1\357\2\332\33\0\1\266\6\0\1\327\31\0"+
    "\1\73\12\74\1\0\4\73\4\0\1\73\1\0\1\73"+
    "\1\0\6\74\1\360\3\74\1\213\1\74\1\0\1\74"+
    "\3\73\20\74\1\73\2\74\65\0\1\361\67\0\1\362"+
    "\74\0\1\363\14\0\2\247\151\0\1\300\47\0\1\364"+
    "\70\0\1\365\43\0\2\366\122\0\1\227\123\0\1\300"+
    "\13\0\2\367\126\0\1\370\121\0\1\371\26\0\1\324"+
    "\53\0\20\52\1\323\2\0\11\52\1\0\35\52\22\0"+
    "\1\332\53\0\20\63\1\331\1\63\1\0\11\63\1\0"+
    "\35\63\2\0\1\73\12\74\1\0\4\73\4\0\1\73"+
    "\1\0\1\73\1\0\12\74\1\213\1\74\1\0\1\74"+
    "\3\73\12\74\1\372\5\74\1\73\2\74\56\0\2\277"+
    "\17\0\2\373\147\0\1\300\73\0\1\251\51\0\1\374"+
    "\74\0\1\300\110\0\1\277\22\0\2\375\145\0\2\376"+
    "\14\0\1\73\11\74\1\377\1\0\4\73\4\0\1\73"+
    "\1\0\1\73\1\0\12\74\1\213\1\74\1\0\1\74"+
    "\3\73\20\74\1\73\2\74\52\0\2\300\75\0\1\277"+
    "\50\0\1\300\101\0\2\u0100\32\0\1\73\2\74\2\u0101"+
    "\6\74\1\0\4\73\4\0\1\73\1\0\1\73\1\0"+
    "\12\74\1\213\1\74\1\0\1\74\3\73\20\74\1\73"+
    "\2\74\23\0\1\u0100\23\0\1\u0102\24\0\1\73\12\74"+
    "\1\0\4\73\4\0\1\73\1\0\1\73\1\0\12\74"+
    "\1\213\1\74\1\0\1\74\3\73\5\74\2\u0103\11\74"+
    "\1\73\2\74\1\0\1\u0104\1\0\2\u0104\2\0\4\u0104"+
    "\5\0\1\u0102\7\0\12\u0104\1\0\1\u0104\1\u0102\3\0"+
    "\1\u0105\16\u0104\1\0\1\u0104\1\0\2\u0104\1\73\12\74"+
    "\1\0\4\73\4\0\1\73\1\0\1\73\1\0\12\74"+
    "\1\213\1\74\1\0\1\74\3\73\5\74\2\u0106\11\74"+
    "\1\73\2\74\1\0\12\u0104\1\0\1\u0104\3\0\1\u0102"+
    "\7\0\12\u0104\1\0\1\u0104\1\u0102\3\0\1\u0105\20\u0104"+
    "\1\0\2\u0104\1\73\12\74\1\0\4\73\4\0\1\73"+
    "\1\0\1\73\1\0\12\74\1\213\1\74\1\0\1\74"+
    "\3\73\11\74\1\221\6\74\1\73\2\74";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\11\1\1\11\4\1\1\11\27\1\1\11"+
    "\7\1\1\11\31\1\4\11\14\1\15\0\15\1\2\0"+
    "\1\11\1\1\2\0\3\1\2\0\1\1\2\0\3\1"+
    "\2\0\13\1\2\0\1\1\13\0\1\11\10\0\1\1"+
    "\2\0\3\1\2\0\1\1\2\0\3\1\2\0\2\1"+
    "\1\0\1\11\17\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\7\0\1\1\2\0\1\1\1\0\1\1"+
    "\11\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  We must have this here as JFLex does not generate a
	 * no parameter constructor.
	 */
	public Assembler8085TokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}

      /**
       * Adds the token specified to the current linked list of tokens.
       *
       * @param tokenType The token's type.
       * @see #addToken(int, int, int)
       */
      private void addHyperlinkToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so, true);
      }

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}

	


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Assembler8085TokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Assembler8085TokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { addToken(Token.PREPROCESSOR);
          }
        case 28: break;
        case 8: 
          { addNullToken(); return firstToken;
          }
        case 29: break;
        case 16: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 30: break;
        case 14: 
          { addToken(Token.CPU_INSTRUCTION);
          }
        case 31: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 32: break;
        case 20: 
          { addToken(Token.LABEL);
          }
        case 33: break;
        case 18: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 34: break;
        case 3: 
          { addToken(Token.REGISTER);
          }
        case 35: break;
        case 9: 
          { addToken(Token.WHITESPACE);
          }
        case 36: break;
        case 21: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 37: break;
        case 6: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 38: break;
        case 23: 
          { addToken(Token.RESERVED_WORD);
          }
        case 39: break;
        case 22: 
          { addToken(Token.LITERAL_NUMBER_BINARY);
          }
        case 40: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 41: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 42: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 43: break;
        case 10: 
          { addToken(Token.FUNCTION);
          }
        case 44: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 45: break;
        case 24: 
          { addToken(Token.DATA_TYPE);
          }
        case 46: break;
        case 15: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 47: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 48: break;
        case 25: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 49: break;
        case 7: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 50: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 51: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 52: break;
        case 11: 
          { 
          }
        case 53: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 263: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 264: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 265: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
