/* The following code was generated by JFlex 1.4.1 on 11/4/22, 5:35 PM */

/*
 * Generated on 2/23/22, 1:57 PM
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class ChipTestTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\24\1\23\1\0\1\24\1\11\22\0\1\24\1\35\1\11"+
    "\1\12\1\37\1\35\1\35\1\25\2\36\1\27\1\40\1\35\1\33"+
    "\1\32\1\26\1\5\1\7\10\4\1\44\1\35\1\11\1\73\1\72"+
    "\1\35\1\14\1\6\1\70\1\63\1\60\1\51\1\64\1\65\1\71"+
    "\1\53\2\1\1\62\1\1\1\54\1\47\1\46\1\1\1\52\1\61"+
    "\1\56\1\55\1\57\1\50\1\67\1\1\1\66\1\36\1\13\1\36"+
    "\1\11\1\2\1\0\1\21\1\31\2\6\1\16\1\42\1\1\1\41"+
    "\1\43\2\1\1\20\3\1\1\22\2\1\1\15\1\17\1\10\1\1"+
    "\1\45\1\30\2\1\1\34\1\11\1\34\1\3\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\1\1\4\1\10\13\1\1\11\1\12\5\11\1\13"+
    "\3\11\1\0\2\14\1\0\2\14\1\15\1\16\1\17"+
    "\4\0\4\1\1\20\5\1\1\21\11\0\1\17\1\0"+
    "\1\22\1\23\4\0\7\1\11\0\1\24\3\0\2\1"+
    "\1\20\2\1\2\0\1\25\2\0\1\26\2\0\1\24"+
    "\3\0\1\1\10\0\1\20\4\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\264"+
    "\0\264\0\264\0\u01a4\0\u01e0\0\u021c\0\u0258\0\u0294\0\264"+
    "\0\u02d0\0\u030c\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474"+
    "\0\u04b0\0\u04ec\0\u0294\0\u0528\0\264\0\u0564\0\u05a0\0\u05dc"+
    "\0\u0618\0\u0654\0\264\0\u0690\0\u06cc\0\u0708\0\u0744\0\u0780"+
    "\0\u07bc\0\u07f8\0\u0834\0\u0870\0\264\0\264\0\u08ac\0\u08e8"+
    "\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\360"+
    "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\264\0\u0bf4\0\u0c30"+
    "\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10"+
    "\0\u0e4c\0\u0834\0\u0870\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78"+
    "\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158"+
    "\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338"+
    "\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518"+
    "\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8"+
    "\0\264\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u15cc\0\u1860"+
    "\0\u1680\0\u189c\0\u18d8\0\u1338\0\u1914\0\264\0\u1950\0\u198c"+
    "\0\u19c8\0\u1a04";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\5\1\6\1\7\1\5\1\6"+
    "\1\5\1\4\1\10\1\4\1\11\6\5\1\12\1\13"+
    "\1\14\1\15\1\11\2\5\1\16\1\17\1\20\1\4"+
    "\1\20\1\21\1\11\3\5\1\11\1\5\1\22\1\23"+
    "\1\5\1\24\1\5\1\25\2\5\1\26\1\27\1\5"+
    "\1\30\1\5\1\31\4\5\1\32\1\5\1\4\1\33"+
    "\23\34\1\35\3\34\1\36\11\34\1\37\1\40\2\34"+
    "\1\41\26\34\23\42\1\43\15\42\1\44\1\45\2\42"+
    "\1\46\26\42\75\0\1\5\1\0\6\5\2\0\1\47"+
    "\7\5\5\0\2\5\7\0\3\5\1\0\25\5\2\0"+
    "\3\50\1\0\2\6\1\50\1\6\1\50\1\0\4\50"+
    "\1\51\4\50\5\0\2\50\1\52\4\0\1\50\1\0"+
    "\3\50\1\0\25\50\2\0\3\50\1\0\2\6\1\50"+
    "\1\6\1\50\1\0\4\50\1\51\4\50\5\0\1\53"+
    "\1\54\1\52\4\0\1\50\1\0\3\50\1\0\25\50"+
    "\26\0\1\13\47\0\25\14\1\55\46\14\27\0\1\56"+
    "\50\0\2\57\1\0\1\57\22\0\1\11\133\0\1\11"+
    "\16\0\1\60\1\0\1\61\1\62\1\0\1\63\52\0"+
    "\1\5\1\0\6\5\2\0\1\47\7\5\5\0\2\5"+
    "\7\0\3\5\1\0\2\5\1\64\5\5\1\65\14\5"+
    "\3\0\1\5\1\0\6\5\2\0\1\47\7\5\5\0"+
    "\2\5\7\0\3\5\1\0\10\5\1\66\14\5\3\0"+
    "\1\5\1\0\6\5\2\0\1\47\7\5\5\0\2\5"+
    "\7\0\3\5\1\0\22\5\1\67\2\5\3\0\1\5"+
    "\1\0\6\5\2\0\1\47\7\5\5\0\2\5\7\0"+
    "\3\5\1\0\7\5\1\70\15\5\3\0\1\5\1\0"+
    "\6\5\2\0\1\47\7\5\5\0\2\5\7\0\3\5"+
    "\1\0\4\5\1\71\20\5\3\0\1\5\1\0\6\5"+
    "\2\0\1\47\7\5\5\0\2\5\7\0\3\5\1\0"+
    "\2\5\1\72\22\5\3\0\1\5\1\0\6\5\2\0"+
    "\1\47\7\5\5\0\2\5\7\0\3\5\1\0\4\5"+
    "\1\66\20\5\3\0\1\5\1\0\6\5\2\0\1\47"+
    "\7\5\5\0\2\5\7\0\3\5\1\0\2\5\1\73"+
    "\21\5\1\74\3\0\1\5\1\0\6\5\2\0\1\47"+
    "\7\5\5\0\2\5\7\0\3\5\1\0\4\5\1\75"+
    "\20\5\2\0\23\34\1\0\3\34\1\0\11\34\2\0"+
    "\2\34\1\0\26\34\26\0\1\76\64\0\1\77\73\0"+
    "\1\100\23\0\1\101\75\0\1\102\26\0\23\42\1\0"+
    "\15\42\2\0\2\42\1\0\26\42\17\0\1\103\73\0"+
    "\1\104\23\0\1\105\75\0\1\106\36\0\1\107\63\0"+
    "\3\50\1\0\5\50\1\0\11\50\5\0\2\50\5\0"+
    "\1\50\1\0\3\50\1\0\25\50\2\0\3\50\1\0"+
    "\2\110\1\50\1\110\1\50\1\0\11\50\5\0\2\50"+
    "\1\0\1\111\3\0\1\50\1\111\3\50\1\0\25\50"+
    "\6\0\2\57\1\0\1\57\64\0\3\50\1\0\4\112"+
    "\1\50\1\0\4\50\1\112\2\50\1\112\1\50\5\0"+
    "\1\50\1\112\5\0\1\50\1\0\1\50\1\112\1\50"+
    "\1\0\4\50\1\112\6\50\1\112\2\50\2\112\3\50"+
    "\1\112\1\50\2\0\3\50\1\0\1\50\1\113\1\50"+
    "\1\113\1\50\1\0\11\50\5\0\2\50\5\0\1\50"+
    "\1\0\3\50\1\0\25\50\2\0\3\50\1\0\2\57"+
    "\1\50\1\57\1\50\1\0\4\50\1\51\4\50\5\0"+
    "\2\50\5\0\1\50\1\0\3\50\1\0\25\50\20\0"+
    "\1\114\73\0\1\115\76\0\1\116\62\0\1\117\64\0"+
    "\1\5\1\0\6\5\2\0\1\47\7\5\5\0\2\5"+
    "\7\0\3\5\1\0\3\5\1\120\21\5\3\0\1\5"+
    "\1\0\6\5\2\0\1\47\7\5\5\0\2\5\7\0"+
    "\3\5\1\0\15\5\1\121\7\5\3\0\1\5\1\0"+
    "\6\5\2\0\1\47\7\5\5\0\2\5\7\0\3\5"+
    "\1\0\11\5\1\70\13\5\3\0\1\5\1\0\6\5"+
    "\2\0\1\47\7\5\5\0\2\5\7\0\3\5\1\0"+
    "\6\5\1\66\16\5\3\0\1\5\1\0\6\5\2\0"+
    "\1\47\7\5\5\0\2\5\7\0\3\5\1\0\14\5"+
    "\1\122\10\5\3\0\1\5\1\0\6\5\2\0\1\47"+
    "\7\5\5\0\2\5\7\0\3\5\1\0\6\5\1\123"+
    "\16\5\3\0\1\5\1\0\6\5\2\0\1\47\7\5"+
    "\5\0\2\5\7\0\3\5\1\0\7\5\1\124\15\5"+
    "\3\0\1\5\1\0\6\5\2\0\1\47\7\5\5\0"+
    "\2\5\7\0\3\5\1\0\6\5\1\125\16\5\3\0"+
    "\1\5\1\0\6\5\2\0\1\47\7\5\5\0\2\5"+
    "\7\0\3\5\1\0\17\5\1\126\5\5\21\0\1\127"+
    "\76\0\1\130\71\0\1\131\120\0\1\132\45\0\1\133"+
    "\76\0\1\134\71\0\1\135\120\0\1\136\32\0\4\137"+
    "\6\0\1\137\2\0\1\137\7\0\1\137\10\0\1\137"+
    "\6\0\1\137\6\0\1\137\2\0\2\137\3\0\1\137"+
    "\3\0\3\50\1\0\2\110\1\50\1\110\1\50\1\0"+
    "\11\50\5\0\2\50\5\0\1\50\1\0\3\50\1\0"+
    "\25\50\6\0\2\110\1\0\1\110\103\0\1\140\71\0"+
    "\1\141\73\0\1\142\76\0\1\143\54\0\1\5\1\0"+
    "\6\5\2\0\1\47\7\5\5\0\2\5\7\0\3\5"+
    "\1\0\4\5\1\144\20\5\3\0\1\5\1\0\6\5"+
    "\2\0\1\47\7\5\5\0\2\5\7\0\3\5\1\0"+
    "\14\5\1\145\10\5\3\0\1\5\1\0\6\5\2\0"+
    "\1\47\7\5\5\0\2\5\7\0\3\5\1\0\11\5"+
    "\1\146\13\5\3\0\1\5\1\0\6\5\2\0\1\47"+
    "\7\5\5\0\2\5\7\0\3\5\1\0\13\5\1\70"+
    "\11\5\3\0\1\5\1\0\6\5\2\0\1\47\7\5"+
    "\5\0\2\5\7\0\3\5\1\0\17\5\1\147\5\5"+
    "\3\0\1\5\1\0\6\5\2\0\1\47\7\5\5\0"+
    "\2\5\7\0\3\5\1\0\1\5\1\70\23\5\3\0"+
    "\1\5\1\0\6\5\2\0\1\47\7\5\5\0\2\5"+
    "\7\0\3\5\1\0\2\5\1\150\22\5\24\0\1\151"+
    "\115\0\1\152\45\0\1\130\107\0\1\153\63\0\1\154"+
    "\115\0\1\155\45\0\1\134\107\0\1\156\45\0\4\157"+
    "\6\0\1\157\2\0\1\157\7\0\1\157\10\0\1\157"+
    "\6\0\1\157\6\0\1\157\2\0\2\157\3\0\1\157"+
    "\5\0\1\160\110\0\1\161\73\0\1\162\71\0\1\163"+
    "\57\0\1\5\1\0\6\5\2\0\1\47\7\5\5\0"+
    "\2\5\7\0\3\5\1\0\5\5\1\70\17\5\3\0"+
    "\1\5\1\0\6\5\2\0\1\47\7\5\5\0\2\5"+
    "\7\0\3\5\1\0\4\5\1\70\20\5\3\0\1\5"+
    "\1\0\6\5\2\0\1\47\7\5\5\0\2\5\1\0"+
    "\1\164\5\0\3\5\1\0\25\5\3\0\1\5\1\0"+
    "\6\5\2\0\1\47\7\5\5\0\2\5\7\0\3\5"+
    "\1\0\6\5\1\165\16\5\3\0\1\5\1\0\6\5"+
    "\2\0\1\47\7\5\5\0\2\5\7\0\3\5\1\0"+
    "\5\5\1\145\17\5\17\0\1\130\26\0\1\152\55\0"+
    "\1\166\46\0\1\153\2\167\5\153\1\0\1\167\1\0"+
    "\1\167\6\153\2\0\1\167\1\153\1\167\2\153\2\167"+
    "\1\0\2\167\1\153\1\167\3\153\1\167\25\153\1\0"+
    "\1\167\15\0\1\134\26\0\1\155\55\0\1\170\46\0"+
    "\1\156\2\171\5\156\1\0\1\171\1\0\1\171\6\156"+
    "\2\0\1\171\1\156\1\171\2\156\2\171\1\0\2\171"+
    "\1\156\1\171\3\156\1\171\25\156\1\0\1\171\4\0"+
    "\4\172\6\0\1\172\2\0\1\172\7\0\1\172\10\0"+
    "\1\172\6\0\1\172\6\0\1\172\2\0\2\172\3\0"+
    "\1\172\22\0\1\61\56\0\1\173\107\0\1\174\124\0"+
    "\1\175\16\0\1\176\6\0\1\5\1\0\6\5\2\0"+
    "\1\47\7\5\5\0\2\5\7\0\3\5\1\0\20\5"+
    "\1\70\4\5\30\0\1\153\73\0\1\156\51\0\4\5"+
    "\6\0\1\5\2\0\1\5\7\0\1\5\10\0\1\5"+
    "\6\0\1\5\6\0\1\5\2\0\2\5\3\0\1\5"+
    "\25\0\1\177\134\0\1\176\20\0\1\200\103\0\1\201"+
    "\70\0\1\202\74\0\1\161\55\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\3\1\3\11\5\1\1\11\14\1\1\11"+
    "\5\1\1\11\3\1\1\0\2\1\1\0\2\1\2\11"+
    "\1\1\4\0\12\1\1\11\11\0\1\1\1\0\2\1"+
    "\4\0\7\1\11\0\1\1\3\0\5\1\2\0\1\1"+
    "\2\0\1\1\2\0\1\11\3\0\1\1\10\0\1\11"+
    "\4\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[130];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public ChipTestTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "#", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ChipTestTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ChipTestTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { addToken(Token.PREPROCESSOR);
          }
        case 23: break;
        case 5: 
          { addNullToken(); return firstToken;
          }
        case 24: break;
        case 14: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 25: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 26: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 27: break;
        case 15: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 28: break;
        case 16: 
          { addToken(Token.RESERVED_WORD);
          }
        case 29: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 30: break;
        case 19: 
          { addToken(Token.LITERAL_NUMBER_BINARY);
          }
        case 31: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 32: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 33: break;
        case 7: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 34: break;
        case 17: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 35: break;
        case 13: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 36: break;
        case 22: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 37: break;
        case 21: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 38: break;
        case 12: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 39: break;
        case 3: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 40: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 41: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 42: break;
        case 9: 
          { 
          }
        case 43: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 131: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 132: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 133: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
