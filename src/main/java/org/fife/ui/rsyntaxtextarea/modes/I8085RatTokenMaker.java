/* The following code was generated by JFlex 1.4.1 on 6/1/24, 3:53 PM */

/*
 * Generated on 2/23/22, 1:57 PM
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class I8085RatTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\42\1\11\1\0\1\42\1\20\22\0\1\42\1\54\1\16"+
    "\1\21\1\22\1\60\1\56\1\10\2\55\1\44\1\57\1\52\1\50"+
    "\1\47\1\43\1\4\1\7\2\17\4\6\2\3\1\53\1\45\1\120"+
    "\1\117\1\121\1\54\1\23\1\63\1\64\1\65\1\66\1\67\1\5"+
    "\1\112\1\70\1\107\1\105\1\1\1\71\1\72\1\102\1\104\1\74"+
    "\1\1\1\110\1\73\1\106\1\114\1\113\1\75\1\111\1\1\1\103"+
    "\1\55\1\12\1\55\1\122\1\2\1\0\1\35\1\15\1\31\1\24"+
    "\1\25\1\26\1\37\1\61\1\27\1\115\1\76\1\32\1\41\1\30"+
    "\1\40\1\62\1\116\1\36\1\33\1\14\1\13\1\77\1\34\1\46"+
    "\1\100\1\101\1\51\1\123\1\51\1\54\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\3\1\4\3\1\1\5\17\1"+
    "\1\6\2\7\1\10\2\1\1\7\1\11\3\7\2\1"+
    "\10\12\13\1\3\7\1\13\1\14\5\13\1\15\3\13"+
    "\1\0\1\16\2\17\1\0\2\17\1\3\1\20\1\0"+
    "\1\3\5\1\2\5\1\21\7\0\3\1\1\22\3\1"+
    "\1\23\1\1\1\22\4\1\2\22\23\1\1\22\3\1"+
    "\1\24\1\25\1\1\1\26\5\1\1\0\3\1\1\12"+
    "\1\1\2\22\3\1\1\12\4\1\1\12\10\1\3\22"+
    "\3\1\1\22\3\0\1\27\6\0\1\26\1\0\1\30"+
    "\1\31\1\3\1\32\2\3\1\20\1\3\4\1\1\5"+
    "\1\33\1\5\5\0\1\34\3\0\10\1\1\22\1\35"+
    "\11\1\1\22\4\1\1\36\2\1\4\12\2\0\1\1"+
    "\1\22\3\1\11\0\1\3\3\1\1\5\11\0\13\1"+
    "\2\0\1\37\2\0\1\40\2\0\1\3\2\1\1\5"+
    "\1\0\1\34\4\0\11\1\5\0\1\3\1\1\1\5"+
    "\3\0\5\1\1\0\2\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\124\0\250\0\374\0\u0150\0\u01a4\0\u01f8\0\u024c"+
    "\0\374\0\u02a0\0\u02f4\0\u0348\0\u039c\0\u03f0\0\u0444\0\u0498"+
    "\0\u04ec\0\u0540\0\u0594\0\u05e8\0\u063c\0\u0690\0\u06e4\0\u0738"+
    "\0\u078c\0\u07e0\0\u0834\0\u0888\0\u08dc\0\u0930\0\u0984\0\374"+
    "\0\u09d8\0\u0a2c\0\u0a80\0\374\0\374\0\u0ad4\0\u0b28\0\u0b7c"+
    "\0\u0bd0\0\u0c24\0\u0c78\0\u0ccc\0\u0d20\0\u0d74\0\u0dc8\0\u0e1c"+
    "\0\u0e70\0\u0ec4\0\u0f18\0\u0f6c\0\u0fc0\0\u1014\0\u1068\0\u10bc"+
    "\0\u1110\0\u1164\0\u11b8\0\u120c\0\u1260\0\u12b4\0\u1308\0\u135c"+
    "\0\374\0\u13b0\0\u1404\0\u1458\0\u14ac\0\u1500\0\374\0\u1554"+
    "\0\u15a8\0\u15fc\0\u1650\0\374\0\u16a4\0\u16f8\0\u0a2c\0\u174c"+
    "\0\u17a0\0\u17f4\0\374\0\u1848\0\u189c\0\u18f0\0\u1944\0\u1998"+
    "\0\u19ec\0\u1a40\0\u1a94\0\u1ae8\0\374\0\u1b3c\0\u1b90\0\u1be4"+
    "\0\u1c38\0\u1c8c\0\u1ce0\0\u03f0\0\u1d34\0\u1d88\0\u1ddc\0\u0150"+
    "\0\u1e30\0\u1e84\0\u1ed8\0\u0150\0\u1f2c\0\u1f80\0\u1fd4\0\u2028"+
    "\0\u207c\0\u20d0\0\u2124\0\u2178\0\u21cc\0\u2220\0\u2274\0\u22c8"+
    "\0\u231c\0\u2370\0\u23c4\0\u2418\0\u246c\0\u24c0\0\u2514\0\u2568"+
    "\0\u25bc\0\u2610\0\u2664\0\u26b8\0\u270c\0\u2760\0\u27b4\0\u2808"+
    "\0\u285c\0\u28b0\0\u2904\0\374\0\374\0\u2958\0\u29ac\0\u2a00"+
    "\0\u2a54\0\u2aa8\0\u2afc\0\u2b50\0\u2ba4\0\u2bf8\0\u2c4c\0\u2ca0"+
    "\0\u2cf4\0\u2d48\0\u2d9c\0\u2df0\0\u2e44\0\u2e98\0\u2eec\0\u2f40"+
    "\0\u2f94\0\u2fe8\0\u303c\0\u3090\0\u30e4\0\u3138\0\u318c\0\u31e0"+
    "\0\u3234\0\u3288\0\u32dc\0\u3330\0\u3384\0\u3288\0\u33d8\0\u2eec"+
    "\0\u342c\0\u3480\0\u34d4\0\u1fd4\0\u3528\0\u357c\0\u35d0\0\374"+
    "\0\u3624\0\u3678\0\u36cc\0\u3720\0\u3774\0\u37c8\0\u381c\0\u3870"+
    "\0\u174c\0\u17a0\0\u38c4\0\374\0\u3918\0\u396c\0\u1848\0\u39c0"+
    "\0\u3a14\0\u3a68\0\u3abc\0\u3b10\0\u3b64\0\374\0\u3bb8\0\u3c0c"+
    "\0\u3c60\0\u3cb4\0\u3d08\0\u3d5c\0\u3db0\0\u3e04\0\u3e58\0\u3eac"+
    "\0\u3f00\0\u3f54\0\u3fa8\0\u3ffc\0\u4050\0\u40a4\0\u40f8\0\u414c"+
    "\0\u41a0\0\u0150\0\u41f4\0\u4248\0\u429c\0\u42f0\0\u4344\0\u4398"+
    "\0\u43ec\0\u4440\0\u4494\0\u44e8\0\u453c\0\u4590\0\u45e4\0\u4638"+
    "\0\u0150\0\u468c\0\u46e0\0\u4734\0\u4788\0\u47dc\0\u4830\0\u4884"+
    "\0\u48d8\0\u492c\0\u4980\0\u49d4\0\u4a28\0\u4a7c\0\u4ad0\0\u4b24"+
    "\0\u4b78\0\u4bcc\0\u4c20\0\u4c74\0\u4cc8\0\u4d1c\0\u4d70\0\u4dc4"+
    "\0\u4e18\0\u4e6c\0\u4ec0\0\u4f14\0\u4f68\0\u4fbc\0\u5010\0\u5064"+
    "\0\u50b8\0\u510c\0\u5160\0\u51b4\0\u5208\0\u525c\0\u52b0\0\u5304"+
    "\0\u5358\0\u53ac\0\u5400\0\u5454\0\u54a8\0\u54fc\0\u5550\0\u55a4"+
    "\0\u55f8\0\u564c\0\u56a0\0\u56f4\0\u5748\0\u579c\0\u57f0\0\u5844"+
    "\0\u5898\0\u58ec\0\u5940\0\u5994\0\u59e8\0\374\0\u5a3c\0\u5a90"+
    "\0\u5ae4\0\u5b38\0\u5b8c\0\u5be0\0\u5c34\0\u5c88\0\u5cdc\0\u5d30"+
    "\0\u5d84\0\u5dd8\0\u5e2c\0\u5e80\0\u56a0\0\u5ed4\0\u579c\0\u5f28"+
    "\0\u5f7c\0\u5fd0\0\u6024\0\u6078\0\u60cc\0\u6120\0\u6174\0\u61c8"+
    "\0\u621c\0\u6270\0\u62c4\0\u6318\0\u636c\0\u63c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\5\2\6\1\10\1\11"+
    "\1\4\1\12\1\13\1\14\1\15\1\6\1\4\1\16"+
    "\1\17\1\4\1\20\1\21\1\5\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\4\2\45\1\44\1\46\1\47\1\37\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\2\5\1\64\2\5\1\65\1\5\1\66"+
    "\1\67\1\5\1\70\1\71\1\72\3\5\1\73\1\74"+
    "\1\37\1\75\1\76\1\45\1\77\11\100\1\101\14\100"+
    "\1\102\5\100\1\103\7\100\1\104\14\100\1\105\42\100"+
    "\11\106\1\107\14\106\1\110\5\106\1\111\24\106\1\112"+
    "\42\106\125\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\20\5\4\0\1\5\4\0\1\114\5\0\36\5"+
    "\5\0\3\115\2\6\1\115\2\6\2\0\4\115\1\0"+
    "\1\6\1\0\4\115\1\116\14\115\4\0\1\115\1\117"+
    "\11\0\36\115\5\0\3\115\2\6\1\115\2\6\2\0"+
    "\3\115\1\120\1\0\1\6\1\0\4\115\1\116\14\115"+
    "\4\0\1\121\1\117\11\0\36\115\5\0\10\122\1\123"+
    "\1\124\1\125\111\122\1\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\11\5\1\126\6\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\20\5\4\0\1\5\4\0"+
    "\1\114\5\0\17\5\1\127\16\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\5\5\1\130\6\5"+
    "\1\131\3\5\4\0\1\5\4\0\1\114\5\0\17\5"+
    "\1\132\16\5\5\0\11\15\1\133\1\134\3\15\1\135"+
    "\105\15\13\0\1\136\10\0\1\137\1\140\1\0\1\141"+
    "\4\0\1\142\4\0\1\143\1\144\62\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\3\5\1\145\3\5"+
    "\1\146\6\5\1\147\1\5\4\0\1\5\4\0\1\114"+
    "\5\0\36\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\5\5\1\150\1\5\1\151\2\5\1\152"+
    "\1\153\2\5\1\154\1\5\4\0\1\5\4\0\1\114"+
    "\5\0\36\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\5\5\1\150\2\5\1\12\7\5\4\0"+
    "\1\155\4\0\1\114\5\0\36\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\4\5\1\154\1\5"+
    "\1\156\11\5\4\0\1\5\4\0\1\114\5\0\36\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\16\5\1\157\1\5\4\0\1\5\4\0\1\114\5\0"+
    "\36\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\6\5\1\160\1\150\3\5\1\161\2\5\1\162"+
    "\1\163\4\0\1\5\4\0\1\114\5\0\1\5\1\164"+
    "\16\5\1\150\15\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\2\5\1\165\13\5\1\166\1\5"+
    "\4\0\1\167\4\0\1\114\5\0\1\170\35\5\6\0"+
    "\7\5\2\0\1\113\1\171\1\172\1\171\1\0\1\5"+
    "\2\0\5\5\1\173\5\5\1\174\4\5\4\0\1\5"+
    "\4\0\1\114\5\0\1\170\1\175\34\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\16\5\1\176"+
    "\1\5\4\0\1\5\4\0\1\114\5\0\1\177\35\5"+
    "\6\0\7\5\2\0\1\113\2\5\1\200\1\0\1\5"+
    "\2\0\2\5\1\201\3\5\1\202\1\167\1\5\1\154"+
    "\6\5\4\0\1\5\4\0\1\114\5\0\36\5\6\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\3\5"+
    "\1\203\1\5\1\204\1\160\1\150\1\205\1\206\1\5"+
    "\1\207\1\205\2\5\1\150\4\0\1\5\4\0\1\114"+
    "\5\0\1\5\1\210\16\5\1\150\15\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\16\5\1\211"+
    "\1\5\4\0\1\5\4\0\1\114\5\0\36\5\6\0"+
    "\7\5\2\0\1\113\1\206\2\5\1\0\1\5\2\0"+
    "\14\5\1\202\3\5\4\0\1\5\4\0\1\114\5\0"+
    "\36\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\3\5\1\212\12\5\1\213\1\5\4\0\1\5"+
    "\4\0\1\114\5\0\16\5\1\167\17\5\47\0\1\35"+
    "\124\0\1\214\1\215\52\0\1\45\123\0\1\45\5\0"+
    "\7\5\2\0\1\113\1\5\1\175\1\5\1\0\1\5"+
    "\2\0\7\5\1\216\4\5\1\202\3\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\10\0\2\217\1\0\2\217"+
    "\7\0\1\217\154\0\1\45\46\0\1\45\62\0\1\45"+
    "\124\0\1\45\37\0\1\45\5\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\5\5\1\220\2\5\1\206"+
    "\7\5\4\0\1\5\4\0\1\114\5\0\36\5\6\0"+
    "\7\5\2\0\1\113\1\221\1\222\1\5\1\0\1\5"+
    "\2\0\7\5\1\175\4\5\1\223\1\5\1\224\1\5"+
    "\4\0\1\5\4\0\1\114\5\0\36\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\1\225\3\0\1\114\5\0\4\5\1\226\1\227"+
    "\13\5\1\230\14\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\1\225\3\0"+
    "\1\114\5\0\4\5\1\231\31\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\1\225\3\0\1\114\5\0\2\5\1\232\1\5\1\150"+
    "\4\5\1\233\1\5\1\234\5\5\1\235\1\150\13\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\1\225\3\0\1\114\5\0\2\5"+
    "\1\236\1\5\1\237\1\5\1\231\17\5\1\150\7\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\1\225\3\0\1\114\5\0\26\5"+
    "\1\150\7\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\20\5\4\0\1\5\1\225\3\0\1\114"+
    "\5\0\10\5\1\240\25\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\20\5\4\0\1\5\1\225"+
    "\3\0\1\114\5\0\5\5\1\241\1\5\1\242\20\5"+
    "\1\226\5\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\20\5\4\0\1\5\1\225\3\0\1\114"+
    "\5\0\23\5\1\243\6\5\1\226\3\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\4\0\1\114\5\0\3\5\1\244\3\5\1\242"+
    "\3\5\1\245\11\5\1\246\1\247\4\5\1\244\2\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\114\5\0\4\5\1\250"+
    "\5\5\1\251\10\5\1\252\7\5\1\253\2\5\6\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\13\5"+
    "\1\254\4\5\4\0\1\5\4\0\1\114\5\0\36\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\114\5\0\23\5\1\252"+
    "\12\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\20\5\4\0\1\5\4\0\1\114\5\0\27\5"+
    "\1\230\3\5\1\255\2\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\20\5\4\0\1\5\4\0"+
    "\1\114\5\0\4\5\1\150\4\5\1\256\1\5\1\257"+
    "\5\5\1\235\1\150\13\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\20\5\4\0\1\5\4\0"+
    "\1\114\5\0\21\5\1\260\14\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\4\0\1\114\5\0\2\5\1\261\1\5\1\150\1\5"+
    "\1\255\1\5\1\262\1\150\1\255\1\257\5\5\1\235"+
    "\1\150\3\5\1\247\1\262\6\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\4\0\1\114\5\0\4\5\1\263\20\5\1\250\1\5"+
    "\1\230\6\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\6\5\1\160\1\150\7\5\1\264\4\0"+
    "\1\5\4\0\1\114\5\0\1\5\1\210\16\5\1\150"+
    "\15\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\12\5\1\152\5\5\4\0\1\5\4\0\1\114"+
    "\5\0\36\5\125\0\1\37\124\0\1\37\125\0\1\45"+
    "\11\100\1\0\14\100\1\0\5\100\1\0\7\100\1\0"+
    "\14\100\1\0\42\100\14\0\1\265\12\0\1\266\130\0"+
    "\1\267\132\0\1\270\74\0\1\271\107\0\11\106\1\0"+
    "\14\106\1\0\5\106\1\0\24\106\1\0\42\106\14\0"+
    "\1\272\12\0\1\273\130\0\1\274\103\0\1\275\122\0"+
    "\1\276\110\0\10\115\2\0\4\115\1\0\1\115\1\0"+
    "\21\115\4\0\1\115\12\0\36\115\5\0\3\115\2\277"+
    "\1\115\2\277\2\0\4\115\1\0\1\277\1\0\21\115"+
    "\4\0\1\115\1\0\1\300\6\0\1\300\1\0\36\115"+
    "\5\0\4\115\1\301\2\115\1\301\2\0\4\115\1\0"+
    "\1\115\1\0\21\115\4\0\1\115\12\0\36\115\5\0"+
    "\3\115\5\302\2\0\3\115\1\302\1\0\1\302\1\0"+
    "\3\115\3\302\2\115\1\302\3\115\1\302\4\115\4\0"+
    "\1\115\12\0\2\115\5\302\27\115\5\0\10\303\1\304"+
    "\1\0\112\303\10\0\1\304\113\0\4\303\1\305\1\303"+
    "\1\306\1\305\1\307\1\0\1\122\1\310\3\122\1\305"+
    "\6\303\1\122\1\303\1\122\5\303\1\122\65\303\1\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\3\5"+
    "\1\154\14\5\4\0\1\5\4\0\1\114\5\0\36\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\114\5\0\1\5\1\311"+
    "\34\5\6\0\7\5\2\0\1\113\1\5\1\312\1\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\4\0\1\114"+
    "\5\0\36\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\3\5\1\313\14\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\6\0\7\5\2\0\1\113\1\5"+
    "\1\314\1\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\5\0\12\133\1\315\3\133"+
    "\1\316\111\133\1\15\1\133\3\15\1\0\1\15\1\317"+
    "\4\15\6\133\1\15\1\133\1\15\5\133\1\15\65\133"+
    "\30\0\1\320\120\0\1\321\126\0\1\322\1\0\1\323"+
    "\3\0\1\324\113\0\1\325\1\0\1\326\130\0\1\327"+
    "\113\0\1\330\77\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\6\5\1\331\11\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\10\5\1\332\7\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\6\0\7\5\2\0\1\113"+
    "\1\333\2\5\1\0\1\5\2\0\14\5\1\334\3\5"+
    "\4\0\1\5\4\0\1\114\5\0\36\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\14\5\1\150"+
    "\3\5\4\0\1\150\4\0\1\114\5\0\36\5\6\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\16\5"+
    "\1\176\1\5\4\0\1\5\4\0\1\114\5\0\36\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\2\5\1\150\10\5\1\150\4\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\6\0\7\5\2\0\1\113\1\5"+
    "\1\335\1\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\10\5\1\336\3\5\1\150"+
    "\3\5\4\0\1\150\4\0\1\114\5\0\36\5\6\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\20\5"+
    "\4\0\1\5\4\0\1\114\5\0\1\5\1\150\34\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\7\5\1\150\10\5\4\0\1\5\4\0\1\114\5\0"+
    "\20\5\1\150\15\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\10\5\1\337\7\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\6\5\1\340\11\5\4\0"+
    "\1\5\4\0\1\114\5\0\36\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\7\5\1\150\3\5"+
    "\1\150\4\5\4\0\1\5\4\0\1\114\5\0\1\5"+
    "\1\150\34\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\3\5\1\150\1\5\1\150\10\5\1\150"+
    "\1\5\4\0\1\5\4\0\1\114\5\0\36\5\6\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\13\5"+
    "\1\341\4\5\4\0\1\5\4\0\1\114\5\0\36\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\12\5\1\342\3\5\1\343\1\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\5\5\1\150\12\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\10\5\1\344\7\5\4\0"+
    "\1\5\4\0\1\114\5\0\36\5\6\0\7\5\2\0"+
    "\1\113\2\5\1\150\1\0\1\5\2\0\5\5\1\150"+
    "\12\5\4\0\1\5\4\0\1\114\5\0\36\5\6\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\7\5"+
    "\1\150\3\5\1\341\1\345\3\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\15\5\1\346\1\5\1\150\4\0"+
    "\1\5\4\0\1\114\5\0\20\5\1\347\15\5\6\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\20\5"+
    "\4\0\1\5\4\0\1\114\5\0\16\5\1\350\17\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\114\5\0\1\337\35\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\14\5\1\351\3\5\4\0\1\5\4\0\1\114\5\0"+
    "\36\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\5\5\1\352\12\5\4\0\1\5\4\0\1\114"+
    "\5\0\36\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\11\5\1\353\6\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\2\5\1\150\2\5\1\150\1\5"+
    "\1\150\10\5\4\0\1\5\4\0\1\114\5\0\36\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\5\5\1\150\5\5\1\150\4\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\6\0\7\5\2\0\1\113\1\5"+
    "\1\354\1\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\17\5\1\150\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\7\5\1\150\10\5\4\0"+
    "\1\5\4\0\1\114\5\0\36\5\6\0\7\5\2\0"+
    "\1\113\1\5\1\150\1\5\1\0\1\5\2\0\20\5"+
    "\4\0\1\5\4\0\1\114\5\0\36\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\10\5\1\150"+
    "\3\5\1\150\3\5\4\0\1\5\4\0\1\114\5\0"+
    "\36\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\3\5\1\150\12\5\1\150\1\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\6\0\7\5\2\0\1\113"+
    "\1\5\1\355\1\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\4\0\1\114\5\0\36\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\17\5\1\154\4\0"+
    "\1\5\4\0\1\114\5\0\36\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\4\0\1\114\5\0\16\5\1\150\17\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\4\0\1\114\5\0\1\356\35\5\5\0\3\115"+
    "\2\217\1\115\2\217\2\0\4\115\1\0\1\217\1\0"+
    "\4\115\1\116\14\115\4\0\1\115\12\0\36\115\6\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\15\5"+
    "\1\357\2\5\4\0\1\5\4\0\1\114\5\0\36\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\11\5\1\360\6\5\4\0\1\5\4\0\1\114\5\0"+
    "\36\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\14\5\1\361\3\5\4\0\1\5\4\0\1\114"+
    "\5\0\36\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\16\5\1\362\1\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\14\5\1\363\3\5\4\0\1\5"+
    "\4\0\1\114\5\0\1\5\1\150\34\5\70\0\1\364"+
    "\1\365\1\364\1\366\1\364\1\367\2\364\1\370\1\371"+
    "\30\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\114\5\0\26\5\1\150"+
    "\7\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\20\5\4\0\1\5\4\0\1\114\5\0\4\5"+
    "\2\150\20\5\1\150\7\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\20\5\4\0\1\5\4\0"+
    "\1\114\5\0\2\5\1\150\23\5\1\150\7\5\6\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\20\5"+
    "\4\0\1\5\1\225\3\0\1\114\5\0\36\5\6\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\20\5"+
    "\4\0\1\5\4\0\1\114\5\0\10\5\1\372\25\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\114\5\0\2\5\1\150"+
    "\1\5\1\150\6\5\1\150\22\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\4\0\1\114\5\0\6\5\1\150\14\5\1\150\2\5"+
    "\1\150\7\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\20\5\4\0\1\5\4\0\1\114\5\0"+
    "\4\5\1\150\15\5\1\150\13\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\4\0\1\114\5\0\2\5\1\150\2\5\1\150\30\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\114\5\0\27\5\2\150"+
    "\5\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\20\5\4\0\1\5\1\225\3\0\1\114\5\0"+
    "\25\5\1\150\10\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\4\0\1\114"+
    "\5\0\2\5\1\373\33\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\20\5\4\0\1\5\4\0"+
    "\1\114\5\0\10\5\1\374\25\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\4\0\1\114\5\0\32\5\1\150\3\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\4\0\1\114\5\0\3\5\1\150\22\5\1\150"+
    "\7\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\20\5\4\0\1\5\1\225\3\0\1\114\5\0"+
    "\7\5\1\372\26\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\4\0\1\114"+
    "\5\0\2\5\1\373\1\5\1\150\31\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\4\0\1\114\5\0\11\5\1\150\24\5\6\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\20\5"+
    "\4\0\1\5\4\0\1\114\5\0\7\5\1\372\26\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\114\5\0\14\5\1\231"+
    "\21\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\20\5\4\0\1\5\4\0\1\114\5\0\13\5"+
    "\1\150\22\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\20\5\4\0\1\5\4\0\1\114\5\0"+
    "\12\5\1\375\23\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\14\5\1\154\3\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\20\5\4\0\1\5\4\0"+
    "\1\114\5\0\25\5\1\150\10\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\4\0\1\114\5\0\6\5\1\150\14\5\1\150\12\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\114\5\0\10\5\1\150"+
    "\16\5\1\150\6\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\4\0\1\114"+
    "\5\0\4\5\1\150\31\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\20\5\4\0\1\5\4\0"+
    "\1\114\5\0\7\5\1\376\26\5\67\0\1\377\73\0"+
    "\1\u0100\125\0\1\u0101\103\0\1\u0102\171\0\1\u0103\73\0"+
    "\1\u0104\125\0\1\u0105\103\0\1\u0106\112\0\5\u0107\5\0"+
    "\1\u0107\1\0\1\u0107\4\0\3\u0107\2\0\1\u0107\3\0"+
    "\1\u0107\25\0\5\u0107\34\0\3\115\2\277\1\115\2\277"+
    "\2\0\4\115\1\0\1\277\1\0\21\115\4\0\1\115"+
    "\12\0\36\115\10\0\2\277\1\0\2\277\7\0\1\277"+
    "\104\0\10\303\1\123\1\0\116\303\1\306\1\303\2\306"+
    "\1\304\1\0\5\303\1\306\110\303\1\122\1\303\2\122"+
    "\1\304\1\0\5\303\1\122\107\303\5\u0108\1\123\1\0"+
    "\3\303\1\u0108\1\303\1\u0108\4\303\3\u0108\2\303\1\u0108"+
    "\3\303\1\u0108\25\303\5\u0108\34\303\1\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\3\5\1\u0109\14\5"+
    "\4\0\1\5\4\0\1\114\5\0\36\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\17\5\1\u010a"+
    "\4\0\1\5\4\0\1\114\5\0\36\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\13\5\1\u010b"+
    "\4\5\4\0\1\5\4\0\1\114\5\0\36\5\6\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\3\5"+
    "\1\361\14\5\4\0\1\5\4\0\1\114\5\0\36\5"+
    "\5\0\11\133\1\0\115\133\5\u010c\2\133\1\315\2\133"+
    "\1\u010c\1\316\1\u010c\4\133\3\u010c\2\133\1\u010c\3\133"+
    "\1\u010c\25\133\5\u010c\34\133\24\0\1\u010d\125\0\1\u010e"+
    "\121\0\1\u010f\126\0\1\u0110\3\0\1\u0111\126\0\1\u0112"+
    "\111\0\1\u010d\3\0\1\320\124\0\1\u0113\130\0\1\u0114"+
    "\120\0\1\u0115\71\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\7\5\1\u0116\10\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\3\5\1\u0117\14\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\6\0\7\5\2\0\1\113"+
    "\1\5\1\u0118\1\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\4\0\1\114\5\0\36\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\15\5\1\154\2\5"+
    "\4\0\1\5\4\0\1\114\5\0\36\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\3\5\1\u0119"+
    "\14\5\4\0\1\5\4\0\1\114\5\0\36\5\6\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\5\5"+
    "\1\u011a\12\5\4\0\1\5\4\0\1\114\5\0\36\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\10\5\1\150\7\5\4\0\1\5\4\0\1\114\5\0"+
    "\36\5\6\0\7\5\2\0\1\113\1\5\1\u011b\1\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\4\0\1\114"+
    "\5\0\36\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\20\5\4\0\1\150\4\0\1\114\5\0"+
    "\36\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\20\5\4\0\1\5\4\0\1\114\5\0\1\5"+
    "\1\154\34\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\2\5\1\150\15\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\6\0\7\5\2\0\1\113\1\u011c"+
    "\2\5\1\0\1\5\2\0\20\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\6\5\1\u011d\11\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\3\5\1\u011e\14\5\4\0"+
    "\1\5\4\0\1\114\5\0\36\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\3\5\1\u011f\14\5"+
    "\4\0\1\5\4\0\1\114\5\0\36\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\2\5\1\361"+
    "\15\5\4\0\1\5\4\0\1\114\5\0\36\5\6\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\10\5"+
    "\1\126\7\5\4\0\1\5\4\0\1\114\5\0\36\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\16\5\1\u0120\1\5\4\0\1\5\4\0\1\114\5\0"+
    "\36\5\6\0\7\5\2\0\1\113\1\u0119\2\5\1\0"+
    "\1\5\2\0\20\5\4\0\1\5\4\0\1\114\5\0"+
    "\36\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\16\5\1\154\1\5\4\0\1\5\4\0\1\114"+
    "\5\0\36\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\15\5\1\150\2\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\4\0\1\114"+
    "\5\0\1\342\35\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\4\0\1\114"+
    "\5\0\1\150\35\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\7\5\1\154\10\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\6\0\7\5\2\0\1\113"+
    "\1\5\1\154\1\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\4\0\1\114\5\0\36\5\54\0\1\225\123\0"+
    "\1\225\15\0\1\364\105\0\1\225\17\0\1\364\103\0"+
    "\1\225\21\0\1\364\126\0\1\364\122\0\1\u0121\31\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\20\5"+
    "\4\0\1\5\4\0\1\114\5\0\10\5\1\150\25\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\114\5\0\30\5\1\150"+
    "\5\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\20\5\4\0\1\5\4\0\1\114\5\0\5\5"+
    "\1\150\30\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\20\5\4\0\1\5\4\0\1\114\5\0"+
    "\7\5\1\150\26\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\4\0\1\114"+
    "\5\0\31\5\1\150\4\5\60\0\1\u0122\75\0\1\377"+
    "\145\0\1\u0123\136\0\1\u0124\114\0\1\u0125\75\0\1\u0103"+
    "\145\0\1\u0126\136\0\1\u0127\44\0\5\u0128\5\0\1\u0128"+
    "\1\0\1\u0128\4\0\3\u0128\2\0\1\u0128\3\0\1\u0128"+
    "\25\0\5\u0128\34\0\3\303\5\u0129\1\123\1\0\3\303"+
    "\1\u0129\1\303\1\u0129\4\303\3\u0129\2\303\1\u0129\3\303"+
    "\1\u0129\25\303\5\u0129\34\303\1\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\2\5\1\u012a\15\5\4\0"+
    "\1\5\4\0\1\114\5\0\36\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\13\5\1\u012b\4\5"+
    "\4\0\1\5\4\0\1\114\5\0\36\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\4\0\1\114\5\0\15\5\1\154\20\5\5\0"+
    "\3\133\5\u012c\2\133\1\315\2\133\1\u012c\1\316\1\u012c"+
    "\4\133\3\u012c\2\133\1\u012c\3\133\1\u012c\25\133\5\u012c"+
    "\34\133\25\0\1\u0110\125\0\1\u012d\123\0\1\u0110\122\0"+
    "\1\u012e\122\0\1\u012e\136\0\1\u012f\115\0\1\u0130\121\0"+
    "\1\u0131\126\0\1\u0132\71\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\16\5\1\u0133\1\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\13\5\1\u0134\4\5\4\0"+
    "\1\5\4\0\1\114\5\0\36\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\4\0\1\114\5\0\1\5\1\u0135\34\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\14\5\1\u0136"+
    "\3\5\4\0\1\5\4\0\1\114\5\0\36\5\6\0"+
    "\7\5\2\0\1\113\3\5\1\0\1\5\2\0\6\5"+
    "\1\126\11\5\4\0\1\5\4\0\1\114\5\0\36\5"+
    "\6\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\5\5\1\u0137\12\5\4\0\1\5\4\0\1\114\5\0"+
    "\36\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\7\5\1\363\10\5\4\0\1\5\4\0\1\114"+
    "\5\0\36\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\3\5\1\u0138\14\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\16\5\1\u0139\1\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\14\5\1\u013a\3\5\4\0"+
    "\1\5\4\0\1\114\5\0\36\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\10\5\1\u013b\7\5"+
    "\4\0\1\5\4\0\1\114\5\0\36\5\102\0\1\364"+
    "\71\0\1\u013c\61\0\1\u0123\1\u013d\5\u0123\1\u013d\2\0"+
    "\3\u0123\1\0\1\u0123\1\0\1\u013d\1\u0123\1\u013d\16\u0123"+
    "\1\0\1\u0123\2\u013d\1\u0123\2\u013d\1\0\7\u013d\36\u0123"+
    "\1\u013d\37\0\1\377\17\0\1\u0122\113\0\1\u013e\61\0"+
    "\1\u0126\1\u013f\5\u0126\1\u013f\2\0\3\u0126\1\0\1\u0126"+
    "\1\0\1\u013f\1\u0126\1\u013f\16\u0126\1\0\1\u0126\2\u013f"+
    "\1\u0126\2\u013f\1\0\7\u013f\36\u0126\1\u013f\37\0\1\u0103"+
    "\17\0\1\u0125\53\0\5\u0140\5\0\1\u0140\1\0\1\u0140"+
    "\4\0\3\u0140\2\0\1\u0140\3\0\1\u0140\25\0\5\u0140"+
    "\34\0\3\303\5\u0141\1\123\1\0\3\303\1\u0141\1\303"+
    "\1\u0141\4\303\3\u0141\2\303\1\u0141\3\303\1\u0141\25\303"+
    "\5\u0141\34\303\1\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\3\5\1\u0142\14\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\11\5\1\u010b\6\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\5\0\3\133\5\u0143\2\133"+
    "\1\315\2\133\1\u0143\1\316\1\u0143\4\133\3\u0143\2\133"+
    "\1\u0143\3\133\1\u0143\25\133\5\u0143\34\133\30\0\1\u0111"+
    "\131\0\1\u012e\100\0\1\u0144\137\0\1\u0145\131\0\1\u0146"+
    "\67\0\7\5\2\0\1\113\3\5\1\0\1\5\2\0"+
    "\2\5\1\u0147\15\5\4\0\1\5\4\0\1\114\5\0"+
    "\36\5\6\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\6\5\1\u0148\11\5\4\0\1\5\4\0\1\114"+
    "\5\0\36\5\6\0\7\5\2\0\1\113\1\363\2\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\4\0\1\114"+
    "\5\0\36\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\6\5\1\154\11\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\6\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\6\5\1\u0149\11\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\6\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\2\5\1\342\15\5\4\0"+
    "\1\5\4\0\1\114\5\0\36\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\4\5\1\342\13\5"+
    "\4\0\1\5\4\0\1\114\5\0\36\5\6\0\7\5"+
    "\2\0\1\113\3\5\1\0\1\5\2\0\3\5\1\u014a"+
    "\14\5\4\0\1\5\4\0\1\114\5\0\36\5\6\0"+
    "\7\5\2\0\1\113\1\u014b\2\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\114\5\0\36\5\50\0"+
    "\1\u0123\123\0\1\u0126\63\0\5\5\5\0\1\5\1\0"+
    "\1\5\4\0\3\5\2\0\1\5\3\0\1\5\25\0"+
    "\5\5\34\0\3\303\5\122\1\123\1\0\3\303\1\122"+
    "\1\303\1\122\4\303\3\122\2\303\1\122\3\303\1\122"+
    "\25\303\5\122\34\303\1\0\7\5\2\0\1\113\3\5"+
    "\1\0\1\5\2\0\4\5\1\154\13\5\4\0\1\5"+
    "\4\0\1\114\5\0\36\5\5\0\3\133\5\15\2\133"+
    "\1\315\2\133\1\15\1\316\1\15\4\133\3\15\2\133"+
    "\1\15\3\133\1\15\25\133\5\15\34\133\24\0\1\u0111"+
    "\127\0\1\u014c\132\0\1\u0111\65\0\7\5\2\0\1\113"+
    "\3\5\1\0\1\5\2\0\5\5\1\u014d\12\5\4\0"+
    "\1\5\4\0\1\114\5\0\36\5\6\0\7\5\2\0"+
    "\1\113\1\343\2\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\4\0\1\114\5\0\36\5\6\0\7\5\2\0"+
    "\1\113\1\126\2\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\4\0\1\114\5\0\36\5\6\0\7\5\2\0"+
    "\1\113\3\5\1\0\1\5\2\0\15\5\1\u014e\2\5"+
    "\4\0\1\5\4\0\1\114\5\0\36\5\6\0\7\5"+
    "\2\0\1\113\1\5\1\126\1\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\114\5\0\36\5\44\0"+
    "\1\u012e\65\0\7\5\2\0\1\113\3\5\1\0\1\5"+
    "\2\0\6\5\1\334\11\5\4\0\1\5\4\0\1\114"+
    "\5\0\36\5\6\0\7\5\2\0\1\113\3\5\1\0"+
    "\1\5\2\0\11\5\1\154\6\5\4\0\1\5\4\0"+
    "\1\114\5\0\36\5\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25620];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\26\1\1\11\3\1\2\11"+
    "\33\1\1\11\5\1\1\11\3\1\1\0\1\11\2\1"+
    "\1\0\3\1\1\11\1\0\10\1\1\11\7\0\47\1"+
    "\2\11\7\1\1\0\37\1\3\0\1\11\6\0\1\1"+
    "\1\0\3\1\1\11\11\1\1\11\1\1\5\0\1\1"+
    "\3\0\37\1\2\0\5\1\11\0\5\1\11\0\13\1"+
    "\2\0\1\1\2\0\1\1\2\0\4\1\1\0\1\11"+
    "\4\0\11\1\5\0\3\1\3\0\5\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[334];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public I8085RatTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public I8085RatTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public I8085RatTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 194) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { addToken(Token.PREPROCESSOR);
          }
        case 33: break;
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 34: break;
        case 26: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 35: break;
        case 18: 
          { addToken(Token.CPU_INSTRUCTION);
          }
        case 36: break;
        case 14: 
          { addToken(Token.LABEL);
          }
        case 37: break;
        case 21: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 38: break;
        case 10: 
          { addToken(Token.REGISTER);
          }
        case 39: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 40: break;
        case 25: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 41: break;
        case 27: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 42: break;
        case 22: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 43: break;
        case 19: 
          { addToken(Token.RESERVED_WORD);
          }
        case 44: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 45: break;
        case 24: 
          { addToken(Token.LITERAL_NUMBER_BINARY);
          }
        case 46: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 47: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 48: break;
        case 20: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 49: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 50: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 51: break;
        case 30: 
          { addToken(Token.DATA_TYPE);
          }
        case 52: break;
        case 23: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 53: break;
        case 16: 
          { addToken(Token.ERROR_CHAR);
          }
        case 54: break;
        case 17: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 55: break;
        case 32: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 56: break;
        case 31: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 57: break;
        case 29: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 58: break;
        case 15: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 59: break;
        case 8: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 60: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 61: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 62: break;
        case 11: 
          { 
          }
        case 63: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 64: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 335: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 336: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 337: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
