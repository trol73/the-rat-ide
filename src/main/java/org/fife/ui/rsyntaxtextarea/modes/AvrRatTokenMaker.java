/* The following code was generated by JFlex 1.4.1 on 3/22/22, 6:31 PM */

/*
 * Generated on 2/23/22, 1:57 PM
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class AvrRatTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\41\1\11\1\0\1\41\1\20\22\0\1\41\1\54\1\16"+
    "\1\21\1\22\1\60\1\56\1\10\2\55\1\43\1\57\1\51\1\47"+
    "\1\46\1\42\1\4\1\7\1\71\1\17\1\6\1\6\1\6\1\6"+
    "\1\3\1\3\1\52\1\44\1\74\1\73\1\75\1\54\1\53\6\5"+
    "\21\1\1\70\1\70\1\70\1\55\1\12\1\55\1\76\1\2\1\0"+
    "\1\34\1\15\1\30\1\23\1\24\1\25\1\36\1\61\1\26\1\67"+
    "\1\63\1\31\1\40\1\27\1\37\1\62\1\66\1\35\1\32\1\14"+
    "\1\13\1\64\1\33\1\45\1\72\1\65\1\50\1\77\1\50\1\54"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\3\1\2\2\1\3\1\4\3\1\1\5\17\1"+
    "\1\6\2\7\1\10\2\1\1\7\1\11\3\7\5\1"+
    "\1\12\3\7\1\13\1\14\5\13\1\15\3\13\1\0"+
    "\1\16\3\17\1\0\2\17\1\3\1\20\1\0\1\3"+
    "\10\1\2\5\1\21\7\0\2\1\1\22\5\1\1\23"+
    "\7\1\2\23\5\1\1\23\11\1\1\22\2\12\2\1"+
    "\1\23\3\1\1\24\1\1\1\25\7\1\3\0\1\26"+
    "\6\0\1\25\1\0\1\27\1\30\1\3\1\31\2\3"+
    "\1\20\1\3\1\23\11\1\1\5\1\32\1\5\5\0"+
    "\1\33\3\0\3\1\1\34\1\1\2\23\6\1\1\23"+
    "\1\1\2\23\1\17\1\1\1\35\2\1\11\0\1\25"+
    "\1\3\2\1\1\35\1\5\11\0\5\1\1\23\2\1"+
    "\1\0\1\36\2\0\1\37\2\0\1\3\1\1\1\5"+
    "\1\0\1\33\4\0\5\1\5\0\1\3\1\5\3\0"+
    "\3\1\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\300\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380"+
    "\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580"+
    "\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780"+
    "\0\300\0\u07c0\0\u0800\0\u0840\0\300\0\300\0\u0880\0\u08c0"+
    "\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0100\0\u0a40\0\u0a80"+
    "\0\u0ac0\0\u0b00\0\300\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40"+
    "\0\300\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\300\0\u0d80\0\u0dc0"+
    "\0\u0e00\0\u0800\0\u0e40\0\u0e80\0\u0ec0\0\300\0\u0f00\0\u0f40"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\300\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300"+
    "\0\u1340\0\u0340\0\u1380\0\u13c0\0\u0100\0\u1400\0\u1440\0\u1480"+
    "\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680"+
    "\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880"+
    "\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80"+
    "\0\u1ac0\0\u1b00\0\u1b40\0\u1480\0\u1b80\0\u1bc0\0\u1c00\0\u1c40"+
    "\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\300\0\u1d80\0\u1dc0\0\u1e00"+
    "\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000"+
    "\0\u2040\0\300\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0"+
    "\0\u2200\0\u2240\0\u0e40\0\u0e80\0\u2280\0\300\0\u22c0\0\u2300"+
    "\0\u0f00\0\u2340\0\u0100\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480"+
    "\0\u24c0\0\u1c80\0\u2500\0\u2540\0\u2580\0\300\0\u25c0\0\u2600"+
    "\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800"+
    "\0\u2840\0\u2880\0\u28c0\0\u0100\0\u2900\0\u2940\0\u23c0\0\u2980"+
    "\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80"+
    "\0\u2ac0\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u2d40"+
    "\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40"+
    "\0\u2f80\0\u2fc0\0\u3000\0\u0100\0\u3040\0\u3080\0\u30c0\0\u3100"+
    "\0\u3140\0\u3180\0\u31c0\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300"+
    "\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500"+
    "\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680\0\u36c0\0\u3700"+
    "\0\u3740\0\300\0\u3780\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0"+
    "\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3500\0\u3a00\0\u35c0\0\u3a40"+
    "\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u3c40"+
    "\0\u3c80";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\5\2\7\1\11"+
    "\1\12\1\4\1\13\1\14\1\15\1\16\1\7\1\4"+
    "\1\17\1\6\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\4\1\46\1\4\1\46\1\45\1\47\1\50\1\40"+
    "\1\51\1\52\1\5\1\53\1\54\1\5\1\55\1\56"+
    "\1\7\1\54\1\40\1\57\1\60\1\46\1\61\11\62"+
    "\1\63\13\62\1\64\5\62\1\65\7\62\1\66\15\62"+
    "\1\67\16\62\11\70\1\71\13\70\1\72\5\70\1\73"+
    "\25\70\1\74\16\70\101\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\16\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\6\0\7\6\2\0"+
    "\1\75\3\6\1\0\1\6\2\0\17\6\4\0\1\6"+
    "\13\0\12\6\5\0\1\77\1\100\1\77\2\7\1\100"+
    "\2\7\2\0\1\77\3\100\1\0\1\7\1\0\2\77"+
    "\1\100\1\101\14\100\4\0\1\100\1\102\3\0\1\76"+
    "\1\77\5\0\10\100\1\7\1\100\5\0\1\77\1\100"+
    "\1\77\2\7\1\100\2\7\2\0\1\77\2\100\1\103"+
    "\1\0\1\7\1\0\2\77\1\100\1\101\14\100\4\0"+
    "\1\104\1\102\3\0\1\76\1\77\5\0\10\100\1\7"+
    "\1\100\5\0\10\105\1\106\1\107\1\110\65\105\1\0"+
    "\1\5\1\6\5\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\1\6\7\5\1\111\6\5\4\0\1\5\4\0"+
    "\1\76\6\0\12\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\7\5\1\112"+
    "\6\5\4\0\1\5\4\0\1\76\6\0\12\5\6\0"+
    "\1\5\1\6\5\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\1\6\3\5\1\113\1\5\1\114\1\115\1\116"+
    "\2\5\1\117\3\5\4\0\1\5\4\0\1\76\6\0"+
    "\11\5\1\120\5\0\11\16\1\121\1\122\3\16\1\123"+
    "\61\16\13\0\1\124\7\0\1\125\1\126\1\0\1\127"+
    "\4\0\1\130\4\0\1\131\1\132\37\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\1\5\1\133\6\5\1\134\3\5\1\135\1\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\3\5\1\136\2\5\1\137\5\5\1\140\1\5\4\0"+
    "\1\141\4\0\1\76\6\0\12\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\15\5\1\142\4\0\1\5\4\0\1\76\6\0\12\5"+
    "\6\0\1\5\1\6\5\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\1\6\2\5\1\135\1\5\1\143\1\144"+
    "\10\5\4\0\1\5\4\0\1\76\6\0\6\5\1\55"+
    "\3\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\1\5\1\145\12\5\1\146"+
    "\1\5\4\0\1\5\4\0\1\76\6\0\12\5\6\0"+
    "\1\5\1\6\5\5\2\0\1\75\2\5\1\147\1\0"+
    "\1\5\2\0\1\6\6\5\1\150\2\5\1\151\2\5"+
    "\1\152\1\5\4\0\1\5\4\0\1\76\6\0\1\5"+
    "\1\153\10\5\6\0\1\5\1\6\5\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\1\6\1\154\6\5\1\155"+
    "\1\5\1\156\2\5\1\157\1\5\4\0\1\5\4\0"+
    "\1\76\6\0\1\5\1\160\10\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\1\161\1\162\1\163\1\0\1\5"+
    "\2\0\1\6\1\5\1\150\1\5\1\164\2\5\1\165"+
    "\1\5\1\166\1\167\4\5\4\0\1\5\4\0\1\76"+
    "\6\0\1\5\1\160\10\5\6\0\1\5\1\6\5\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\1\6\1\140"+
    "\13\5\1\170\1\5\4\0\1\5\4\0\1\76\6\0"+
    "\1\171\11\5\6\0\1\5\1\6\5\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\1\6\1\172\3\5\1\173"+
    "\2\5\1\174\6\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\2\56\1\5\1\56\1\175"+
    "\2\0\1\75\3\5\1\0\1\176\2\0\1\6\1\5"+
    "\1\177\3\5\1\144\6\5\1\155\1\5\4\0\1\5"+
    "\4\0\1\76\6\0\6\5\1\55\1\5\1\175\1\5"+
    "\6\0\1\5\1\6\5\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\1\6\14\5\1\200\1\5\4\0\1\5"+
    "\4\0\1\76\6\0\12\5\6\0\1\5\1\6\5\5"+
    "\2\0\1\75\1\112\2\5\1\0\1\5\2\0\1\6"+
    "\12\5\1\201\3\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\1\202"+
    "\2\5\1\0\1\5\2\0\1\6\1\5\1\203\12\5"+
    "\1\204\1\5\4\0\1\5\4\0\1\76\6\0\12\5"+
    "\46\0\1\36\101\0\1\205\27\0\1\46\77\0\1\46"+
    "\5\0\1\5\1\6\5\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\1\6\5\5\1\206\1\56\7\5\4\0"+
    "\1\5\4\0\1\76\6\0\1\56\11\5\10\0\2\207"+
    "\1\0\2\207\7\0\1\207\51\0\1\207\55\0\1\46"+
    "\23\0\1\46\62\0\1\46\100\0\1\46\13\0\1\46"+
    "\5\0\1\5\1\6\5\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\1\6\3\5\1\210\12\5\4\0\1\5"+
    "\4\0\1\76\6\0\12\5\6\0\1\5\1\6\5\5"+
    "\2\0\1\75\1\211\1\212\1\5\1\0\1\5\2\0"+
    "\1\6\3\5\1\213\6\5\1\214\1\5\1\146\1\5"+
    "\4\0\1\5\4\0\1\76\6\0\12\5\6\0\1\5"+
    "\1\6\5\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\1\6\1\5\1\215\7\5\1\216\4\5\4\0\1\5"+
    "\4\0\1\76\6\0\12\5\6\0\1\5\1\6\5\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\1\6\6\5"+
    "\1\56\7\5\4\0\1\5\4\0\1\76\6\0\1\56"+
    "\11\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\15\5\1\146\4\0\1\5"+
    "\4\0\1\76\6\0\12\5\101\0\1\40\100\0\1\40"+
    "\101\0\1\46\11\62\1\0\13\62\1\0\5\62\1\0"+
    "\7\62\1\0\15\62\1\0\16\62\14\0\1\217\11\0"+
    "\1\220\104\0\1\221\106\0\1\222\51\0\1\223\63\0"+
    "\11\70\1\0\13\70\1\0\5\70\1\0\25\70\1\0"+
    "\16\70\14\0\1\224\11\0\1\225\104\0\1\226\60\0"+
    "\1\227\76\0\1\230\64\0\10\77\2\0\4\77\1\0"+
    "\1\77\1\0\20\77\4\0\1\77\5\0\1\77\5\0"+
    "\12\77\5\0\1\77\1\100\1\77\5\100\2\0\1\77"+
    "\3\100\1\0\1\100\1\0\2\77\16\100\4\0\1\100"+
    "\4\0\1\76\1\77\5\0\12\100\5\0\1\77\1\100"+
    "\1\77\2\231\1\100\2\231\2\0\1\77\3\100\1\0"+
    "\1\231\1\0\2\77\16\100\4\0\1\100\1\0\1\232"+
    "\2\0\1\76\1\77\3\0\1\232\1\0\10\100\1\231"+
    "\1\100\5\0\1\77\1\100\1\77\1\100\1\233\2\100"+
    "\1\233\2\0\1\77\3\100\1\0\1\100\1\0\2\77"+
    "\16\100\4\0\1\100\4\0\1\76\1\77\5\0\12\100"+
    "\5\0\1\77\1\100\1\77\5\234\2\0\1\77\2\100"+
    "\1\234\1\0\1\234\1\0\2\77\3\234\2\100\1\234"+
    "\3\100\1\234\4\100\4\0\1\100\4\0\1\76\1\77"+
    "\5\0\10\100\1\234\1\100\5\0\10\235\1\236\1\0"+
    "\66\235\10\0\1\236\67\0\4\235\1\237\1\235\1\240"+
    "\1\237\1\241\1\0\1\105\1\242\3\105\1\237\5\235"+
    "\1\105\1\235\1\105\5\235\1\105\33\235\1\237\6\235"+
    "\1\0\1\5\1\6\5\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\1\6\1\5\1\135\14\5\4\0\1\5"+
    "\4\0\1\76\6\0\12\5\6\0\1\5\1\6\5\5"+
    "\2\0\1\75\1\5\1\243\1\5\1\0\1\5\2\0"+
    "\1\6\16\5\4\0\1\5\4\0\1\76\6\0\12\5"+
    "\6\0\1\5\1\6\5\5\2\0\1\75\1\5\1\244"+
    "\1\5\1\0\1\5\2\0\1\6\16\5\4\0\1\5"+
    "\4\0\1\76\6\0\12\5\6\0\1\5\1\6\5\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\1\6\6\5"+
    "\1\140\7\5\4\0\1\5\4\0\1\76\6\0\12\5"+
    "\6\0\1\5\1\6\5\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\1\6\1\243\15\5\4\0\1\5\4\0"+
    "\1\76\6\0\12\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\1\5\1\243\1\5\1\0\1\5\2\0\1\6"+
    "\1\5\1\112\14\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\1\5"+
    "\2\245\1\0\1\5\2\0\1\6\1\5\1\246\1\5"+
    "\1\247\1\250\1\245\1\251\1\206\3\5\1\250\1\5"+
    "\1\252\4\0\1\5\4\0\1\76\6\0\1\245\1\253"+
    "\1\5\1\245\6\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\1\5\1\254\1\5\1\0\1\5\2\0\1\6"+
    "\16\5\4\0\1\5\4\0\1\76\6\0\12\5\5\0"+
    "\12\121\1\255\3\121\1\256\65\121\1\16\1\121\3\16"+
    "\1\0\1\16\1\257\4\16\5\121\1\16\1\121\1\16"+
    "\5\121\1\16\33\121\1\16\6\121\27\0\1\260\74\0"+
    "\1\261\102\0\1\262\1\0\1\263\3\0\1\264\67\0"+
    "\1\265\1\0\1\266\104\0\1\267\67\0\1\270\54\0"+
    "\1\5\1\6\5\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\1\6\5\5\1\243\10\5\4\0\1\5\4\0"+
    "\1\76\6\0\12\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\14\5\1\170"+
    "\1\5\4\0\1\5\4\0\1\76\6\0\12\5\6\0"+
    "\1\5\1\6\5\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\1\6\5\5\1\144\10\5\4\0\1\5\4\0"+
    "\1\76\6\0\6\5\1\55\3\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\7\5\1\111\6\5\4\0\1\5\4\0\1\76\6\0"+
    "\1\5\1\160\10\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\12\5\1\243"+
    "\3\5\4\0\1\5\4\0\1\76\6\0\12\5\6\0"+
    "\1\5\1\6\5\5\2\0\1\75\1\5\1\271\1\5"+
    "\1\0\1\5\2\0\1\6\16\5\4\0\1\5\4\0"+
    "\1\76\6\0\12\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\1\202\2\5\1\0\1\5\2\0\1\6\16\5"+
    "\4\0\1\5\4\0\1\76\6\0\12\5\6\0\1\5"+
    "\1\6\5\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\1\6\5\5\1\243\1\272\7\5\4\0\1\5\4\0"+
    "\1\76\6\0\12\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\11\5\1\151"+
    "\4\5\4\0\1\5\4\0\1\76\6\0\12\5\6\0"+
    "\1\5\1\6\5\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\1\6\13\5\1\243\2\5\4\0\1\5\4\0"+
    "\1\76\6\0\12\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\16\5\4\0"+
    "\1\5\4\0\1\76\6\0\1\5\1\243\10\5\6\0"+
    "\1\5\1\6\5\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\1\6\3\5\1\243\6\5\1\243\3\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\1\5\1\243\1\5\1\0\1\5"+
    "\2\0\1\6\3\5\3\243\1\5\1\243\2\5\1\243"+
    "\3\5\4\0\1\5\4\0\1\76\6\0\1\243\2\5"+
    "\2\243\5\5\6\0\1\5\1\6\5\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\1\6\6\5\1\253\7\5"+
    "\4\0\1\5\4\0\1\76\6\0\12\5\6\0\1\5"+
    "\1\6\5\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\1\6\4\5\1\273\10\5\1\243\4\0\1\5\4\0"+
    "\1\76\6\0\12\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\3\5\1\243"+
    "\1\5\1\243\1\5\1\250\6\5\4\0\1\5\4\0"+
    "\1\76\6\0\12\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\1\243\2\5"+
    "\1\243\3\5\1\243\6\5\4\0\1\5\4\0\1\76"+
    "\6\0\12\5\6\0\1\5\1\6\5\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\1\6\6\5\1\243\3\5"+
    "\1\243\3\5\4\0\1\5\4\0\1\76\6\0\12\5"+
    "\6\0\1\5\1\6\5\5\2\0\1\75\1\5\1\243"+
    "\1\5\1\0\1\5\2\0\1\6\5\5\1\243\1\5"+
    "\1\243\6\5\4\0\1\5\4\0\1\76\6\0\12\5"+
    "\6\0\1\5\1\6\5\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\1\6\10\5\1\274\3\5\1\275\1\5"+
    "\4\0\1\5\4\0\1\76\6\0\12\5\6\0\1\5"+
    "\1\6\5\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\1\6\15\5\1\243\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\2\5"+
    "\1\201\1\0\1\5\2\0\1\6\16\5\4\0\1\5"+
    "\4\0\1\76\6\0\12\5\6\0\1\5\1\6\5\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\1\6\1\243"+
    "\6\5\1\243\6\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\3\5\1\276\1\5\1\201"+
    "\4\5\1\277\3\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\16\5\4\0\1\5\4\0"+
    "\1\76\6\0\4\5\1\300\5\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\1\5\1\301\14\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\11\5\1\146\4\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\16\5\4\0\1\5\4\0\1\76\6\0\3\5\1\302"+
    "\6\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\12\5\1\303\3\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\3\5\1\304\12\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\1\243\2\5\1\305\1\5"+
    "\1\243\10\5\4\0\1\5\4\0\1\76\6\0\12\5"+
    "\6\0\1\5\1\6\5\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\1\6\1\201\15\5\4\0\1\5\4\0"+
    "\1\76\6\0\12\5\6\0\1\5\1\6\2\56\1\5"+
    "\2\56\2\0\1\75\3\5\1\0\1\56\2\0\1\6"+
    "\16\5\4\0\1\5\4\0\1\76\6\0\10\5\1\56"+
    "\1\5\6\0\1\5\1\6\1\5\1\56\2\5\1\56"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\1\6\16\5"+
    "\4\0\1\5\4\0\1\76\6\0\12\5\6\0\1\5"+
    "\1\6\5\5\2\0\1\75\1\5\1\306\1\5\1\0"+
    "\1\5\2\0\1\6\16\5\4\0\1\5\4\0\1\76"+
    "\6\0\12\5\6\0\1\5\1\6\5\5\2\0\1\75"+
    "\1\5\1\307\1\5\1\0\1\5\2\0\1\6\16\5"+
    "\4\0\1\5\4\0\1\76\6\0\12\5\6\0\1\5"+
    "\1\6\5\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\1\6\3\5\1\243\12\5\4\0\1\5\4\0\1\76"+
    "\6\0\12\5\6\0\1\5\1\6\5\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\1\6\6\5\1\310\7\5"+
    "\4\0\1\5\4\0\1\76\6\0\12\5\6\0\1\5"+
    "\1\6\5\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\1\6\15\5\1\135\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\16\5\4\0\1\5\4\0"+
    "\1\76\6\0\3\5\1\311\6\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\16\5\4\0\1\5\4\0\1\76\6\0\1\243\11\5"+
    "\5\0\3\77\2\207\1\77\2\207\2\0\4\77\1\0"+
    "\1\207\1\0\3\77\1\312\14\77\4\0\1\77\5\0"+
    "\1\77\5\0\10\77\1\207\1\77\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\13\5\1\313\2\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\7\5\1\206\6\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\12\5\1\314\3\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\4\5\1\135\11\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\13\5\1\135\1\315\1\5\4\0\1\5\4\0\1\76"+
    "\6\0\12\5\6\0\1\5\1\6\5\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\1\6\5\5\1\316\10\5"+
    "\4\0\1\5\4\0\1\76\6\0\12\5\6\0\1\5"+
    "\1\6\5\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\1\6\12\5\1\135\3\5\4\0\1\5\4\0\1\76"+
    "\6\0\12\5\67\0\1\317\46\0\1\320\101\0\1\321"+
    "\60\0\1\322\145\0\1\323\46\0\1\324\101\0\1\325"+
    "\60\0\1\326\66\0\5\327\5\0\1\327\1\0\1\327"+
    "\3\0\3\327\2\0\1\327\3\0\1\327\34\0\1\327"+
    "\6\0\1\77\1\100\1\77\2\231\1\100\2\231\2\0"+
    "\1\77\3\100\1\0\1\231\1\0\2\77\16\100\4\0"+
    "\1\100\4\0\1\76\1\77\5\0\10\100\1\231\1\100"+
    "\10\0\2\330\1\0\2\330\7\0\1\330\51\0\1\330"+
    "\6\0\10\235\1\106\1\0\72\235\1\240\1\235\2\240"+
    "\1\236\1\0\5\235\1\240\51\235\1\240\12\235\1\105"+
    "\1\235\2\105\1\236\1\0\5\235\1\105\51\235\1\105"+
    "\11\235\5\331\1\106\1\0\3\235\1\331\1\235\1\331"+
    "\3\235\3\331\2\235\1\331\3\235\1\331\34\235\1\331"+
    "\6\235\1\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\15\5\1\332\4\0\1\5"+
    "\4\0\1\76\6\0\12\5\6\0\1\5\1\6\5\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\1\6\5\5"+
    "\1\243\1\5\1\243\6\5\4\0\1\5\4\0\1\76"+
    "\6\0\12\5\6\0\1\5\1\6\5\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\1\6\11\5\1\333\4\5"+
    "\4\0\1\5\4\0\1\76\6\0\5\5\1\243\4\5"+
    "\6\0\1\5\1\6\5\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\1\6\2\243\14\5\4\0\1\5\4\0"+
    "\1\76\6\0\12\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\1\5\1\243"+
    "\14\5\4\0\1\5\4\0\1\76\6\0\12\5\6\0"+
    "\1\5\1\6\5\5\2\0\1\75\1\5\1\243\1\5"+
    "\1\0\1\5\2\0\1\6\14\5\1\243\1\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\6\5\1\243\7\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\1\5\1\334\14\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\5\0\11\121\1\0"+
    "\71\121\5\335\2\121\1\255\2\121\1\335\1\256\1\335"+
    "\3\121\3\335\2\121\1\335\3\121\1\335\34\121\1\335"+
    "\6\121\23\0\1\336\101\0\1\337\75\0\1\340\102\0"+
    "\1\341\3\0\1\342\102\0\1\343\65\0\1\336\3\0"+
    "\1\260\100\0\1\344\104\0\1\345\74\0\1\346\46\0"+
    "\1\5\1\6\5\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\1\6\1\5\1\347\14\5\4\0\1\5\4\0"+
    "\1\76\6\0\12\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\3\5\1\350"+
    "\12\5\4\0\1\5\4\0\1\76\6\0\12\5\6\0"+
    "\1\5\1\6\5\5\2\0\1\75\1\5\1\351\1\5"+
    "\1\0\1\5\2\0\1\6\16\5\4\0\1\5\4\0"+
    "\1\76\6\0\12\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\16\5\4\0"+
    "\1\5\4\0\1\76\6\0\1\5\1\135\10\5\6\0"+
    "\1\5\1\6\5\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\1\6\5\5\1\243\1\5\2\243\5\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\1\5\1\352\14\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\1\5\1\146\14\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\1\5\1\353\14\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\1\334\15\5\4\0\1\5"+
    "\4\0\1\76\6\0\12\5\6\0\1\5\1\6\5\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\1\6\6\5"+
    "\1\111\7\5\4\0\1\5\4\0\1\76\6\0\12\5"+
    "\6\0\1\5\1\6\5\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\1\6\10\5\1\243\5\5\4\0\1\5"+
    "\4\0\1\76\6\0\12\5\6\0\1\5\1\6\5\5"+
    "\2\0\1\75\1\347\2\5\1\0\1\5\2\0\1\6"+
    "\3\5\1\243\12\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\14\5\1\135\1\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\7\5\1\354\6\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\5\0\3\77\2\330\1\77\2\330\2\0\4\77"+
    "\1\0\1\330\1\0\20\77\4\0\1\77\1\0\1\232"+
    "\3\0\1\77\3\0\1\232\1\0\10\77\1\330\1\77"+
    "\6\0\1\5\1\6\5\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\1\6\16\5\4\0\1\5\4\0\1\76"+
    "\6\0\1\274\11\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\16\5\4\0"+
    "\1\5\4\0\1\76\6\0\1\5\1\355\10\5\6\0"+
    "\1\5\1\6\5\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\1\6\5\5\1\135\10\5\4\0\1\5\4\0"+
    "\1\76\6\0\12\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\1\5\1\356\1\5\1\0\1\5\2\0\1\6"+
    "\16\5\4\0\1\5\4\0\1\76\6\0\12\5\57\0"+
    "\1\357\51\0\1\317\121\0\1\360\113\0\1\361\67\0"+
    "\1\362\51\0\1\323\121\0\1\363\113\0\1\364\20\0"+
    "\5\365\5\0\1\365\1\0\1\365\3\0\3\365\2\0"+
    "\1\365\3\0\1\365\34\0\1\365\6\0\3\77\2\330"+
    "\1\77\2\330\2\0\4\77\1\0\1\330\1\0\20\77"+
    "\4\0\1\77\5\0\1\77\5\0\10\77\1\330\1\77"+
    "\5\0\3\235\5\366\1\106\1\0\3\235\1\366\1\235"+
    "\1\366\3\235\3\366\2\235\1\366\3\235\1\366\34\235"+
    "\1\366\6\235\1\0\1\5\1\6\5\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\1\6\11\5\1\367\4\5"+
    "\4\0\1\5\4\0\1\76\6\0\12\5\6\0\1\5"+
    "\1\6\5\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\1\6\16\5\4\0\1\5\4\0\1\76\6\0\2\5"+
    "\1\135\7\5\5\0\3\121\5\370\2\121\1\255\2\121"+
    "\1\370\1\256\1\370\3\121\3\370\2\121\1\370\3\121"+
    "\1\370\34\121\1\370\6\121\24\0\1\341\101\0\1\371"+
    "\77\0\1\341\76\0\1\372\76\0\1\372\112\0\1\373"+
    "\71\0\1\374\75\0\1\375\102\0\1\376\46\0\1\5"+
    "\1\6\5\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\1\6\12\5\1\213\3\5\4\0\1\5\4\0\1\76"+
    "\6\0\12\5\6\0\1\5\1\6\5\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\1\6\4\5\1\111\11\5"+
    "\4\0\1\5\4\0\1\76\6\0\12\5\6\0\1\5"+
    "\1\6\5\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\1\6\3\5\1\377\12\5\4\0\1\5\4\0\1\76"+
    "\6\0\12\5\6\0\1\5\1\6\5\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\1\6\14\5\1\u0100\1\5"+
    "\4\0\1\5\4\0\1\76\6\0\12\5\6\0\1\5"+
    "\1\6\5\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\1\6\12\5\1\u0101\3\5\4\0\1\5\4\0\1\76"+
    "\6\0\12\5\6\0\1\5\1\6\5\5\2\0\1\75"+
    "\1\243\2\5\1\0\1\5\2\0\1\6\16\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\12\5\1\u0102\3\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\14\5\1\u0103\1\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\47\0\1\u0104\36\0"+
    "\1\360\1\u0105\5\360\1\u0105\2\0\3\360\1\0\1\360"+
    "\1\0\1\u0105\17\360\1\0\1\360\2\u0105\1\360\2\u0105"+
    "\1\0\10\u0105\12\360\1\u0105\36\0\1\317\17\0\1\357"+
    "\67\0\1\u0106\36\0\1\363\1\u0107\5\363\1\u0107\2\0"+
    "\3\363\1\0\1\363\1\0\1\u0107\17\363\1\0\1\363"+
    "\2\u0107\1\363\2\u0107\1\0\10\u0107\12\363\1\u0107\36\0"+
    "\1\323\17\0\1\362\30\0\5\u0108\5\0\1\u0108\1\0"+
    "\1\u0108\3\0\3\u0108\2\0\1\u0108\3\0\1\u0108\34\0"+
    "\1\u0108\6\0\3\235\5\u0109\1\106\1\0\3\235\1\u0109"+
    "\1\235\1\u0109\3\235\3\u0109\2\235\1\u0109\3\235\1\u0109"+
    "\34\235\1\u0109\6\235\1\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\7\5\1\333"+
    "\6\5\4\0\1\5\4\0\1\76\6\0\12\5\5\0"+
    "\3\121\5\u010a\2\121\1\255\2\121\1\u010a\1\256\1\u010a"+
    "\3\121\3\u010a\2\121\1\u010a\3\121\1\u010a\34\121\1\u010a"+
    "\6\121\27\0\1\342\105\0\1\372\55\0\1\u010b\112\0"+
    "\1\u010c\105\0\1\u010d\44\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\4\5\1\u010e"+
    "\11\5\4\0\1\5\4\0\1\76\6\0\12\5\6\0"+
    "\1\5\1\6\5\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\1\6\2\5\1\274\13\5\4\0\1\5\4\0"+
    "\1\76\6\0\12\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\1\5\1\u010f"+
    "\14\5\4\0\1\5\4\0\1\76\6\0\12\5\6\0"+
    "\1\5\1\6\5\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\1\6\13\5\1\334\2\5\4\0\1\5\4\0"+
    "\1\76\6\0\12\5\6\0\1\5\1\6\5\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\1\6\12\5\1\u0110"+
    "\3\5\4\0\1\5\4\0\1\76\6\0\12\5\47\0"+
    "\1\360\77\0\1\363\40\0\5\6\5\0\1\6\1\0"+
    "\1\6\3\0\3\6\2\0\1\6\3\0\1\6\34\0"+
    "\1\6\6\0\3\235\5\105\1\106\1\0\3\235\1\105"+
    "\1\235\1\105\3\235\3\105\2\235\1\105\3\235\1\105"+
    "\34\235\1\105\6\235\3\121\5\16\2\121\1\255\2\121"+
    "\1\16\1\256\1\16\3\121\3\16\2\121\1\16\3\121"+
    "\1\16\34\121\1\16\6\121\23\0\1\342\103\0\1\u0111"+
    "\106\0\1\342\42\0\1\5\1\6\5\5\2\0\1\75"+
    "\1\111\2\5\1\0\1\5\2\0\1\6\16\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\6\0\1\5\1\6"+
    "\5\5\2\0\1\75\3\5\1\0\1\5\2\0\1\6"+
    "\13\5\1\u0110\2\5\4\0\1\5\4\0\1\76\6\0"+
    "\12\5\6\0\1\5\1\6\5\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\1\6\7\5\1\135\6\5\4\0"+
    "\1\5\4\0\1\76\6\0\12\5\43\0\1\372\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15552];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\5\1\1\11\26\1\1\11\3\1\2\11"+
    "\14\1\1\11\5\1\1\11\3\1\1\0\1\11\3\1"+
    "\1\0\3\1\1\11\1\0\13\1\1\11\7\0\52\1"+
    "\1\11\11\1\3\0\1\11\6\0\1\1\1\0\3\1"+
    "\1\11\17\1\1\11\1\1\5\0\1\1\3\0\26\1"+
    "\11\0\6\1\11\0\10\1\1\0\1\1\2\0\1\1"+
    "\2\0\3\1\1\0\1\11\4\0\5\1\5\0\2\1"+
    "\3\0\3\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AvrRatTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AvrRatTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AvrRatTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { addToken(Token.PREPROCESSOR);
          }
        case 32: break;
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 33: break;
        case 25: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 34: break;
        case 19: 
          { addToken(Token.CPU_INSTRUCTION);
          }
        case 35: break;
        case 14: 
          { addToken(Token.LABEL);
          }
        case 36: break;
        case 20: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 37: break;
        case 10: 
          { addToken(Token.REGISTER);
          }
        case 38: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 39: break;
        case 24: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 40: break;
        case 26: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 41: break;
        case 21: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 42: break;
        case 18: 
          { addToken(Token.RESERVED_WORD);
          }
        case 43: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 44: break;
        case 23: 
          { addToken(Token.LITERAL_NUMBER_BINARY);
          }
        case 45: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 46: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 47: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 48: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 49: break;
        case 29: 
          { addToken(Token.DATA_TYPE);
          }
        case 50: break;
        case 22: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 51: break;
        case 16: 
          { addToken(Token.ERROR_CHAR);
          }
        case 52: break;
        case 17: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 53: break;
        case 31: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 54: break;
        case 30: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 55: break;
        case 28: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 56: break;
        case 15: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 57: break;
        case 8: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 58: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 59: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 60: break;
        case 11: 
          { 
          }
        case 61: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 62: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 274: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 275: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 276: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
