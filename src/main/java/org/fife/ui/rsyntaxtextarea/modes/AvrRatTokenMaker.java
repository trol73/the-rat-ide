/* The following code was generated by JFlex 1.4.1 on 3/7/22, 6:38 PM */

/*
 * Generated on 2/23/22, 1:57 PM
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class AvrRatTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\40\1\11\1\0\1\40\1\20\22\0\1\40\1\52\1\16"+
    "\1\21\1\1\1\56\1\54\1\10\2\53\1\42\1\55\1\50\1\46"+
    "\1\45\1\41\1\4\1\7\1\70\1\17\1\6\1\6\1\71\1\6"+
    "\1\3\1\3\1\61\1\43\1\74\1\73\1\75\1\52\1\51\6\5"+
    "\21\1\1\67\1\67\1\67\1\53\1\12\1\53\1\76\1\2\1\0"+
    "\1\33\1\15\1\27\1\22\1\23\1\24\1\35\1\57\1\25\1\66"+
    "\1\62\1\30\1\37\1\26\1\36\1\60\1\65\1\34\1\31\1\14"+
    "\1\13\1\63\1\32\1\44\1\72\1\64\1\47\1\77\1\47\1\52"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\3\1\4\3\1\1\5\17\1"+
    "\1\6\2\7\1\10\2\1\1\7\1\11\3\7\5\1"+
    "\1\12\3\7\1\13\1\14\5\13\1\15\3\13\1\0"+
    "\2\16\1\0\2\16\1\3\1\17\1\0\1\3\10\1"+
    "\2\5\1\20\7\0\2\1\1\21\5\1\1\22\7\1"+
    "\2\22\5\1\1\22\11\1\1\21\2\12\1\1\1\12"+
    "\1\1\1\22\3\1\1\23\1\1\1\24\7\1\3\0"+
    "\1\25\6\0\1\24\1\0\1\26\1\27\1\3\1\30"+
    "\2\3\1\17\1\3\1\22\11\1\1\5\1\31\1\5"+
    "\5\0\1\32\3\0\3\1\1\33\1\1\2\22\6\1"+
    "\1\22\1\1\2\22\1\1\1\34\2\1\11\0\1\3"+
    "\2\1\1\34\1\5\11\0\5\1\1\22\2\1\1\0"+
    "\1\35\2\0\1\36\2\0\1\3\1\1\1\5\1\0"+
    "\1\32\4\0\5\1\5\0\1\3\1\5\3\0\3\1"+
    "\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\300\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380"+
    "\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580"+
    "\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\300"+
    "\0\u0780\0\u07c0\0\u0800\0\300\0\300\0\u0840\0\u0880\0\u08c0"+
    "\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0100\0\u0a00\0\u0a40\0\u0a80"+
    "\0\u0ac0\0\300\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\300"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u07c0\0\u0dc0"+
    "\0\u0e00\0\u0e40\0\300\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80"+
    "\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\300"+
    "\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u0300\0\u1300"+
    "\0\u1340\0\u0100\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0"+
    "\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0"+
    "\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0"+
    "\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0"+
    "\0\u1400\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80"+
    "\0\u1cc0\0\u1d00\0\300\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40"+
    "\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\300"+
    "\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200"+
    "\0\u0dc0\0\u0e00\0\u2240\0\300\0\u2280\0\u22c0\0\u0e80\0\u2300"+
    "\0\u0100\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\u1c40"+
    "\0\u24c0\0\u2500\0\u2540\0\300\0\u2580\0\u25c0\0\u2600\0\u2640"+
    "\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840"+
    "\0\u2880\0\u0100\0\u28c0\0\u2900\0\u2380\0\u2940\0\u2980\0\u29c0"+
    "\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2a80\0\u2b80"+
    "\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u2d40\0\u2d80"+
    "\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u0100"+
    "\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140"+
    "\0\u3180\0\u31c0\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300\0\u3340"+
    "\0\u3380\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500\0\u3540"+
    "\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680\0\300\0\u36c0\0\u3700"+
    "\0\u3740\0\u3780\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0\0\u3900"+
    "\0\u3440\0\u3940\0\u3500\0\u3980\0\u39c0\0\u3a00\0\u3a40\0\u3a80"+
    "\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\5\2\6\1\10\1\11"+
    "\1\4\1\12\1\13\1\14\1\15\1\6\1\4\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\2\4\1\45"+
    "\1\44\1\46\1\47\1\37\1\50\1\51\1\45\1\5"+
    "\1\52\1\53\1\5\1\54\1\55\2\6\1\53\1\37"+
    "\1\56\1\57\1\45\1\60\11\61\1\62\12\61\1\63"+
    "\5\61\1\64\7\61\1\65\14\61\1\66\20\61\11\67"+
    "\1\70\12\67\1\71\5\67\1\72\24\67\1\73\20\67"+
    "\101\0\7\5\2\0\1\74\3\5\1\0\1\5\2\0"+
    "\16\5\4\0\1\5\12\0\2\5\1\0\11\5\5\0"+
    "\3\75\2\6\1\75\2\6\2\0\4\75\1\0\1\6"+
    "\1\0\2\75\1\76\14\75\4\0\1\75\1\77\3\0"+
    "\1\75\5\0\2\75\1\0\6\75\2\6\1\75\5\0"+
    "\3\75\2\6\1\75\2\6\2\0\3\75\1\100\1\0"+
    "\1\6\1\0\2\75\1\76\14\75\4\0\1\101\1\77"+
    "\3\0\1\75\5\0\2\75\1\0\6\75\2\6\1\75"+
    "\5\0\10\102\1\103\1\104\1\105\65\102\1\0\7\5"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\7\5\1\106"+
    "\6\5\4\0\1\5\12\0\2\5\1\0\11\5\6\0"+
    "\7\5\2\0\1\74\3\5\1\0\1\5\2\0\7\5"+
    "\1\107\6\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\6\0\7\5\2\0\1\74\3\5\1\0\1\5\2\0"+
    "\3\5\1\110\1\5\1\111\1\112\1\113\2\5\1\114"+
    "\3\5\4\0\1\5\12\0\2\5\1\0\10\5\1\115"+
    "\5\0\11\15\1\116\1\117\3\15\1\120\61\15\13\0"+
    "\1\121\6\0\1\122\1\123\1\0\1\124\4\0\1\125"+
    "\4\0\1\126\1\127\40\0\7\5\2\0\1\74\3\5"+
    "\1\0\1\5\2\0\1\5\1\130\6\5\1\131\3\5"+
    "\1\132\1\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\6\0\7\5\2\0\1\74\3\5\1\0\1\5\2\0"+
    "\3\5\1\133\2\5\1\134\5\5\1\135\1\5\4\0"+
    "\1\136\12\0\2\5\1\0\11\5\6\0\7\5\2\0"+
    "\1\74\3\5\1\0\1\5\2\0\15\5\1\137\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\6\0\7\5\2\0"+
    "\1\74\3\5\1\0\1\5\2\0\2\5\1\132\1\5"+
    "\1\140\1\141\10\5\4\0\1\5\12\0\2\5\1\0"+
    "\4\5\1\54\4\5\6\0\7\5\2\0\1\74\3\5"+
    "\1\0\1\5\2\0\1\5\1\142\12\5\1\143\1\5"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\2\5\1\144\1\0\1\5\2\0\6\5"+
    "\1\145\2\5\1\146\2\5\1\147\1\5\4\0\1\5"+
    "\12\0\1\5\1\150\1\0\11\5\6\0\7\5\2\0"+
    "\1\74\3\5\1\0\1\5\2\0\1\151\6\5\1\152"+
    "\1\5\1\153\2\5\1\154\1\5\4\0\1\5\12\0"+
    "\1\5\1\155\1\0\11\5\6\0\7\5\2\0\1\74"+
    "\1\156\1\157\1\160\1\0\1\5\2\0\1\5\1\145"+
    "\1\5\1\161\2\5\1\162\1\5\1\163\1\164\4\5"+
    "\4\0\1\5\12\0\1\5\1\155\1\0\11\5\6\0"+
    "\7\5\2\0\1\74\3\5\1\0\1\5\2\0\1\135"+
    "\13\5\1\165\1\5\4\0\1\5\12\0\1\166\1\5"+
    "\1\0\11\5\6\0\7\5\2\0\1\74\3\5\1\0"+
    "\1\5\2\0\1\167\3\5\1\170\2\5\1\171\6\5"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\2\5"+
    "\2\55\1\5\1\55\1\172\2\0\1\74\3\5\1\0"+
    "\1\173\2\0\1\5\1\174\3\5\1\141\6\5\1\152"+
    "\1\5\4\0\1\5\12\0\2\5\1\0\4\5\1\54"+
    "\1\5\1\175\1\55\1\5\6\0\7\5\2\0\1\74"+
    "\3\5\1\0\1\5\2\0\14\5\1\176\1\5\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\6\0\7\5\2\0"+
    "\1\74\1\107\2\5\1\0\1\5\2\0\12\5\1\177"+
    "\3\5\4\0\1\5\12\0\2\5\1\0\11\5\6\0"+
    "\7\5\2\0\1\74\1\200\2\5\1\0\1\5\2\0"+
    "\1\5\1\201\12\5\1\202\1\5\4\0\1\5\12\0"+
    "\2\5\1\0\11\5\45\0\1\35\101\0\1\203\30\0"+
    "\1\45\77\0\1\45\5\0\7\5\2\0\1\74\3\5"+
    "\1\0\1\5\2\0\5\5\1\204\1\55\7\5\4\0"+
    "\1\5\12\0\1\55\1\5\1\0\11\5\10\0\2\205"+
    "\1\0\2\205\7\0\1\205\50\0\2\205\54\0\1\45"+
    "\24\0\1\45\60\0\1\45\100\0\1\45\15\0\1\45"+
    "\5\0\7\5\2\0\1\74\3\5\1\0\1\5\2\0"+
    "\3\5\1\206\12\5\4\0\1\5\12\0\2\5\1\0"+
    "\11\5\6\0\7\5\2\0\1\74\1\207\1\210\1\5"+
    "\1\0\1\5\2\0\3\5\1\211\6\5\1\212\1\5"+
    "\1\143\1\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\6\0\7\5\2\0\1\74\3\5\1\0\1\5\2\0"+
    "\1\5\1\213\7\5\1\214\4\5\4\0\1\5\12\0"+
    "\2\5\1\0\11\5\6\0\7\5\2\0\1\74\3\5"+
    "\1\0\1\5\2\0\6\5\1\55\7\5\4\0\1\5"+
    "\12\0\1\55\1\5\1\0\11\5\6\0\7\5\2\0"+
    "\1\74\3\5\1\0\1\5\2\0\15\5\1\143\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\101\0\1\37\100\0"+
    "\1\37\101\0\1\45\11\61\1\0\12\61\1\0\5\61"+
    "\1\0\7\61\1\0\14\61\1\0\20\61\14\0\1\215"+
    "\10\0\1\216\104\0\1\217\106\0\1\220\52\0\1\221"+
    "\63\0\11\67\1\0\12\67\1\0\5\67\1\0\24\67"+
    "\1\0\20\67\14\0\1\222\10\0\1\223\104\0\1\224"+
    "\61\0\1\225\76\0\1\226\64\0\10\75\2\0\4\75"+
    "\1\0\1\75\1\0\17\75\4\0\1\75\4\0\1\75"+
    "\5\0\2\75\1\0\11\75\5\0\3\75\2\227\1\75"+
    "\2\227\2\0\4\75\1\0\1\227\1\0\17\75\4\0"+
    "\1\75\1\0\1\230\2\0\1\75\3\0\1\230\1\0"+
    "\2\75\1\0\6\75\2\227\1\75\5\0\4\75\1\231"+
    "\2\75\1\231\2\0\4\75\1\0\1\75\1\0\17\75"+
    "\4\0\1\75\4\0\1\75\5\0\2\75\1\0\11\75"+
    "\5\0\3\75\5\232\2\0\3\75\1\232\1\0\1\232"+
    "\1\0\1\75\3\232\2\75\1\232\3\75\1\232\4\75"+
    "\4\0\1\75\4\0\1\75\5\0\2\75\1\0\6\75"+
    "\2\232\1\75\5\0\10\233\1\234\1\0\66\233\10\0"+
    "\1\234\67\0\4\233\1\235\1\233\1\236\1\235\1\237"+
    "\1\0\1\102\1\240\3\102\1\235\4\233\1\102\1\233"+
    "\1\102\5\233\1\102\33\233\1\235\1\236\6\233\1\0"+
    "\7\5\2\0\1\74\3\5\1\0\1\5\2\0\1\5"+
    "\1\132\14\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\6\0\7\5\2\0\1\74\1\5\1\241\1\5\1\0"+
    "\1\5\2\0\16\5\4\0\1\5\12\0\2\5\1\0"+
    "\11\5\6\0\7\5\2\0\1\74\1\5\1\242\1\5"+
    "\1\0\1\5\2\0\16\5\4\0\1\5\12\0\2\5"+
    "\1\0\11\5\6\0\7\5\2\0\1\74\3\5\1\0"+
    "\1\5\2\0\6\5\1\135\7\5\4\0\1\5\12\0"+
    "\2\5\1\0\11\5\6\0\7\5\2\0\1\74\3\5"+
    "\1\0\1\5\2\0\1\241\15\5\4\0\1\5\12\0"+
    "\2\5\1\0\11\5\6\0\7\5\2\0\1\74\1\5"+
    "\1\241\1\5\1\0\1\5\2\0\1\5\1\107\14\5"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\1\5\2\243\1\0\1\5\2\0\1\5"+
    "\1\244\1\5\1\245\1\246\1\243\1\247\1\204\3\5"+
    "\1\246\1\5\1\250\4\0\1\5\12\0\1\243\1\251"+
    "\1\0\1\5\1\243\7\5\6\0\7\5\2\0\1\74"+
    "\1\5\1\252\1\5\1\0\1\5\2\0\16\5\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\5\0\12\116\1\253"+
    "\3\116\1\254\65\116\1\15\1\116\3\15\1\0\1\15"+
    "\1\255\4\15\4\116\1\15\1\116\1\15\5\116\1\15"+
    "\33\116\2\15\6\116\26\0\1\256\74\0\1\257\102\0"+
    "\1\260\1\0\1\261\3\0\1\262\67\0\1\263\1\0"+
    "\1\264\104\0\1\265\67\0\1\266\55\0\7\5\2\0"+
    "\1\74\3\5\1\0\1\5\2\0\5\5\1\241\10\5"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\14\5\1\165"+
    "\1\5\4\0\1\5\12\0\2\5\1\0\11\5\6\0"+
    "\7\5\2\0\1\74\3\5\1\0\1\5\2\0\5\5"+
    "\1\141\10\5\4\0\1\5\12\0\2\5\1\0\4\5"+
    "\1\54\4\5\6\0\7\5\2\0\1\74\3\5\1\0"+
    "\1\5\2\0\7\5\1\106\6\5\4\0\1\5\12\0"+
    "\1\5\1\155\1\0\11\5\6\0\7\5\2\0\1\74"+
    "\3\5\1\0\1\5\2\0\12\5\1\241\3\5\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\6\0\7\5\2\0"+
    "\1\74\1\5\1\267\1\5\1\0\1\5\2\0\16\5"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\1\200\2\5\1\0\1\5\2\0\16\5"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\5\5\1\241"+
    "\1\270\7\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\6\0\7\5\2\0\1\74\3\5\1\0\1\5\2\0"+
    "\11\5\1\146\4\5\4\0\1\5\12\0\2\5\1\0"+
    "\11\5\6\0\7\5\2\0\1\74\3\5\1\0\1\5"+
    "\2\0\13\5\1\241\2\5\4\0\1\5\12\0\2\5"+
    "\1\0\11\5\6\0\7\5\2\0\1\74\3\5\1\0"+
    "\1\5\2\0\16\5\4\0\1\5\12\0\1\5\1\241"+
    "\1\0\11\5\6\0\7\5\2\0\1\74\3\5\1\0"+
    "\1\5\2\0\3\5\1\241\6\5\1\241\3\5\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\6\0\7\5\2\0"+
    "\1\74\1\5\1\241\1\5\1\0\1\5\2\0\3\5"+
    "\3\241\1\5\1\241\2\5\1\241\3\5\4\0\1\5"+
    "\12\0\1\241\1\5\1\0\1\5\2\241\6\5\6\0"+
    "\7\5\2\0\1\74\3\5\1\0\1\5\2\0\6\5"+
    "\1\251\7\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\6\0\7\5\2\0\1\74\3\5\1\0\1\5\2\0"+
    "\4\5\1\271\10\5\1\241\4\0\1\5\12\0\2\5"+
    "\1\0\11\5\6\0\7\5\2\0\1\74\3\5\1\0"+
    "\1\5\2\0\3\5\1\241\1\5\1\241\1\5\1\246"+
    "\6\5\4\0\1\5\12\0\2\5\1\0\11\5\6\0"+
    "\7\5\2\0\1\74\3\5\1\0\1\5\2\0\1\241"+
    "\2\5\1\241\3\5\1\241\6\5\4\0\1\5\12\0"+
    "\2\5\1\0\11\5\6\0\7\5\2\0\1\74\3\5"+
    "\1\0\1\5\2\0\6\5\1\241\3\5\1\241\3\5"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\1\5\1\241\1\5\1\0\1\5\2\0"+
    "\5\5\1\241\1\5\1\241\6\5\4\0\1\5\12\0"+
    "\2\5\1\0\11\5\6\0\7\5\2\0\1\74\3\5"+
    "\1\0\1\5\2\0\10\5\1\272\3\5\1\273\1\5"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\15\5\1\241"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\2\5\1\177\1\0\1\5\2\0\16\5"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\1\241\6\5"+
    "\1\241\6\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\6\0\7\5\2\0\1\74\3\5\1\0\1\5\2\0"+
    "\3\5\1\274\1\5\1\177\4\5\1\275\3\5\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\6\0\7\5\2\0"+
    "\1\74\3\5\1\0\1\5\2\0\16\5\4\0\1\5"+
    "\12\0\2\5\1\0\2\5\1\276\6\5\6\0\7\5"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\1\5\1\277"+
    "\14\5\4\0\1\5\12\0\2\5\1\0\11\5\6\0"+
    "\7\5\2\0\1\74\3\5\1\0\1\5\2\0\11\5"+
    "\1\143\4\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\6\0\7\5\2\0\1\74\3\5\1\0\1\5\2\0"+
    "\16\5\4\0\1\5\12\0\2\5\1\0\1\5\1\300"+
    "\7\5\6\0\7\5\2\0\1\74\3\5\1\0\1\5"+
    "\2\0\12\5\1\301\3\5\4\0\1\5\12\0\2\5"+
    "\1\0\11\5\6\0\7\5\2\0\1\74\3\5\1\0"+
    "\1\5\2\0\3\5\1\302\12\5\4\0\1\5\12\0"+
    "\2\5\1\0\11\5\6\0\7\5\2\0\1\74\3\5"+
    "\1\0\1\5\2\0\1\241\2\5\1\303\1\5\1\241"+
    "\10\5\4\0\1\5\12\0\2\5\1\0\11\5\6\0"+
    "\7\5\2\0\1\74\3\5\1\0\1\5\2\0\1\177"+
    "\15\5\4\0\1\5\12\0\2\5\1\0\11\5\6\0"+
    "\2\5\2\55\1\5\2\55\2\0\1\74\3\5\1\0"+
    "\1\55\2\0\16\5\4\0\1\5\12\0\2\5\1\0"+
    "\6\5\2\55\1\5\6\0\3\5\1\55\2\5\1\55"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\16\5\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\6\0\7\5\2\0"+
    "\1\74\1\5\1\304\1\5\1\0\1\5\2\0\16\5"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\2\5"+
    "\2\55\1\5\2\55\2\0\1\74\3\5\1\0\1\55"+
    "\2\0\16\5\4\0\1\5\12\0\2\5\1\0\6\5"+
    "\1\55\2\5\6\0\7\5\2\0\1\74\1\5\1\305"+
    "\1\5\1\0\1\5\2\0\16\5\4\0\1\5\12\0"+
    "\2\5\1\0\11\5\6\0\7\5\2\0\1\74\3\5"+
    "\1\0\1\5\2\0\3\5\1\241\12\5\4\0\1\5"+
    "\12\0\2\5\1\0\11\5\6\0\7\5\2\0\1\74"+
    "\3\5\1\0\1\5\2\0\6\5\1\306\7\5\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\6\0\7\5\2\0"+
    "\1\74\3\5\1\0\1\5\2\0\15\5\1\132\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\6\0\7\5\2\0"+
    "\1\74\3\5\1\0\1\5\2\0\16\5\4\0\1\5"+
    "\12\0\2\5\1\0\1\5\1\307\7\5\6\0\7\5"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\16\5\4\0"+
    "\1\5\12\0\1\241\1\5\1\0\11\5\5\0\3\75"+
    "\2\205\1\75\2\205\2\0\4\75\1\0\1\205\1\0"+
    "\2\75\1\76\14\75\4\0\1\75\4\0\1\75\5\0"+
    "\2\75\1\0\6\75\2\205\1\75\6\0\7\5\2\0"+
    "\1\74\3\5\1\0\1\5\2\0\13\5\1\310\2\5"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\7\5\1\204"+
    "\6\5\4\0\1\5\12\0\2\5\1\0\11\5\6\0"+
    "\7\5\2\0\1\74\3\5\1\0\1\5\2\0\12\5"+
    "\1\311\3\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\6\0\7\5\2\0\1\74\3\5\1\0\1\5\2\0"+
    "\4\5\1\132\11\5\4\0\1\5\12\0\2\5\1\0"+
    "\11\5\6\0\7\5\2\0\1\74\3\5\1\0\1\5"+
    "\2\0\13\5\1\132\1\312\1\5\4\0\1\5\12\0"+
    "\2\5\1\0\11\5\6\0\7\5\2\0\1\74\3\5"+
    "\1\0\1\5\2\0\5\5\1\313\10\5\4\0\1\5"+
    "\12\0\2\5\1\0\11\5\6\0\7\5\2\0\1\74"+
    "\3\5\1\0\1\5\2\0\12\5\1\132\3\5\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\65\0\1\314\47\0"+
    "\1\315\101\0\1\316\61\0\1\317\143\0\1\320\47\0"+
    "\1\321\101\0\1\322\61\0\1\323\66\0\5\324\5\0"+
    "\1\324\1\0\1\324\2\0\3\324\2\0\1\324\3\0"+
    "\1\324\34\0\2\324\6\0\3\75\2\227\1\75\2\227"+
    "\2\0\4\75\1\0\1\227\1\0\17\75\4\0\1\75"+
    "\4\0\1\75\5\0\2\75\1\0\6\75\2\227\1\75"+
    "\10\0\2\227\1\0\2\227\7\0\1\227\50\0\2\227"+
    "\6\0\10\233\1\103\1\0\72\233\1\236\1\233\2\236"+
    "\1\234\1\0\5\233\1\236\50\233\2\236\12\233\1\102"+
    "\1\233\2\102\1\234\1\0\5\233\1\102\50\233\2\102"+
    "\11\233\5\325\1\103\1\0\3\233\1\325\1\233\1\325"+
    "\2\233\3\325\2\233\1\325\3\233\1\325\34\233\2\325"+
    "\6\233\1\0\7\5\2\0\1\74\3\5\1\0\1\5"+
    "\2\0\15\5\1\326\4\0\1\5\12\0\2\5\1\0"+
    "\11\5\6\0\7\5\2\0\1\74\3\5\1\0\1\5"+
    "\2\0\5\5\1\241\1\5\1\241\6\5\4\0\1\5"+
    "\12\0\2\5\1\0\11\5\6\0\7\5\2\0\1\74"+
    "\3\5\1\0\1\5\2\0\11\5\1\327\4\5\4\0"+
    "\1\5\12\0\2\5\1\0\3\5\1\241\5\5\6\0"+
    "\7\5\2\0\1\74\3\5\1\0\1\5\2\0\2\241"+
    "\14\5\4\0\1\5\12\0\2\5\1\0\11\5\6\0"+
    "\7\5\2\0\1\74\3\5\1\0\1\5\2\0\1\5"+
    "\1\241\14\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\6\0\7\5\2\0\1\74\1\5\1\241\1\5\1\0"+
    "\1\5\2\0\14\5\1\241\1\5\4\0\1\5\12\0"+
    "\2\5\1\0\11\5\6\0\7\5\2\0\1\74\3\5"+
    "\1\0\1\5\2\0\6\5\1\241\7\5\4\0\1\5"+
    "\12\0\2\5\1\0\11\5\6\0\7\5\2\0\1\74"+
    "\3\5\1\0\1\5\2\0\1\5\1\330\14\5\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\5\0\11\116\1\0"+
    "\71\116\5\331\2\116\1\253\2\116\1\331\1\254\1\331"+
    "\2\116\3\331\2\116\1\331\3\116\1\331\34\116\2\331"+
    "\6\116\22\0\1\332\101\0\1\333\75\0\1\334\102\0"+
    "\1\335\3\0\1\336\102\0\1\337\65\0\1\332\3\0"+
    "\1\256\100\0\1\340\104\0\1\341\74\0\1\342\47\0"+
    "\7\5\2\0\1\74\3\5\1\0\1\5\2\0\1\5"+
    "\1\343\14\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\6\0\7\5\2\0\1\74\3\5\1\0\1\5\2\0"+
    "\3\5\1\344\12\5\4\0\1\5\12\0\2\5\1\0"+
    "\11\5\6\0\7\5\2\0\1\74\1\5\1\345\1\5"+
    "\1\0\1\5\2\0\16\5\4\0\1\5\12\0\2\5"+
    "\1\0\11\5\6\0\7\5\2\0\1\74\3\5\1\0"+
    "\1\5\2\0\16\5\4\0\1\5\12\0\1\5\1\132"+
    "\1\0\11\5\6\0\7\5\2\0\1\74\3\5\1\0"+
    "\1\5\2\0\5\5\1\241\1\5\2\241\5\5\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\6\0\7\5\2\0"+
    "\1\74\3\5\1\0\1\5\2\0\1\5\1\346\14\5"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\1\5\1\143"+
    "\14\5\4\0\1\5\12\0\2\5\1\0\11\5\6\0"+
    "\7\5\2\0\1\74\3\5\1\0\1\5\2\0\1\5"+
    "\1\347\14\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\6\0\7\5\2\0\1\74\3\5\1\0\1\5\2\0"+
    "\1\330\15\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\6\0\7\5\2\0\1\74\3\5\1\0\1\5\2\0"+
    "\6\5\1\106\7\5\4\0\1\5\12\0\2\5\1\0"+
    "\11\5\6\0\7\5\2\0\1\74\3\5\1\0\1\5"+
    "\2\0\10\5\1\241\5\5\4\0\1\5\12\0\2\5"+
    "\1\0\11\5\6\0\7\5\2\0\1\74\1\343\2\5"+
    "\1\0\1\5\2\0\3\5\1\241\12\5\4\0\1\5"+
    "\12\0\2\5\1\0\11\5\6\0\7\5\2\0\1\74"+
    "\3\5\1\0\1\5\2\0\14\5\1\132\1\5\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\6\0\7\5\2\0"+
    "\1\74\3\5\1\0\1\5\2\0\7\5\1\350\6\5"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\16\5\4\0"+
    "\1\5\12\0\1\272\1\5\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\16\5\4\0"+
    "\1\5\12\0\1\5\1\351\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\5\5\1\132"+
    "\10\5\4\0\1\5\12\0\2\5\1\0\11\5\6\0"+
    "\7\5\2\0\1\74\1\5\1\352\1\5\1\0\1\5"+
    "\2\0\16\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\66\0\1\353\41\0\1\314\121\0\1\354\112\0\1\355"+
    "\100\0\1\356\41\0\1\320\121\0\1\357\112\0\1\360"+
    "\22\0\5\361\5\0\1\361\1\0\1\361\2\0\3\361"+
    "\2\0\1\361\3\0\1\361\34\0\2\361\6\0\3\233"+
    "\5\362\1\103\1\0\3\233\1\362\1\233\1\362\2\233"+
    "\3\362\2\233\1\362\3\233\1\362\34\233\2\362\6\233"+
    "\1\0\7\5\2\0\1\74\3\5\1\0\1\5\2\0"+
    "\11\5\1\363\4\5\4\0\1\5\12\0\2\5\1\0"+
    "\11\5\6\0\7\5\2\0\1\74\3\5\1\0\1\5"+
    "\2\0\16\5\4\0\1\5\12\0\2\5\1\0\1\132"+
    "\10\5\5\0\3\116\5\364\2\116\1\253\2\116\1\364"+
    "\1\254\1\364\2\116\3\364\2\116\1\364\3\116\1\364"+
    "\34\116\2\364\6\116\23\0\1\335\101\0\1\365\77\0"+
    "\1\335\76\0\1\366\76\0\1\366\112\0\1\367\71\0"+
    "\1\370\75\0\1\371\102\0\1\372\47\0\7\5\2\0"+
    "\1\74\3\5\1\0\1\5\2\0\12\5\1\211\3\5"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\4\5\1\106"+
    "\11\5\4\0\1\5\12\0\2\5\1\0\11\5\6\0"+
    "\7\5\2\0\1\74\3\5\1\0\1\5\2\0\3\5"+
    "\1\373\12\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\6\0\7\5\2\0\1\74\3\5\1\0\1\5\2\0"+
    "\14\5\1\374\1\5\4\0\1\5\12\0\2\5\1\0"+
    "\11\5\6\0\7\5\2\0\1\74\3\5\1\0\1\5"+
    "\2\0\12\5\1\375\3\5\4\0\1\5\12\0\2\5"+
    "\1\0\11\5\6\0\7\5\2\0\1\74\1\241\2\5"+
    "\1\0\1\5\2\0\16\5\4\0\1\5\12\0\2\5"+
    "\1\0\11\5\6\0\7\5\2\0\1\74\3\5\1\0"+
    "\1\5\2\0\12\5\1\376\3\5\4\0\1\5\12\0"+
    "\2\5\1\0\11\5\6\0\7\5\2\0\1\74\3\5"+
    "\1\0\1\5\2\0\14\5\1\377\1\5\4\0\1\5"+
    "\12\0\2\5\1\0\11\5\46\0\1\u0100\37\0\1\354"+
    "\1\u0101\5\354\1\u0101\2\0\3\354\1\0\1\354\1\0"+
    "\1\u0101\16\354\1\0\1\354\2\u0101\1\354\2\u0101\1\0"+
    "\7\u0101\2\354\1\u0101\11\354\1\u0101\35\0\1\314\27\0"+
    "\1\353\57\0\1\u0102\37\0\1\357\1\u0103\5\357\1\u0103"+
    "\2\0\3\357\1\0\1\357\1\0\1\u0103\16\357\1\0"+
    "\1\357\2\u0103\1\357\2\u0103\1\0\7\u0103\2\357\1\u0103"+
    "\11\357\1\u0103\35\0\1\320\27\0\1\356\21\0\5\u0104"+
    "\5\0\1\u0104\1\0\1\u0104\2\0\3\u0104\2\0\1\u0104"+
    "\3\0\1\u0104\34\0\2\u0104\6\0\3\233\5\u0105\1\103"+
    "\1\0\3\233\1\u0105\1\233\1\u0105\2\233\3\u0105\2\233"+
    "\1\u0105\3\233\1\u0105\34\233\2\u0105\6\233\1\0\7\5"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\7\5\1\327"+
    "\6\5\4\0\1\5\12\0\2\5\1\0\11\5\5\0"+
    "\3\116\5\u0106\2\116\1\253\2\116\1\u0106\1\254\1\u0106"+
    "\2\116\3\u0106\2\116\1\u0106\3\116\1\u0106\34\116\2\u0106"+
    "\6\116\26\0\1\336\105\0\1\366\56\0\1\u0107\111\0"+
    "\1\u0108\105\0\1\u0109\45\0\7\5\2\0\1\74\3\5"+
    "\1\0\1\5\2\0\4\5\1\u010a\11\5\4\0\1\5"+
    "\12\0\2\5\1\0\11\5\6\0\7\5\2\0\1\74"+
    "\3\5\1\0\1\5\2\0\2\5\1\272\13\5\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\6\0\7\5\2\0"+
    "\1\74\3\5\1\0\1\5\2\0\1\5\1\u010b\14\5"+
    "\4\0\1\5\12\0\2\5\1\0\11\5\6\0\7\5"+
    "\2\0\1\74\3\5\1\0\1\5\2\0\13\5\1\330"+
    "\2\5\4\0\1\5\12\0\2\5\1\0\11\5\6\0"+
    "\7\5\2\0\1\74\3\5\1\0\1\5\2\0\12\5"+
    "\1\u010c\3\5\4\0\1\5\12\0\2\5\1\0\11\5"+
    "\46\0\1\354\77\0\1\357\41\0\5\5\5\0\1\5"+
    "\1\0\1\5\2\0\3\5\2\0\1\5\3\0\1\5"+
    "\34\0\2\5\6\0\3\233\5\102\1\103\1\0\3\233"+
    "\1\102\1\233\1\102\2\233\3\102\2\233\1\102\3\233"+
    "\1\102\34\233\2\102\6\233\3\116\5\15\2\116\1\253"+
    "\2\116\1\15\1\254\1\15\2\116\3\15\2\116\1\15"+
    "\3\116\1\15\34\116\2\15\6\116\22\0\1\336\103\0"+
    "\1\u010d\106\0\1\336\43\0\7\5\2\0\1\74\1\106"+
    "\2\5\1\0\1\5\2\0\16\5\4\0\1\5\12\0"+
    "\2\5\1\0\11\5\6\0\7\5\2\0\1\74\3\5"+
    "\1\0\1\5\2\0\13\5\1\u010c\2\5\4\0\1\5"+
    "\12\0\2\5\1\0\11\5\6\0\7\5\2\0\1\74"+
    "\3\5\1\0\1\5\2\0\7\5\1\132\6\5\4\0"+
    "\1\5\12\0\2\5\1\0\11\5\42\0\1\366\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15360];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\26\1\1\11\3\1\2\11"+
    "\14\1\1\11\5\1\1\11\3\1\1\0\2\1\1\0"+
    "\3\1\1\11\1\0\13\1\1\11\7\0\53\1\1\11"+
    "\11\1\3\0\1\11\6\0\1\1\1\0\3\1\1\11"+
    "\17\1\1\11\1\1\5\0\1\1\3\0\25\1\11\0"+
    "\5\1\11\0\10\1\1\0\1\1\2\0\1\1\2\0"+
    "\3\1\1\0\1\11\4\0\5\1\5\0\2\1\3\0"+
    "\3\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AvrRatTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset, boolean hyperlink) {
//System.out.println("+T " + new String(array, start, end-start+1) + " " + start + " " + end + " " + tokenType);
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AvrRatTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AvrRatTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { addToken(Token.PREPROCESSOR);
          }
        case 31: break;
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 32: break;
        case 24: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 33: break;
        case 18: 
          { addToken(Token.CPU_INSTRUCTION);
          }
        case 34: break;
        case 19: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 35: break;
        case 10: 
          { addToken(Token.REGISTER);
          }
        case 36: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 37: break;
        case 23: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 38: break;
        case 25: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 39: break;
        case 20: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 40: break;
        case 17: 
          { addToken(Token.RESERVED_WORD);
          }
        case 41: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 42: break;
        case 22: 
          { addToken(Token.LITERAL_NUMBER_BINARY);
          }
        case 43: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 44: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 45: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 46: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 47: break;
        case 28: 
          { addToken(Token.DATA_TYPE);
          }
        case 48: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 49: break;
        case 15: 
          { addToken(Token.ERROR_CHAR);
          }
        case 50: break;
        case 16: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 51: break;
        case 30: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 52: break;
        case 29: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 53: break;
        case 27: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 54: break;
        case 14: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 55: break;
        case 8: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 56: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 57: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 58: break;
        case 11: 
          { 
          }
        case 59: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 60: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 270: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 271: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 272: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
