/* The following code was generated by JFlex 1.4.1 on 6/1/24, 3:52 PM */

/*
 * Generated on 2/23/22, 1:57 PM
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class AvrRatTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\42\1\11\1\0\1\42\1\20\22\0\1\42\1\54\1\16"+
    "\1\21\1\22\1\60\1\56\1\10\2\55\1\44\1\57\1\52\1\50"+
    "\1\47\1\43\1\4\1\7\1\64\1\17\1\6\1\6\1\6\1\6"+
    "\1\3\1\3\1\53\1\45\1\75\1\74\1\76\1\54\1\23\6\5"+
    "\1\1\1\65\3\1\1\65\13\1\1\63\1\63\1\63\1\55\1\12"+
    "\1\55\1\77\1\2\1\0\1\35\1\15\1\31\1\24\1\25\1\26"+
    "\1\37\1\61\1\27\1\73\1\66\1\32\1\41\1\30\1\40\1\62"+
    "\1\72\1\36\1\33\1\14\1\13\1\67\1\34\1\46\1\70\1\71"+
    "\1\51\1\100\1\51\1\54\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\2\2\1\3\1\4\3\1\1\5\20\1"+
    "\1\6\2\7\1\10\2\1\1\7\1\11\3\7\2\1"+
    "\1\12\3\1\3\7\1\13\1\14\5\13\1\15\3\13"+
    "\1\0\1\16\2\17\1\0\2\17\1\3\1\20\1\0"+
    "\1\3\11\1\2\5\1\21\7\0\5\1\1\22\5\1"+
    "\1\23\7\1\2\23\5\1\1\23\11\1\1\22\3\12"+
    "\2\1\1\23\3\1\1\24\1\25\1\1\1\26\5\1"+
    "\1\0\2\1\3\0\1\27\6\0\1\26\1\0\1\30"+
    "\1\31\1\3\1\32\2\3\1\20\1\3\1\23\12\1"+
    "\1\5\1\33\1\5\5\0\1\34\3\0\7\1\1\35"+
    "\2\1\2\23\7\1\1\23\1\1\2\23\1\1\1\36"+
    "\1\1\1\0\1\12\1\1\11\0\1\3\3\1\1\36"+
    "\1\5\11\0\12\1\1\23\1\1\3\12\1\1\1\0"+
    "\1\37\2\0\1\40\2\0\1\3\2\1\1\5\1\0"+
    "\1\34\4\0\12\1\5\0\1\3\1\1\1\5\3\0"+
    "\5\1\1\0\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\303\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596"+
    "\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e"+
    "\0\303\0\u07df\0\u0820\0\u0861\0\303\0\303\0\u08a2\0\u08e3"+
    "\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb"+
    "\0\u0b2c\0\u0b6d\0\303\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2"+
    "\0\303\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\303\0\u0df7\0\u0e38"+
    "\0\u0820\0\u0e79\0\u0eba\0\u0efb\0\303\0\u0f3c\0\u0f7d\0\u0fbe"+
    "\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6"+
    "\0\u1207\0\u1248\0\303\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d"+
    "\0\u13ce\0\u030c\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u0104"+
    "\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b"+
    "\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923"+
    "\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b"+
    "\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u15d6\0\u1cf2"+
    "\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa"+
    "\0\303\0\303\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080"+
    "\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\303"+
    "\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f"+
    "\0\u0e79\0\u0eba\0\u2490\0\303\0\u24d1\0\u2512\0\u0f3c\0\u2553"+
    "\0\u0104\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a"+
    "\0\u1e37\0\u275b\0\u279c\0\u27dd\0\303\0\u281e\0\u285f\0\u28a0"+
    "\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8"+
    "\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u0104\0\u2c6f"+
    "\0\u2cb0\0\u2cf1\0\u2616\0\u2d32\0\u2d73\0\u2db4\0\u2df5\0\u2e36"+
    "\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2eb8\0\u2fbc\0\u2ffd"+
    "\0\u303e\0\u307f\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205"+
    "\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d"+
    "\0\u344e\0\u0104\0\u348f\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4"+
    "\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc"+
    "\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4"+
    "\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab\0\u3bec"+
    "\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4"+
    "\0\303\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb"+
    "\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3"+
    "\0\u3b6a\0\u4204\0\u3c2d\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349"+
    "\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551"+
    "\0\u4592";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\5\2\6\1\10\1\11"+
    "\1\4\1\12\1\13\1\14\1\15\1\6\1\4\1\16"+
    "\1\17\1\4\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\4\2\46\1\45\1\47\1\50\1\40\1\51\1\52"+
    "\1\53\1\6\2\5\1\54\2\5\1\55\1\56\1\40"+
    "\1\57\1\60\1\46\1\61\11\62\1\63\14\62\1\64"+
    "\5\62\1\65\7\62\1\66\14\62\1\67\17\62\11\70"+
    "\1\71\14\70\1\72\5\70\1\73\24\70\1\74\17\70"+
    "\102\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\76\5\0\13\5\5\0"+
    "\3\77\2\6\1\77\2\6\2\0\4\77\1\0\1\6"+
    "\1\0\4\77\1\100\14\77\4\0\1\77\1\101\11\0"+
    "\3\77\1\6\7\77\5\0\3\77\2\6\1\77\2\6"+
    "\2\0\3\77\1\102\1\0\1\6\1\0\4\77\1\100"+
    "\14\77\4\0\1\103\1\101\11\0\3\77\1\6\7\77"+
    "\5\0\10\104\1\105\1\106\1\107\66\104\1\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\11\5\1\110"+
    "\6\5\4\0\1\5\4\0\1\76\5\0\13\5\6\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\11\5"+
    "\1\111\6\5\4\0\1\5\4\0\1\76\5\0\7\5"+
    "\1\112\3\5\6\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\5\5\1\113\1\5\1\114\1\115\1\116"+
    "\2\5\1\117\3\5\4\0\1\5\4\0\1\76\5\0"+
    "\7\5\1\120\3\5\5\0\11\15\1\121\1\122\3\15"+
    "\1\123\62\15\13\0\1\124\10\0\1\125\1\126\1\0"+
    "\1\127\4\0\1\130\4\0\1\131\1\132\37\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\3\5\1\133"+
    "\3\5\1\134\6\5\1\135\1\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\3\5\1\136\6\5\1\137\3\5"+
    "\1\140\1\5\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\6\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\5\5\1\141\2\5\1\142\5\5\1\143\1\5\4\0"+
    "\1\144\4\0\1\76\5\0\13\5\6\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\17\5\1\145\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\6\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\4\5\1\140\1\5"+
    "\1\146\1\147\10\5\4\0\1\5\4\0\1\76\5\0"+
    "\12\5\1\56\6\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\3\5\1\150\12\5\1\151\1\5\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\6\0\7\5\2\0"+
    "\1\75\2\5\1\152\1\0\1\5\2\0\10\5\1\153"+
    "\2\5\1\154\2\5\1\155\1\5\4\0\1\5\4\0"+
    "\1\76\5\0\1\5\1\156\11\5\6\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\2\5\1\157\6\5"+
    "\1\160\1\5\1\161\2\5\1\162\1\5\4\0\1\5"+
    "\4\0\1\76\5\0\1\5\1\163\11\5\6\0\7\5"+
    "\2\0\1\75\1\164\1\165\1\166\1\0\1\5\2\0"+
    "\3\5\1\153\1\5\1\167\2\5\1\170\1\5\1\171"+
    "\1\172\4\5\4\0\1\5\4\0\1\76\5\0\1\5"+
    "\1\163\11\5\6\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\2\5\1\143\13\5\1\173\1\5\4\0"+
    "\1\5\4\0\1\76\5\0\1\174\12\5\6\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\2\5\1\175"+
    "\3\5\1\176\2\5\1\177\6\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\2\5\2\200\1\5\1\200"+
    "\1\201\2\0\1\75\3\5\1\0\1\202\2\0\3\5"+
    "\1\203\3\5\1\147\6\5\1\160\1\5\4\0\1\5"+
    "\4\0\1\76\5\0\3\5\1\201\6\5\1\56\6\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\16\5"+
    "\1\204\1\5\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\6\0\7\5\2\0\1\75\1\111\2\5\1\0\1\5"+
    "\2\0\14\5\1\205\3\5\4\0\1\5\4\0\1\76"+
    "\5\0\13\5\6\0\7\5\2\0\1\75\1\206\2\5"+
    "\1\0\1\5\2\0\3\5\1\207\12\5\1\210\1\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\47\0\1\36"+
    "\101\0\1\211\1\212\27\0\1\46\100\0\1\46\5\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\7\5"+
    "\1\213\10\5\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\10\0\2\214\1\0\2\214\7\0\1\214\44\0\1\214"+
    "\64\0\1\46\23\0\1\46\62\0\1\46\101\0\1\46"+
    "\14\0\1\46\5\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\5\5\1\215\12\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\1\216"+
    "\1\217\1\5\1\0\1\5\2\0\5\5\1\220\6\5"+
    "\1\221\1\5\1\151\1\5\4\0\1\5\4\0\1\76"+
    "\5\0\13\5\6\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\20\5\4\0\1\5\1\222\3\0\1\76"+
    "\5\0\4\5\1\200\6\5\6\0\7\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\3\5\1\223\7\5\1\224"+
    "\4\5\4\0\1\5\4\0\1\76\5\0\13\5\6\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\12\5"+
    "\1\137\5\5\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\6\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\17\5\1\151\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\102\0\1\40\101\0\1\40\102\0\1\46\11\62\1\0"+
    "\14\62\1\0\5\62\1\0\7\62\1\0\14\62\1\0"+
    "\17\62\14\0\1\225\12\0\1\226\105\0\1\227\107\0"+
    "\1\230\51\0\1\231\64\0\11\70\1\0\14\70\1\0"+
    "\5\70\1\0\24\70\1\0\17\70\14\0\1\232\12\0"+
    "\1\233\105\0\1\234\60\0\1\235\77\0\1\236\65\0"+
    "\10\77\2\0\4\77\1\0\1\77\1\0\21\77\4\0"+
    "\1\77\12\0\13\77\5\0\3\77\2\237\1\77\2\237"+
    "\2\0\4\77\1\0\1\237\1\0\21\77\4\0\1\77"+
    "\1\0\1\240\6\0\1\240\1\0\3\77\1\237\7\77"+
    "\5\0\4\77\1\241\2\77\1\241\2\0\4\77\1\0"+
    "\1\77\1\0\21\77\4\0\1\77\12\0\13\77\5\0"+
    "\3\77\5\242\2\0\3\77\1\242\1\0\1\242\1\0"+
    "\3\77\3\242\2\77\1\242\3\77\1\242\4\77\4\0"+
    "\1\77\12\0\3\77\1\242\7\77\5\0\10\243\1\244"+
    "\1\0\67\243\10\0\1\244\70\0\4\243\1\245\1\243"+
    "\1\246\1\245\1\247\1\0\1\104\1\250\3\104\1\245"+
    "\6\243\1\104\1\243\1\104\5\243\1\104\25\243\1\245"+
    "\14\243\1\0\7\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\3\5\1\140\14\5\4\0\1\5\4\0\1\76"+
    "\5\0\13\5\6\0\7\5\2\0\1\75\1\5\1\251"+
    "\1\5\1\0\1\5\2\0\20\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\4\0\1\76"+
    "\5\0\1\5\1\252\11\5\6\0\7\5\2\0\1\75"+
    "\1\5\1\253\1\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\6\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\10\5\1\143\7\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\6\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\2\5\1\251"+
    "\15\5\4\0\1\5\4\0\1\76\5\0\13\5\6\0"+
    "\7\5\2\0\1\75\1\5\1\251\1\5\1\0\1\5"+
    "\2\0\3\5\1\111\14\5\4\0\1\5\4\0\1\76"+
    "\5\0\13\5\6\0\7\5\2\0\1\75\1\5\2\254"+
    "\1\0\1\5\2\0\3\5\1\255\1\5\1\256\1\257"+
    "\1\254\1\260\1\213\3\5\1\257\1\5\1\261\4\0"+
    "\1\5\4\0\1\76\5\0\1\254\1\262\4\5\1\254"+
    "\4\5\6\0\7\5\2\0\1\75\1\5\1\263\1\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\4\0\1\76"+
    "\5\0\13\5\5\0\12\121\1\264\3\121\1\265\66\121"+
    "\1\15\1\121\3\15\1\0\1\15\1\266\4\15\6\121"+
    "\1\15\1\121\1\15\5\121\1\15\25\121\1\15\14\121"+
    "\30\0\1\267\75\0\1\270\103\0\1\271\1\0\1\272"+
    "\3\0\1\273\70\0\1\274\1\0\1\275\105\0\1\276"+
    "\70\0\1\277\54\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\6\5\1\300\11\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\10\5\1\301\7\5\4\0\1\5"+
    "\4\0\1\76\5\0\13\5\6\0\7\5\2\0\1\75"+
    "\1\302\2\5\1\0\1\5\2\0\14\5\1\303\3\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\6\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\7\5\1\251"+
    "\10\5\4\0\1\5\4\0\1\76\5\0\13\5\6\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\16\5"+
    "\1\173\1\5\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\6\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\7\5\1\147\10\5\4\0\1\5\4\0\1\76\5\0"+
    "\12\5\1\56\6\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\11\5\1\110\6\5\4\0\1\5\4\0"+
    "\1\76\5\0\1\5\1\163\11\5\6\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\14\5\1\251\3\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\6\0\7\5"+
    "\2\0\1\75\1\5\1\304\1\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\76\5\0\13\5\6\0"+
    "\7\5\2\0\1\75\1\206\2\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\76\5\0\13\5\6\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\7\5"+
    "\1\251\1\305\7\5\4\0\1\5\4\0\1\76\5\0"+
    "\13\5\6\0\7\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\13\5\1\154\4\5\4\0\1\5\4\0\1\76"+
    "\5\0\13\5\6\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\15\5\1\251\2\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\4\0\1\76"+
    "\5\0\1\5\1\251\11\5\6\0\7\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\5\5\1\251\6\5\1\251"+
    "\3\5\4\0\1\5\4\0\1\76\5\0\13\5\6\0"+
    "\7\5\2\0\1\75\1\5\1\251\1\5\1\0\1\5"+
    "\2\0\5\5\3\251\1\5\1\251\2\5\1\251\3\5"+
    "\4\0\1\5\4\0\1\76\5\0\1\251\5\5\1\251"+
    "\1\5\1\251\2\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\10\5\1\262\7\5\4\0\1\5"+
    "\4\0\1\76\5\0\13\5\6\0\7\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\6\5\1\306\10\5\1\251"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\6\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\5\5\1\251"+
    "\1\5\1\251\1\5\1\257\6\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\2\5\1\251\2\5\1\251\3\5"+
    "\1\251\6\5\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\6\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\10\5\1\251\3\5\1\251\3\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\1\5"+
    "\1\251\1\5\1\0\1\5\2\0\7\5\1\251\1\5"+
    "\1\251\6\5\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\6\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\12\5\1\307\3\5\1\310\1\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\17\5\1\251\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\2\5"+
    "\1\205\1\0\1\5\2\0\20\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\2\5\1\251\6\5\1\251\2\5"+
    "\1\311\3\5\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\6\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\5\5\1\312\1\5\1\205\4\5\1\313\3\5\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\6\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\15\5\1\314\2\5"+
    "\4\0\1\5\4\0\1\76\5\0\10\5\1\315\2\5"+
    "\6\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\3\5\1\316\14\5\4\0\1\5\4\0\1\76\5\0"+
    "\13\5\6\0\7\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\13\5\1\151\4\5\4\0\1\5\4\0\1\76"+
    "\5\0\13\5\6\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\20\5\4\0\1\5\4\0\1\76\5\0"+
    "\6\5\1\317\4\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\14\5\1\320\3\5\4\0\1\5"+
    "\4\0\1\76\5\0\13\5\6\0\7\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\5\5\1\321\12\5\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\6\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\2\5\1\251\2\5"+
    "\1\322\1\5\1\251\10\5\4\0\1\5\4\0\1\76"+
    "\5\0\13\5\6\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\2\5\1\205\15\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\1\222\3\0"+
    "\1\76\5\0\13\5\6\0\2\5\2\200\1\5\2\200"+
    "\2\0\1\75\3\5\1\0\1\200\2\0\20\5\4\0"+
    "\1\5\1\222\3\0\1\76\5\0\3\5\1\200\7\5"+
    "\6\0\3\5\1\200\2\5\1\200\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\1\222\3\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\1\5"+
    "\1\323\1\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\4\0\1\76\5\0\13\5\6\0\7\5\2\0\1\75"+
    "\1\5\1\324\1\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\6\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\5\5\1\251\12\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\6\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\10\5\1\325"+
    "\7\5\4\0\1\5\4\0\1\76\5\0\13\5\6\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\17\5"+
    "\1\140\4\0\1\5\4\0\1\76\5\0\13\5\6\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\20\5"+
    "\4\0\1\5\4\0\1\76\5\0\6\5\1\326\4\5"+
    "\6\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\76\5\0\1\251\12\5"+
    "\5\0\3\77\2\214\1\77\2\214\2\0\4\77\1\0"+
    "\1\214\1\0\4\77\1\100\14\77\4\0\1\77\12\0"+
    "\3\77\1\214\7\77\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\15\5\1\327\2\5\4\0\1\5"+
    "\4\0\1\76\5\0\13\5\6\0\7\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\11\5\1\213\6\5\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\6\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\14\5\1\330\3\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\6\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\6\5\1\140"+
    "\11\5\4\0\1\5\4\0\1\76\5\0\13\5\6\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\15\5"+
    "\1\140\1\331\1\5\4\0\1\5\4\0\1\76\5\0"+
    "\13\5\43\0\1\332\24\0\1\333\16\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\7\5\1\334\10\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\6\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\14\5\1\140"+
    "\3\5\4\0\1\5\4\0\1\76\5\0\13\5\67\0"+
    "\1\335\50\0\1\336\102\0\1\337\60\0\1\340\146\0"+
    "\1\341\50\0\1\342\102\0\1\343\60\0\1\344\67\0"+
    "\5\345\5\0\1\345\1\0\1\345\4\0\3\345\2\0"+
    "\1\345\3\0\1\345\26\0\1\345\14\0\3\77\2\237"+
    "\1\77\2\237\2\0\4\77\1\0\1\237\1\0\21\77"+
    "\4\0\1\77\12\0\3\77\1\237\7\77\10\0\2\237"+
    "\1\0\2\237\7\0\1\237\44\0\1\237\14\0\10\243"+
    "\1\105\1\0\73\243\1\246\1\243\2\246\1\244\1\0"+
    "\5\243\1\246\44\243\1\246\20\243\1\104\1\243\2\104"+
    "\1\244\1\0\5\243\1\104\44\243\1\104\17\243\5\346"+
    "\1\105\1\0\3\243\1\346\1\243\1\346\4\243\3\346"+
    "\2\243\1\346\3\243\1\346\26\243\1\346\14\243\1\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\3\5"+
    "\1\347\14\5\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\6\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\17\5\1\350\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\6\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\7\5\1\251\1\5\1\251\6\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\13\5\1\351\4\5\4\0\1\5"+
    "\4\0\1\76\5\0\11\5\1\251\1\5\6\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\2\5\2\251"+
    "\14\5\4\0\1\5\4\0\1\76\5\0\13\5\6\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\3\5"+
    "\1\251\14\5\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\6\0\7\5\2\0\1\75\1\5\1\251\1\5\1\0"+
    "\1\5\2\0\16\5\1\251\1\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\10\5\1\251\7\5\4\0\1\5"+
    "\4\0\1\76\5\0\13\5\6\0\7\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\3\5\1\352\14\5\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\5\0\11\121\1\0"+
    "\72\121\5\353\2\121\1\264\2\121\1\353\1\265\1\353"+
    "\4\121\3\353\2\121\1\353\3\121\1\353\26\121\1\353"+
    "\14\121\24\0\1\354\102\0\1\355\76\0\1\356\103\0"+
    "\1\357\3\0\1\360\103\0\1\361\66\0\1\354\3\0"+
    "\1\267\101\0\1\362\105\0\1\363\75\0\1\364\46\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\7\5"+
    "\1\365\10\5\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\6\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\3\5\1\366\14\5\4\0\1\5\4\0\1\76\5\0"+
    "\13\5\6\0\7\5\2\0\1\75\1\5\1\367\1\5"+
    "\1\0\1\5\2\0\20\5\4\0\1\5\4\0\1\76"+
    "\5\0\13\5\6\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\15\5\1\140\2\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\3\5\1\370\14\5\4\0\1\5"+
    "\4\0\1\76\5\0\13\5\6\0\7\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\5\5\1\371\12\5\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\6\0\7\5\2\0"+
    "\1\75\1\5\1\372\1\5\1\0\1\5\2\0\20\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\6\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\4\0\1\76\5\0\1\5\1\140\11\5\6\0"+
    "\7\5\2\0\1\75\1\373\2\5\1\0\1\5\2\0"+
    "\20\5\4\0\1\5\4\0\1\76\5\0\13\5\6\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\7\5"+
    "\1\251\1\5\2\251\5\5\4\0\1\5\4\0\1\76"+
    "\5\0\13\5\6\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\6\5\1\374\11\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\3\5\1\375\14\5\4\0\1\5"+
    "\4\0\1\76\5\0\13\5\6\0\7\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\3\5\1\151\14\5\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\6\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\3\5\1\376\14\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\6\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\2\5\1\352"+
    "\15\5\4\0\1\5\4\0\1\76\5\0\13\5\6\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\10\5"+
    "\1\110\7\5\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\6\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\12\5\1\251\5\5\4\0\1\5\4\0\1\76\5\0"+
    "\13\5\6\0\7\5\2\0\1\75\1\370\2\5\1\0"+
    "\1\5\2\0\5\5\1\251\12\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\16\5\1\140\1\5\4\0\1\5"+
    "\4\0\1\76\5\0\13\5\6\0\7\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\11\5\1\377\6\5\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\6\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\4\0\1\76\5\0\1\307\12\5\6\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\4\0\1\76\5\0\1\5\1\u0100\11\5\6\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\7\5\1\140"+
    "\10\5\4\0\1\5\4\0\1\76\5\0\13\5\10\0"+
    "\2\u0101\1\0\1\u0101\1\u0102\7\0\1\u0103\44\0\1\u0102"+
    "\63\0\1\222\15\0\1\u0101\14\0\7\5\2\0\1\75"+
    "\1\5\1\u0104\1\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\60\0\1\u0105\52\0"+
    "\1\335\122\0\1\u0106\113\0\1\u0107\71\0\1\u0108\52\0"+
    "\1\341\122\0\1\u0109\113\0\1\u010a\21\0\5\u010b\5\0"+
    "\1\u010b\1\0\1\u010b\4\0\3\u010b\2\0\1\u010b\3\0"+
    "\1\u010b\26\0\1\u010b\14\0\3\243\5\u010c\1\105\1\0"+
    "\3\243\1\u010c\1\243\1\u010c\4\243\3\u010c\2\243\1\u010c"+
    "\3\243\1\u010c\26\243\1\u010c\14\243\1\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\2\5\1\u010d\15\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\6\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\13\5\1\u010e"+
    "\4\5\4\0\1\5\4\0\1\76\5\0\13\5\6\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\20\5"+
    "\4\0\1\5\4\0\1\76\5\0\5\5\1\140\5\5"+
    "\5\0\3\121\5\u010f\2\121\1\264\2\121\1\u010f\1\265"+
    "\1\u010f\4\121\3\u010f\2\121\1\u010f\3\121\1\u010f\26\121"+
    "\1\u010f\14\121\25\0\1\357\102\0\1\u0110\100\0\1\357"+
    "\77\0\1\u0111\77\0\1\u0111\113\0\1\u0112\72\0\1\u0113"+
    "\76\0\1\u0114\103\0\1\u0115\46\0\7\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\16\5\1\u0116\1\5\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\6\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\13\5\1\u0117\4\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\6\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\20\5\4\0"+
    "\1\5\4\0\1\76\5\0\1\5\1\u0118\11\5\6\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\14\5"+
    "\1\220\3\5\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\6\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\6\5\1\110\11\5\4\0\1\5\4\0\1\76\5\0"+
    "\13\5\6\0\7\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\5\5\1\u0119\12\5\4\0\1\5\4\0\1\76"+
    "\5\0\13\5\6\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\7\5\1\u011a\10\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\3\5\1\u011b\14\5\4\0\1\5"+
    "\4\0\1\76\5\0\13\5\6\0\7\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\16\5\1\u011c\1\5\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\6\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\14\5\1\u011d\3\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\6\0\7\5"+
    "\2\0\1\75\1\251\2\5\1\0\1\5\2\0\20\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\6\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\14\5\1\u011e"+
    "\3\5\4\0\1\5\4\0\1\76\5\0\13\5\54\0"+
    "\1\222\34\0\2\u0101\1\0\2\u0101\7\0\1\u0101\27\0"+
    "\1\222\14\0\1\u0101\20\0\1\u0101\2\0\1\u0101\37\0"+
    "\1\222\32\0\7\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\16\5\1\u011f\1\5\4\0\1\5\4\0\1\76"+
    "\5\0\13\5\50\0\1\u0120\36\0\1\u0106\1\u0121\5\u0106"+
    "\1\u0121\2\0\3\u0106\1\0\1\u0106\1\0\1\u0121\1\u0106"+
    "\1\u0121\16\u0106\1\0\1\u0106\2\u0121\1\u0106\2\u0121\1\0"+
    "\7\u0121\13\u0106\1\u0121\37\0\1\335\17\0\1\u0105\70\0"+
    "\1\u0122\36\0\1\u0109\1\u0123\5\u0109\1\u0123\2\0\3\u0109"+
    "\1\0\1\u0109\1\0\1\u0123\1\u0109\1\u0123\16\u0109\1\0"+
    "\1\u0109\2\u0123\1\u0109\2\u0123\1\0\7\u0123\13\u0109\1\u0123"+
    "\37\0\1\341\17\0\1\u0108\30\0\5\u0124\5\0\1\u0124"+
    "\1\0\1\u0124\4\0\3\u0124\2\0\1\u0124\3\0\1\u0124"+
    "\26\0\1\u0124\14\0\3\243\5\u0125\1\105\1\0\3\243"+
    "\1\u0125\1\243\1\u0125\4\243\3\u0125\2\243\1\u0125\3\243"+
    "\1\u0125\26\243\1\u0125\14\243\1\0\7\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\3\5\1\u0126\14\5\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\6\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\11\5\1\351\6\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\5\0\3\121"+
    "\5\u0127\2\121\1\264\2\121\1\u0127\1\265\1\u0127\4\121"+
    "\3\u0127\2\121\1\u0127\3\121\1\u0127\26\121\1\u0127\14\121"+
    "\30\0\1\360\106\0\1\u0111\55\0\1\u0128\114\0\1\u0129"+
    "\106\0\1\u012a\44\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\2\5\1\u012b\15\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\6\0\7\5\2\0\1\75\3\5"+
    "\1\0\1\5\2\0\6\5\1\u012c\11\5\4\0\1\5"+
    "\4\0\1\76\5\0\13\5\6\0\7\5\2\0\1\75"+
    "\1\u011a\2\5\1\0\1\5\2\0\20\5\4\0\1\5"+
    "\4\0\1\76\5\0\13\5\6\0\7\5\2\0\1\75"+
    "\3\5\1\0\1\5\2\0\6\5\1\u012d\11\5\4\0"+
    "\1\5\4\0\1\76\5\0\13\5\6\0\7\5\2\0"+
    "\1\75\1\5\1\140\1\5\1\0\1\5\2\0\20\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\6\0\7\5"+
    "\2\0\1\75\3\5\1\0\1\5\2\0\2\5\1\307"+
    "\15\5\4\0\1\5\4\0\1\76\5\0\13\5\6\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\4\5"+
    "\1\307\13\5\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\6\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\3\5\1\u012e\14\5\4\0\1\5\4\0\1\76\5\0"+
    "\13\5\6\0\7\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\15\5\1\352\2\5\4\0\1\5\4\0\1\76"+
    "\5\0\13\5\6\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\14\5\1\u012f\3\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\50\0\1\u0106\100\0\1\u0109\40\0"+
    "\5\5\5\0\1\5\1\0\1\5\4\0\3\5\2\0"+
    "\1\5\3\0\1\5\26\0\1\5\14\0\3\243\5\104"+
    "\1\105\1\0\3\243\1\104\1\243\1\104\4\243\3\104"+
    "\2\243\1\104\3\243\1\104\26\243\1\104\14\243\1\0"+
    "\7\5\2\0\1\75\3\5\1\0\1\5\2\0\4\5"+
    "\1\140\13\5\4\0\1\5\4\0\1\76\5\0\13\5"+
    "\5\0\3\121\5\15\2\121\1\264\2\121\1\15\1\265"+
    "\1\15\4\121\3\15\2\121\1\15\3\121\1\15\26\121"+
    "\1\15\14\121\24\0\1\360\104\0\1\u0130\107\0\1\360"+
    "\42\0\7\5\2\0\1\75\3\5\1\0\1\5\2\0"+
    "\5\5\1\u0131\12\5\4\0\1\5\4\0\1\76\5\0"+
    "\13\5\6\0\7\5\2\0\1\75\1\310\2\5\1\0"+
    "\1\5\2\0\20\5\4\0\1\5\4\0\1\76\5\0"+
    "\13\5\6\0\7\5\2\0\1\75\1\110\2\5\1\0"+
    "\1\5\2\0\20\5\4\0\1\5\4\0\1\76\5\0"+
    "\13\5\6\0\7\5\2\0\1\75\3\5\1\0\1\5"+
    "\2\0\15\5\1\u012f\2\5\4\0\1\5\4\0\1\76"+
    "\5\0\13\5\6\0\7\5\2\0\1\75\3\5\1\0"+
    "\1\5\2\0\11\5\1\140\6\5\4\0\1\5\4\0"+
    "\1\76\5\0\13\5\44\0\1\u0111\42\0\7\5\2\0"+
    "\1\75\3\5\1\0\1\5\2\0\6\5\1\303\11\5"+
    "\4\0\1\5\4\0\1\76\5\0\13\5\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17875];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\27\1\1\11\3\1\2\11"+
    "\14\1\1\11\5\1\1\11\3\1\1\0\1\11\2\1"+
    "\1\0\3\1\1\11\1\0\14\1\1\11\7\0\56\1"+
    "\2\11\7\1\1\0\2\1\3\0\1\11\6\0\1\1"+
    "\1\0\3\1\1\11\20\1\1\11\1\1\5\0\1\1"+
    "\3\0\32\1\1\0\2\1\11\0\6\1\11\0\20\1"+
    "\1\0\1\1\2\0\1\1\2\0\4\1\1\0\1\11"+
    "\4\0\12\1\5\0\3\1\3\0\5\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public AvrRatTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

			/* No documentation comments */
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AvrRatTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AvrRatTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 28: 
          { addToken(Token.PREPROCESSOR);
          }
        case 33: break;
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 34: break;
        case 26: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 35: break;
        case 19: 
          { addToken(Token.CPU_INSTRUCTION);
          }
        case 36: break;
        case 14: 
          { addToken(Token.LABEL);
          }
        case 37: break;
        case 21: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 38: break;
        case 10: 
          { addToken(Token.REGISTER);
          }
        case 39: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 40: break;
        case 25: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 41: break;
        case 27: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 42: break;
        case 22: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 43: break;
        case 18: 
          { addToken(Token.RESERVED_WORD);
          }
        case 44: break;
        case 9: 
          { addToken(Token.SEPARATOR);
          }
        case 45: break;
        case 24: 
          { addToken(Token.LITERAL_NUMBER_BINARY);
          }
        case 46: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 47: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 48: break;
        case 20: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 49: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 50: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 51: break;
        case 30: 
          { addToken(Token.DATA_TYPE);
          }
        case 52: break;
        case 23: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 53: break;
        case 16: 
          { addToken(Token.ERROR_CHAR);
          }
        case 54: break;
        case 17: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 55: break;
        case 32: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 56: break;
        case 31: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 57: break;
        case 29: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 58: break;
        case 15: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 59: break;
        case 8: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 60: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 61: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 62: break;
        case 11: 
          { 
          }
        case 63: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 64: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 306: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 307: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 308: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
