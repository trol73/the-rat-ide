/* The following code was generated by JFlex 1.4.1 on 3/22/22, 6:56 PM */

/*
 * 19/10/2015
 *
 * AssemblerAvrTokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing Atmel AVR assembler.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class takes plain text and returns tokens representing AVR
 * assembler.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>AssemblerAvrTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Oleg Trifonov
 * @version 0.1
 *
 */

public class AssemblerAvrTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\20\1\0\1\21\23\0\1\21\1\24\1\13\1\64"+
    "\1\12\1\11\1\24\1\14\2\22\1\17\1\25\1\23\1\25\1\40"+
    "\1\16\1\5\1\4\1\62\1\63\1\2\1\2\1\2\1\2\1\60"+
    "\1\2\1\36\1\15\1\42\1\24\1\43\2\22\1\3\1\7\1\45"+
    "\1\50\1\35\1\32\1\46\1\26\1\33\1\1\1\61\1\34\1\52"+
    "\1\51\1\54\1\30\1\55\1\53\1\31\1\27\1\56\1\57\1\37"+
    "\1\6\1\44\1\47\1\23\1\0\1\23\1\41\1\10\1\0\1\3"+
    "\1\7\1\45\1\50\1\35\1\66\1\46\1\65\1\33\1\1\1\61"+
    "\1\34\1\52\1\51\1\54\1\30\1\55\1\53\1\31\1\27\1\56"+
    "\1\57\1\67\1\6\1\44\1\47\1\0\1\41\1\0\1\24\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\1\1\2\3\1\1\3\1\4"+
    "\1\5\1\6\1\3\1\7\1\10\22\1\1\11\2\12"+
    "\1\13\7\12\1\14\6\12\1\1\1\15\14\1\1\16"+
    "\1\17\1\20\1\21\4\1\1\22\1\23\7\1\1\22"+
    "\3\1\1\22\1\1\15\0\2\1\1\22\4\1\1\23"+
    "\1\1\1\23\1\1\1\23\1\22\2\0\1\24\4\12"+
    "\4\0\4\12\4\0\1\22\1\1\1\25\1\26\7\1"+
    "\1\11\2\22\4\1\2\0\1\27\13\0\1\30\7\0"+
    "\2\22\1\1\1\0\4\12\4\0\4\12\4\0\3\1"+
    "\1\0\1\27\16\0\1\22\1\1\1\0\3\12\1\31"+
    "\2\0\3\12\1\32\2\0\1\1\1\0\1\27\1\0"+
    "\1\27\2\0\1\27\6\0\1\12\2\0\1\12\2\0"+
    "\1\1\11\0\1\1\4\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\33\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\340\0\u02a0\0\u02d8\0\u0310"+
    "\0\u0348\0\340\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658"+
    "\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818"+
    "\0\340\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0"+
    "\0\340\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28"+
    "\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0"+
    "\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\340\0\340\0\340"+
    "\0\340\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50"+
    "\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110"+
    "\0\u0f18\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458"+
    "\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618"+
    "\0\u05e8\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u0770\0\u1768"+
    "\0\340\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0"+
    "\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0"+
    "\0\u1ae8\0\u05e8\0\u1b20\0\u0c40\0\u0c78\0\u1b58\0\u1b90\0\u1bc8"+
    "\0\u1c00\0\u1c38\0\u1730\0\u1c70\0\u05e8\0\u1ca8\0\u1570\0\u1ce0"+
    "\0\u1d18\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060"+
    "\0\u2098\0\340\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8"+
    "\0\u2220\0\u1b20\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370"+
    "\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530"+
    "\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0"+
    "\0\u2728\0\340\0\u2760\0\u2798\0\u27d0\0\u2808\0\u2840\0\u2878"+
    "\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38"+
    "\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8"+
    "\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8"+
    "\0\u2df0\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78"+
    "\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u2bc0\0\u3100"+
    "\0\u3138\0\u2d10\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288"+
    "\0\u32c0\0\u32f8\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448"+
    "\0\u3480\0\u34b8\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608"+
    "\0\340\0\u3640";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\7\1\11\1\12\1\13"+
    "\1\14\1\15\1\5\1\16\1\17\1\20\1\21\1\15"+
    "\1\22\1\23\2\5\2\15\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\5\1\34\1\35\3\15"+
    "\1\36\1\37\2\36\1\40\1\41\1\42\1\43\1\44"+
    "\3\36\1\7\1\36\2\7\1\45\1\24\1\30\1\34"+
    "\1\5\1\6\1\7\1\10\1\7\1\11\1\12\1\13"+
    "\1\14\1\46\1\5\1\16\1\17\1\20\1\21\1\15"+
    "\1\22\1\23\2\5\2\15\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\5\1\34\1\35\3\15"+
    "\1\36\1\37\2\36\1\40\1\41\1\42\1\43\1\44"+
    "\3\36\1\7\1\36\2\7\1\45\1\24\1\30\1\34"+
    "\17\47\1\50\1\51\5\47\1\52\3\47\1\53\4\47"+
    "\1\54\25\47\1\55\1\56\1\57\20\60\1\61\5\60"+
    "\1\62\3\60\1\63\4\60\1\64\25\60\1\65\1\66"+
    "\1\67\70\0\1\70\10\36\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\10\36\1\71\1\36\1\0\3\70"+
    "\6\36\1\72\11\36\1\70\3\36\1\70\1\36\1\7"+
    "\1\36\2\7\3\36\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\10\36\1\71\1\36\1\0\3\70\14\36"+
    "\1\7\1\36\2\7\1\70\3\36\1\70\10\36\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\3\36\1\73"+
    "\4\36\1\71\1\36\1\0\3\70\4\36\1\74\1\75"+
    "\12\36\1\70\3\36\1\70\1\36\1\7\1\36\2\7"+
    "\1\76\1\77\1\36\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\10\36\1\71\1\36\1\0\3\70\14\36"+
    "\1\7\1\36\2\7\1\70\3\36\1\70\10\36\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\36\1\71"+
    "\1\36\1\0\3\70\1\36\1\100\16\36\1\70\3\36"+
    "\1\70\10\36\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\3\36\1\101\2\36\1\102\1\36\1\71\1\36"+
    "\1\0\3\70\1\36\1\103\5\36\1\104\10\36\1\70"+
    "\3\36\1\70\10\36\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\3\36\1\105\4\36\1\71\1\36\1\0"+
    "\3\70\20\36\1\70\3\36\13\16\1\106\54\16\14\17"+
    "\1\107\53\17\20\20\1\0\47\20\16\0\1\110\1\111"+
    "\71\0\1\23\46\0\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\5\36\1\112\2\36\1\71"+
    "\1\36\1\0\3\70\20\36\1\70\3\36\1\70\10\36"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\3\36"+
    "\1\113\4\36\1\71\1\36\1\0\3\70\20\36\1\70"+
    "\3\36\1\70\10\36\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\10\36\1\71\1\36\1\0\3\70\10\36"+
    "\1\72\1\36\1\114\5\36\1\70\3\36\1\70\6\36"+
    "\1\115\1\36\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\1\36\1\116\1\117\3\36\1\120\1\121\1\71"+
    "\1\122\1\0\3\70\7\36\1\123\2\36\1\124\5\36"+
    "\1\70\2\36\1\122\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\10\36\1\71\1\36\1\0"+
    "\3\70\6\36\1\125\11\36\1\70\3\36\1\70\1\6"+
    "\7\36\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\10\36\1\71\1\36\1\0\3\70\1\36\1\126\3\36"+
    "\1\127\12\36\1\70\3\36\1\70\2\36\1\130\5\36"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\2\36"+
    "\1\131\1\132\4\36\1\71\1\36\1\0\3\70\4\36"+
    "\1\133\3\36\1\112\7\36\1\70\3\36\1\70\10\36"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\5\36"+
    "\1\134\2\36\1\71\1\36\1\0\3\70\10\36\1\73"+
    "\7\36\1\70\3\36\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\10\36\1\71\1\36\1\0"+
    "\3\70\4\36\1\73\13\36\1\70\3\36\7\0\1\135"+
    "\21\0\1\136\1\0\1\137\1\140\1\141\1\0\1\142"+
    "\5\0\1\143\1\144\1\0\1\145\1\146\1\147\1\0"+
    "\1\150\1\0\1\151\10\0\1\142\1\70\10\36\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\36\1\71"+
    "\1\36\1\0\3\70\20\36\1\70\3\36\1\70\2\36"+
    "\1\152\3\36\1\153\1\36\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\2\36\1\154\3\36\1\121\1\36"+
    "\1\71\1\36\1\0\3\70\10\36\1\131\7\36\1\70"+
    "\3\36\1\70\10\36\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\7\36\1\155\1\71\1\36\1\0\3\70"+
    "\20\36\1\70\3\36\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\7\36\1\156\1\71\1\36"+
    "\1\0\3\70\10\36\1\72\7\36\1\70\3\36\1\70"+
    "\10\36\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\10\36\1\71\1\36\1\0\3\70\10\36\1\157\1\36"+
    "\1\160\5\36\1\70\3\36\1\70\1\6\1\161\1\162"+
    "\1\163\1\161\3\36\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\7\36\1\164\1\71\1\36\1\0\3\70"+
    "\1\36\1\126\6\36\1\132\3\36\1\161\1\36\1\163"+
    "\1\165\1\70\3\36\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\10\36\1\71\1\36\1\0"+
    "\3\70\7\36\1\166\2\36\1\113\5\36\1\70\3\36"+
    "\21\0\1\167\11\0\1\170\35\0\10\46\15\0\10\46"+
    "\1\0\1\46\4\0\20\46\1\0\3\46\17\47\2\0"+
    "\44\47\21\0\1\171\51\0\17\47\2\0\6\47\1\172"+
    "\35\47\3\0\17\47\2\0\6\47\1\173\3\47\1\174"+
    "\31\47\3\0\17\47\2\0\16\47\1\175\25\47\2\0"+
    "\1\176\27\0\1\177\67\0\1\200\3\0\1\201\73\0"+
    "\1\176\27\0\1\176\20\60\1\0\44\60\3\0\20\60"+
    "\1\0\6\60\1\202\35\60\3\0\20\60\1\0\6\60"+
    "\1\203\3\60\1\204\31\60\3\0\20\60\1\0\16\60"+
    "\1\205\25\60\2\0\1\206\27\0\1\207\67\0\1\210"+
    "\3\0\1\211\73\0\1\206\27\0\1\206\11\70\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\12\70\1\0"+
    "\30\70\10\36\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\2\36\1\212\5\36\1\71\1\36\1\0\3\70"+
    "\20\36\1\70\3\36\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\10\36\1\71\1\36\1\0"+
    "\3\70\7\36\1\212\10\36\1\70\3\36\1\70\10\36"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\5\36"+
    "\1\213\2\36\1\71\1\36\1\0\3\70\1\36\1\212"+
    "\2\36\1\212\13\36\1\70\3\36\1\70\10\36\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\36\1\71"+
    "\1\36\1\0\3\70\4\36\1\166\13\36\1\70\3\36"+
    "\1\70\1\36\4\214\1\36\1\214\1\36\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\4\36\1\214\2\36"+
    "\1\214\1\71\1\36\1\0\3\70\1\36\1\214\2\36"+
    "\1\214\7\36\1\214\1\36\2\214\1\70\1\36\1\214"+
    "\1\36\1\70\3\36\2\215\3\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\10\36\1\71\1\36\1\0"+
    "\3\70\20\36\1\70\3\36\1\70\10\36\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\1\212\7\36\1\71"+
    "\1\36\1\0\3\70\20\36\1\70\1\212\2\36\1\70"+
    "\10\36\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\1\36\1\212\5\36\1\113\1\71\1\36\1\0\3\70"+
    "\20\36\1\70\3\36\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\10\36\1\71\1\36\1\0"+
    "\3\70\4\36\1\212\13\36\1\70\3\36\1\70\10\36"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\6\36"+
    "\1\73\1\36\1\71\1\36\1\0\3\70\20\36\1\70"+
    "\3\36\1\70\6\36\1\155\1\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\2\155\1\216\1\100\1\36"+
    "\1\217\1\220\1\221\1\71\1\36\1\0\3\70\1\36"+
    "\1\155\1\222\2\36\1\222\1\223\4\36\1\155\4\36"+
    "\1\70\1\155\2\36\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\4\36\1\224\3\36\1\71"+
    "\1\36\1\0\3\70\20\36\1\70\1\36\1\224\1\36"+
    "\1\70\10\36\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\10\36\1\71\1\36\1\0\3\70\14\36\1\225"+
    "\3\36\1\70\3\36\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\1\36\1\212\6\36\1\71"+
    "\1\36\1\0\3\70\20\36\1\70\3\36\1\70\10\36"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\3\36"+
    "\1\100\4\36\1\71\1\36\1\0\3\70\20\36\1\70"+
    "\3\36\1\70\10\36\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\5\36\1\226\2\36\1\71\1\36\1\0"+
    "\3\70\1\36\1\166\5\36\1\227\10\36\1\70\3\36"+
    "\1\70\2\36\1\230\5\36\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\3\36\1\212\4\36\1\71\1\36"+
    "\1\0\3\70\4\36\1\212\13\36\1\70\3\36\1\70"+
    "\10\36\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\10\36\1\71\1\36\1\0\3\70\6\36\1\212\11\36"+
    "\1\70\3\36\1\70\10\36\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\7\36\1\231\1\71\1\36\1\0"+
    "\3\70\20\36\1\70\3\36\1\70\10\36\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\2\212\1\36\1\212"+
    "\1\36\1\212\2\36\1\71\1\36\1\0\3\70\1\36"+
    "\1\212\1\36\1\212\1\36\1\212\1\36\1\212\3\36"+
    "\1\212\4\36\1\70\1\212\2\36\1\70\2\36\1\72"+
    "\5\36\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\10\36\1\71\1\36\1\0\3\70\20\36\1\70\3\36"+
    "\1\70\10\36\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\7\36\1\232\1\71\1\36\1\0\3\70\20\36"+
    "\1\70\3\36\1\70\6\36\1\166\1\36\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\10\36\1\71\1\36"+
    "\1\0\3\70\20\36\1\70\3\36\1\70\10\36\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\36\1\71"+
    "\1\36\1\0\3\70\12\36\1\160\5\36\1\70\3\36"+
    "\1\70\2\36\1\152\5\36\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\10\36\1\71\1\36\1\0\3\70"+
    "\20\36\1\70\3\36\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\10\36\1\71\1\36\1\0"+
    "\3\70\1\36\1\212\16\36\1\70\3\36\1\70\10\36"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\1\36"+
    "\1\212\1\36\1\212\4\36\1\71\1\36\1\0\3\70"+
    "\1\36\1\212\16\36\1\70\3\36\1\70\10\36\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\6\36\1\212"+
    "\1\36\1\71\1\36\1\0\3\70\7\36\1\212\10\36"+
    "\1\70\3\36\1\70\10\36\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\3\36\1\212\1\36\1\212\2\36"+
    "\1\71\1\36\1\0\3\70\4\36\1\212\13\36\1\70"+
    "\3\36\1\70\1\6\7\36\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\10\36\1\71\1\36\1\0\3\70"+
    "\1\36\1\126\3\36\1\233\12\36\1\70\3\36\44\0"+
    "\1\234\60\0\1\235\64\0\1\236\16\0\1\237\14\0"+
    "\1\236\34\0\1\240\42\0\1\241\22\0\1\242\2\0"+
    "\1\243\14\0\1\244\1\0\1\245\1\0\1\246\15\0"+
    "\1\247\115\0\1\250\72\0\1\251\42\0\1\252\21\0"+
    "\1\242\3\0\1\253\1\0\1\252\10\0\1\252\4\0"+
    "\1\252\11\0\1\252\54\0\1\254\16\0\1\255\31\0"+
    "\1\256\105\0\1\257\3\0\1\260\61\0\1\261\16\0"+
    "\1\70\10\36\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\6\36\1\216\1\36\1\71\1\36\1\0\3\70"+
    "\20\36\1\70\3\36\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\5\36\1\212\2\36\1\71"+
    "\1\36\1\0\3\70\7\36\1\212\10\36\1\70\3\36"+
    "\1\70\10\36\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\3\36\1\222\1\36\1\212\2\36\1\71\1\36"+
    "\1\0\3\70\1\36\1\212\16\36\1\70\3\36\1\70"+
    "\10\36\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\3\36\1\212\4\36\1\71\1\36\1\0\3\70\1\36"+
    "\1\212\16\36\1\70\3\36\1\70\10\36\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\10\36\1\71\1\36"+
    "\1\0\3\70\2\36\1\212\15\36\1\70\3\36\1\70"+
    "\10\36\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\10\36\1\71\1\36\1\0\3\70\13\36\1\262\4\36"+
    "\1\70\3\36\1\70\10\36\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\6\36\1\263\1\36\1\71\1\36"+
    "\1\0\3\70\20\36\1\70\3\36\1\70\10\36\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\36\1\71"+
    "\1\36\1\0\3\70\6\36\1\264\11\36\1\70\3\36"+
    "\1\70\1\36\1\161\1\36\2\161\3\36\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\10\36\1\71\1\36"+
    "\1\0\3\70\14\36\1\161\1\36\2\161\1\70\3\36"+
    "\1\70\10\36\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\1\36\1\166\6\36\1\71\1\36\1\0\3\70"+
    "\20\36\1\70\3\36\1\70\3\36\2\161\3\36\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\36\1\71"+
    "\1\36\1\0\3\70\16\36\1\161\1\36\1\70\3\36"+
    "\1\70\10\36\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\5\36\1\212\2\36\1\71\1\36\1\0\3\70"+
    "\20\36\1\70\3\36\51\0\1\265\16\0\17\47\2\0"+
    "\6\47\1\266\35\47\3\0\17\47\2\0\7\47\1\267"+
    "\34\47\3\0\17\47\2\0\13\47\1\270\30\47\3\0"+
    "\17\47\2\0\16\47\1\271\25\47\2\0\1\272\37\0"+
    "\1\272\27\0\1\272\27\0\1\273\70\0\1\274\73\0"+
    "\1\275\33\0\20\60\1\0\6\60\1\276\35\60\3\0"+
    "\20\60\1\0\7\60\1\277\34\60\3\0\20\60\1\0"+
    "\13\60\1\300\30\60\3\0\20\60\1\0\16\60\1\301"+
    "\25\60\2\0\1\302\37\0\1\302\27\0\1\302\27\0"+
    "\1\303\70\0\1\304\73\0\1\305\33\0\1\70\10\36"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\10\36"+
    "\1\71\1\212\1\0\3\70\20\36\1\70\2\36\1\212"+
    "\1\70\10\36\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\6\36\1\212\1\36\1\71\1\36\1\0\3\70"+
    "\20\36\1\70\3\36\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\7\36\1\212\1\71\1\36"+
    "\1\0\3\70\4\36\1\212\13\36\1\70\3\36\1\70"+
    "\10\36\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\1\36\1\212\6\36\1\71\1\36\1\0\3\70\10\36"+
    "\1\212\7\36\1\70\3\36\1\70\2\36\1\306\5\36"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\10\36"+
    "\1\71\1\36\1\0\3\70\11\36\1\212\6\36\1\70"+
    "\3\36\1\70\10\36\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\7\36\1\212\1\71\1\36\1\0\3\70"+
    "\20\36\1\70\3\36\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\10\36\1\71\1\36\1\0"+
    "\3\70\7\36\1\307\10\36\1\70\3\36\1\70\10\36"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\3\36"+
    "\1\212\4\36\1\71\1\212\1\0\3\70\1\36\1\212"+
    "\16\36\1\70\2\36\1\212\1\70\10\36\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\10\36\1\71\1\36"+
    "\1\0\3\70\1\36\1\310\16\36\1\70\3\36\1\70"+
    "\10\36\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\7\36\1\72\1\71\1\36\1\0\3\70\20\36\1\70"+
    "\3\36\1\70\10\36\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\10\36\1\71\1\36\1\0\3\70\2\36"+
    "\1\161\15\36\1\70\3\36\1\70\10\36\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\10\36\1\71\1\36"+
    "\1\0\3\70\4\36\1\161\13\36\1\70\3\36\27\0"+
    "\1\311\67\0\1\312\110\0\1\313\1\261\63\0\1\314"+
    "\53\0\1\315\65\0\1\316\3\0\1\235\71\0\1\257"+
    "\63\0\1\311\1\0\1\253\104\0\1\317\72\0\1\320"+
    "\72\0\1\312\64\0\1\321\51\0\1\322\106\0\1\323"+
    "\45\0\1\312\33\0\1\312\35\0\1\324\17\0\1\325"+
    "\60\0\1\326\53\0\1\327\104\0\1\312\56\0\1\330"+
    "\102\0\1\313\17\0\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\3\36\1\331\4\36\1\71"+
    "\1\36\1\0\3\70\20\36\1\70\3\36\1\70\10\36"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\2\36"+
    "\1\332\5\36\1\71\1\36\1\0\3\70\20\36\1\70"+
    "\3\36\45\0\1\333\22\0\17\47\2\0\7\47\1\334"+
    "\34\47\3\0\17\47\2\0\15\47\1\335\26\47\3\0"+
    "\17\47\2\0\14\47\1\267\27\47\3\0\17\47\2\0"+
    "\17\47\1\336\24\47\43\0\1\337\57\0\1\340\75\0"+
    "\1\341\66\0\1\274\32\0\20\60\1\0\7\60\1\342"+
    "\34\60\3\0\20\60\1\0\15\60\1\343\26\60\3\0"+
    "\20\60\1\0\14\60\1\277\27\60\3\0\20\60\1\0"+
    "\17\60\1\344\24\60\43\0\1\345\57\0\1\346\75\0"+
    "\1\347\66\0\1\304\32\0\1\70\10\36\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\10\36\1\71\1\36"+
    "\1\0\3\70\15\36\1\212\2\36\1\70\3\36\1\70"+
    "\7\36\1\350\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\10\36\1\71\1\36\1\0\3\70\20\36\1\70"+
    "\3\36\1\70\10\36\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\10\36\1\71\1\36\1\0\3\70\15\36"+
    "\1\161\2\36\1\70\3\36\35\0\1\312\67\0\1\253"+
    "\66\0\1\351\62\0\1\352\75\0\1\353\65\0\1\253"+
    "\16\0\1\354\71\0\1\355\64\0\1\356\64\0\1\357"+
    "\30\0\1\360\113\0\1\361\113\0\1\260\63\0\1\362"+
    "\45\0\1\363\111\0\1\364\14\0\1\70\10\36\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\36\1\71"+
    "\1\36\1\0\3\70\12\36\1\212\5\36\1\70\3\36"+
    "\1\70\5\36\1\161\2\36\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\10\36\1\71\1\36\1\0\3\70"+
    "\1\161\2\36\2\161\13\36\1\70\3\36\34\0\1\365"+
    "\33\0\17\47\2\0\10\47\1\267\4\47\1\335\26\47"+
    "\3\0\16\47\1\366\2\0\44\47\3\0\1\47\12\336"+
    "\1\47\3\336\1\367\1\0\1\47\17\336\3\47\21\336"+
    "\3\337\1\0\10\337\1\367\1\337\1\0\2\367\1\337"+
    "\1\367\2\0\4\367\10\337\1\367\1\337\1\367\3\0"+
    "\20\337\1\367\3\337\31\0\1\274\4\0\1\341\47\0"+
    "\1\370\51\0\20\60\1\0\10\60\1\277\4\60\1\343"+
    "\26\60\3\0\16\60\1\371\1\60\1\0\44\60\3\0"+
    "\1\60\12\344\1\60\4\344\1\0\1\60\17\344\3\60"+
    "\21\344\3\345\1\0\10\345\1\372\1\345\1\0\2\372"+
    "\1\345\1\372\2\0\4\372\10\345\1\372\1\345\1\372"+
    "\3\0\20\345\1\372\3\345\31\0\1\304\4\0\1\347"+
    "\47\0\1\373\51\0\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\5\36\1\374\2\36\1\71"+
    "\1\36\1\0\3\70\20\36\1\70\3\36\56\0\1\375"+
    "\63\0\1\376\70\0\1\377\17\0\1\255\137\0\1\312"+
    "\47\0\1\u0100\65\0\1\u0101\41\0\1\u0102\115\0\1\235"+
    "\112\0\1\312\16\0\1\u0103\120\0\1\u0104\111\0\1\u0105"+
    "\11\0\16\47\1\336\2\0\44\47\21\0\1\337\51\0"+
    "\16\60\1\344\1\60\1\0\44\60\21\0\1\345\51\0"+
    "\1\70\10\36\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\10\36\1\71\1\36\1\0\3\70\10\36\1\u0106"+
    "\7\36\1\70\3\36\50\0\1\311\22\0\1\u0107\135\0"+
    "\1\312\67\0\1\257\51\0\1\u0108\70\0\1\312\101\0"+
    "\1\311\24\0\1\u0109\134\0\1\u010a\17\0\1\70\7\36"+
    "\1\u010b\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\10\36\1\71\1\36\1\0\3\70\20\36\1\70\3\36"+
    "\45\0\1\312\71\0\1\311\50\0\1\312\74\0\1\u010c"+
    "\32\0\1\70\2\36\1\u010d\5\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\10\36\1\71\1\36\1\0"+
    "\3\70\20\36\1\70\3\36\21\0\1\u010c\20\0\1\u010e"+
    "\25\0\1\70\10\36\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\10\36\1\71\1\36\1\0\3\70\4\36"+
    "\1\u010f\13\36\1\70\3\36\1\0\1\u0110\1\0\1\u0110"+
    "\2\0\3\u0110\5\0\1\u010e\7\0\10\u0110\1\0\1\u0110"+
    "\1\u010e\2\0\1\u0111\14\u0110\1\0\1\u0110\3\0\3\u0110"+
    "\1\70\10\36\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\10\36\1\71\1\36\1\0\3\70\4\36\1\u0112"+
    "\13\36\1\70\3\36\1\0\10\u0110\1\0\1\u0110\3\0"+
    "\1\u010e\7\0\10\u0110\1\0\1\u0110\1\u010e\2\0\1\u0111"+
    "\20\u0110\1\0\3\u0110\1\70\10\36\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\10\36\1\71\1\36\1\0"+
    "\3\70\7\36\1\225\10\36\1\70\3\36";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13944];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\7\1\1\11\4\1\1\11\26\1\1\11"+
    "\7\1\1\11\24\1\4\11\23\1\15\0\15\1\2\0"+
    "\1\11\4\1\4\0\4\1\4\0\22\1\2\0\1\1"+
    "\13\0\1\11\7\0\3\1\1\0\4\1\4\0\4\1"+
    "\4\0\3\1\1\0\1\11\16\0\2\1\1\0\4\1"+
    "\2\0\4\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\6\0\1\1\2\0\1\1\2\0\1\1"+
    "\11\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[274];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  We must have this here as JFLex does not generate a
	 * no parameter constructor.
	 */
	public AssemblerAvrTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}

      /**
       * Adds the token specified to the current linked list of tokens.
       *
       * @param tokenType The token's type.
       * @see #addToken(int, int, int)
       */
      private void addHyperlinkToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so, true);
      }

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}

	


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AssemblerAvrTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AssemblerAvrTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { addToken(Token.PREPROCESSOR);
          }
        case 28: break;
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 29: break;
        case 15: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 30: break;
        case 18: 
          { addToken(Token.CPU_INSTRUCTION);
          }
        case 31: break;
        case 20: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 32: break;
        case 13: 
          { addToken(Token.LABEL);
          }
        case 33: break;
        case 19: 
          { addToken(Token.REGISTER);
          }
        case 34: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 35: break;
        case 8: 
          { addToken(Token.WHITESPACE);
          }
        case 36: break;
        case 21: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 37: break;
        case 5: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 38: break;
        case 23: 
          { addToken(Token.RESERVED_WORD);
          }
        case 39: break;
        case 22: 
          { addToken(Token.LITERAL_NUMBER_BINARY);
          }
        case 40: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 41: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 42: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 43: break;
        case 9: 
          { addToken(Token.FUNCTION);
          }
        case 44: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 45: break;
        case 24: 
          { addToken(Token.DATA_TYPE);
          }
        case 46: break;
        case 14: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 47: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 48: break;
        case 25: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 49: break;
        case 6: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 50: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 51: break;
        case 3: 
          { addToken(Token.OPERATOR);
          }
        case 52: break;
        case 10: 
          { 
          }
        case 53: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 275: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 276: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 277: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
