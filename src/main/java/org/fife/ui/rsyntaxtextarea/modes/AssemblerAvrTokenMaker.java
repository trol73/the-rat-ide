/* The following code was generated by JFlex 1.4.1 on 3/25/22, 1:12 PM */

/*
 * 19/10/2015
 *
 * AssemblerAvrTokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing Atmel AVR assembler.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class takes plain text and returns tokens representing AVR
 * assembler.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>AssemblerAvrTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Oleg Trifonov
 * @version 0.1
 *
 */

public class AssemblerAvrTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\20\1\0\1\21\23\0\1\21\1\24\1\13\1\65"+
    "\1\12\1\11\1\24\1\14\2\22\1\17\1\25\1\23\1\25\1\40"+
    "\1\16\1\5\1\4\1\63\1\64\1\2\1\2\1\2\1\2\1\61"+
    "\1\2\1\36\1\15\1\43\1\24\1\44\1\22\1\41\1\3\1\7"+
    "\1\46\1\51\1\35\1\32\1\47\1\26\1\33\1\1\1\62\1\34"+
    "\1\53\1\52\1\55\1\30\1\56\1\54\1\31\1\27\1\57\1\60"+
    "\1\37\1\6\1\45\1\50\1\23\1\0\1\23\1\42\1\10\1\0"+
    "\1\3\1\7\1\46\1\51\1\35\1\67\1\47\1\66\1\33\1\1"+
    "\1\62\1\34\1\53\1\52\1\55\1\30\1\56\1\54\1\31\1\27"+
    "\1\57\1\60\1\70\1\6\1\45\1\50\1\0\1\42\1\0\1\24"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\1\1\2\3\1\1\3\1\4"+
    "\1\5\1\6\1\3\1\7\1\10\22\1\1\11\2\12"+
    "\1\13\7\12\1\14\6\12\16\1\1\15\1\16\1\17"+
    "\1\20\4\1\1\21\1\22\10\1\1\21\3\1\1\21"+
    "\1\1\15\0\2\1\1\21\4\1\1\22\1\1\1\22"+
    "\1\1\1\22\1\21\2\0\1\23\4\12\4\0\4\12"+
    "\4\0\1\24\1\21\1\1\1\25\1\26\7\1\1\11"+
    "\2\21\4\1\2\0\1\27\13\0\1\30\7\0\2\21"+
    "\1\1\1\0\4\12\4\0\4\12\4\0\3\1\1\0"+
    "\1\27\16\0\1\21\1\1\1\0\3\12\1\31\2\0"+
    "\3\12\1\32\2\0\1\1\1\0\1\27\1\0\1\27"+
    "\2\0\1\27\6\0\1\12\2\0\1\12\2\0\1\1"+
    "\11\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\33\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\344\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\344\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u083d"+
    "\0\344\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc"+
    "\0\344\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\344\0\344\0\344"+
    "\0\344\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf"+
    "\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197"+
    "\0\u11d0\0\u0f96\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6"+
    "\0\u16ef\0\u0b94\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u0792"+
    "\0\u1845\0\344\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b"+
    "\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63"+
    "\0\u1b9c\0\u1bd5\0\u0b5b\0\u0b94\0\u1c0e\0\u0cb1\0\u0cea\0\u1c47"+
    "\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u180c\0\u1d64\0\u0b94\0\u1d9d"+
    "\0\u1644\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c"+
    "\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4"+
    "\0\u212d\0\u2166\0\u219f\0\344\0\u21d8\0\u2211\0\u224a\0\u2283"+
    "\0\u22bc\0\u22f5\0\u232e\0\u1c0e\0\u2367\0\u23a0\0\u23d9\0\u2412"+
    "\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da"+
    "\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2"+
    "\0\u27db\0\u2814\0\u284d\0\344\0\u2886\0\u28bf\0\u28f8\0\u2931"+
    "\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9"+
    "\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1"+
    "\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89"+
    "\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051"+
    "\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219"+
    "\0\u2cfa\0\u3252\0\u328b\0\u2e50\0\u32c4\0\u32fd\0\u3336\0\u336f"+
    "\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c\0\u34c5\0\u34fe\0\u3537"+
    "\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6\0\u36ff"+
    "\0\u3738\0\u3771\0\344\0\u37aa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\7\1\11\1\12\1\13"+
    "\1\14\1\15\1\5\1\16\1\17\1\20\1\21\1\15"+
    "\1\22\1\23\2\5\2\15\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\5\1\34\1\35\1\5"+
    "\3\15\1\36\1\37\2\36\1\40\1\41\1\42\1\43"+
    "\1\44\3\36\1\7\1\36\2\7\1\45\1\24\1\30"+
    "\1\34\1\5\1\6\1\7\1\10\1\7\1\11\1\12"+
    "\1\13\1\14\1\46\1\5\1\16\1\17\1\20\1\21"+
    "\1\15\1\22\1\23\2\5\2\15\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\5\1\34\1\35"+
    "\1\5\3\15\1\36\1\37\2\36\1\40\1\41\1\42"+
    "\1\43\1\44\3\36\1\7\1\36\2\7\1\45\1\24"+
    "\1\30\1\34\17\47\1\50\1\51\5\47\1\52\3\47"+
    "\1\53\4\47\1\54\26\47\1\55\1\56\1\57\20\60"+
    "\1\61\5\60\1\62\3\60\1\63\4\60\1\64\26\60"+
    "\1\65\1\66\1\67\71\0\1\70\10\71\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\10\71\1\70\1\71"+
    "\1\0\1\71\3\70\6\71\1\72\11\71\1\70\3\71"+
    "\2\70\1\7\1\70\2\7\3\70\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\12\70\1\0\20\70\1\7"+
    "\1\70\2\7\5\70\10\71\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\3\71\1\73\4\71\1\70\1\71"+
    "\1\0\1\71\3\70\4\71\1\74\1\75\12\71\1\70"+
    "\3\71\2\70\1\7\1\70\2\7\1\76\1\77\1\70"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\12\70"+
    "\1\0\20\70\1\7\1\70\2\7\5\70\10\71\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\71\1\70"+
    "\1\71\1\0\1\71\3\70\1\71\1\100\16\71\1\70"+
    "\3\71\1\70\10\71\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\3\71\1\101\2\71\1\102\1\71\1\70"+
    "\1\71\1\0\1\71\3\70\1\71\1\103\5\71\1\104"+
    "\10\71\1\70\3\71\1\70\10\71\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\3\71\1\105\4\71\1\70"+
    "\1\71\1\0\1\71\3\70\20\71\1\70\3\71\13\16"+
    "\1\106\55\16\14\17\1\107\54\17\20\20\1\0\50\20"+
    "\16\0\1\110\1\111\72\0\1\23\47\0\1\70\10\71"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\5\71"+
    "\1\112\2\71\1\70\1\71\1\0\1\71\3\70\20\71"+
    "\1\70\3\71\1\70\10\71\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\3\71\1\113\4\71\1\70\1\71"+
    "\1\0\1\71\3\70\20\71\1\70\3\71\1\70\10\71"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\10\71"+
    "\1\70\1\71\1\0\1\71\3\70\10\71\1\72\1\71"+
    "\1\114\5\71\1\70\3\71\1\70\6\71\1\115\1\71"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\1\71"+
    "\1\116\1\117\3\71\1\120\1\121\1\70\1\122\1\0"+
    "\1\71\3\70\7\71\1\123\2\71\1\124\5\71\1\70"+
    "\2\71\1\122\1\70\10\71\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\10\71\1\70\1\71\1\0\1\71"+
    "\3\70\6\71\1\125\11\71\1\70\3\71\1\70\1\126"+
    "\7\71\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\10\71\1\70\1\71\1\0\1\71\3\70\1\71\1\127"+
    "\3\71\1\130\12\71\1\70\3\71\1\70\2\71\1\131"+
    "\5\71\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\2\71\1\132\1\133\4\71\1\70\1\71\1\0\1\71"+
    "\3\70\4\71\1\134\3\71\1\112\7\71\1\70\3\71"+
    "\1\70\10\71\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\5\71\1\135\2\71\1\70\1\71\1\0\1\71"+
    "\3\70\10\71\1\73\7\71\1\70\3\71\1\70\10\71"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\10\71"+
    "\1\70\1\71\1\0\1\71\3\70\4\71\1\73\13\71"+
    "\1\70\3\71\7\0\1\136\21\0\1\137\1\0\1\140"+
    "\1\141\1\142\1\0\1\143\6\0\1\144\1\145\1\0"+
    "\1\146\1\147\1\150\1\0\1\151\1\0\1\152\10\0"+
    "\1\143\1\70\10\71\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\10\71\1\70\1\71\1\0\1\71\3\70"+
    "\20\71\1\70\3\71\1\70\2\71\1\153\3\71\1\154"+
    "\1\71\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\2\71\1\155\3\71\1\121\1\71\1\70\1\71\1\0"+
    "\1\71\3\70\10\71\1\132\7\71\1\70\3\71\1\70"+
    "\10\71\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\7\71\1\156\1\70\1\71\1\0\1\71\3\70\20\71"+
    "\1\70\3\71\1\70\10\71\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\7\71\1\157\1\70\1\71\1\0"+
    "\1\71\3\70\10\71\1\72\7\71\1\70\3\71\1\70"+
    "\10\71\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\10\71\1\70\1\71\1\0\1\71\3\70\10\71\1\160"+
    "\1\71\1\161\5\71\1\70\3\71\1\70\1\126\1\162"+
    "\1\163\1\164\1\162\3\71\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\7\71\1\165\1\70\1\71\1\0"+
    "\1\71\3\70\1\71\1\127\6\71\1\133\3\71\1\162"+
    "\1\71\1\164\1\166\1\70\3\71\1\70\10\71\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\71\1\70"+
    "\1\71\1\0\1\71\3\70\7\71\1\167\2\71\1\113"+
    "\5\71\1\70\3\71\21\0\1\170\11\0\1\171\36\0"+
    "\10\46\15\0\10\46\1\0\1\46\5\0\20\46\1\0"+
    "\3\46\17\47\2\0\45\47\21\0\1\172\52\0\17\47"+
    "\2\0\6\47\1\173\36\47\3\0\17\47\2\0\6\47"+
    "\1\174\3\47\1\175\32\47\3\0\17\47\2\0\16\47"+
    "\1\176\26\47\2\0\1\177\27\0\1\200\70\0\1\201"+
    "\3\0\1\202\74\0\1\177\30\0\1\177\20\60\1\0"+
    "\45\60\3\0\20\60\1\0\6\60\1\203\36\60\3\0"+
    "\20\60\1\0\6\60\1\204\3\60\1\205\32\60\3\0"+
    "\20\60\1\0\16\60\1\206\26\60\2\0\1\207\27\0"+
    "\1\210\70\0\1\211\3\0\1\212\74\0\1\207\30\0"+
    "\1\207\11\70\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\12\70\1\0\31\70\10\71\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\10\71\1\213\1\71\1\0"+
    "\1\71\3\70\20\71\1\70\3\71\1\70\10\71\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\2\71\1\214"+
    "\5\71\1\213\1\71\1\0\1\71\3\70\20\71\1\70"+
    "\3\71\1\70\10\71\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\10\71\1\213\1\71\1\0\1\71\3\70"+
    "\7\71\1\214\10\71\1\70\3\71\1\70\10\71\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\5\71\1\215"+
    "\2\71\1\213\1\71\1\0\1\71\3\70\1\71\1\214"+
    "\2\71\1\214\13\71\1\70\3\71\1\70\10\71\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\71\1\213"+
    "\1\71\1\0\1\71\3\70\4\71\1\167\13\71\1\70"+
    "\3\71\2\70\4\216\1\70\1\216\1\70\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\4\70\1\216\2\70"+
    "\1\216\2\70\1\0\5\70\1\216\2\70\1\216\7\70"+
    "\1\216\1\70\2\216\2\70\1\216\5\70\2\217\3\70"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\12\70"+
    "\1\0\31\70\10\71\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\1\214\7\71\1\213\1\71\1\0\1\71"+
    "\3\70\20\71\1\70\1\214\2\71\1\70\10\71\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\1\71\1\214"+
    "\5\71\1\113\1\213\1\71\1\0\1\71\3\70\20\71"+
    "\1\70\3\71\1\70\10\71\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\10\71\1\213\1\71\1\0\1\71"+
    "\3\70\4\71\1\214\13\71\1\70\3\71\1\70\10\71"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\6\71"+
    "\1\73\1\71\1\213\1\71\1\0\1\71\3\70\20\71"+
    "\1\70\3\71\1\70\6\71\1\156\1\71\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\2\156\1\220\1\100"+
    "\1\71\1\221\1\222\1\223\1\213\1\71\1\0\1\71"+
    "\3\70\1\71\1\156\1\224\2\71\1\224\1\225\4\71"+
    "\1\156\4\71\1\70\1\156\2\71\1\70\10\71\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\4\71\1\226"+
    "\3\71\1\213\1\71\1\0\1\71\3\70\20\71\1\70"+
    "\1\71\1\226\1\71\1\70\10\71\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\10\71\1\213\1\71\1\0"+
    "\1\71\3\70\14\71\1\227\3\71\1\70\3\71\1\70"+
    "\10\71\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\1\71\1\214\6\71\1\213\1\71\1\0\1\71\3\70"+
    "\20\71\1\70\3\71\1\70\10\71\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\3\71\1\100\4\71\1\213"+
    "\1\71\1\0\1\71\3\70\20\71\1\70\3\71\1\70"+
    "\10\71\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\5\71\1\230\2\71\1\213\1\71\1\0\1\71\3\70"+
    "\1\71\1\167\5\71\1\231\10\71\1\70\3\71\1\70"+
    "\2\71\1\232\5\71\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\3\71\1\214\4\71\1\213\1\71\1\0"+
    "\1\71\3\70\4\71\1\214\13\71\1\70\3\71\1\70"+
    "\10\71\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\10\71\1\213\1\71\1\0\1\71\3\70\6\71\1\214"+
    "\11\71\1\70\3\71\1\70\10\71\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\7\71\1\233\1\213\1\71"+
    "\1\0\1\71\3\70\20\71\1\70\3\71\1\70\10\71"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\2\214"+
    "\1\71\1\214\1\71\1\214\2\71\1\213\1\71\1\0"+
    "\1\71\3\70\1\71\1\214\1\71\1\214\1\71\1\214"+
    "\1\71\1\214\3\71\1\214\4\71\1\70\1\214\2\71"+
    "\1\70\2\71\1\72\5\71\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\10\71\1\213\1\71\1\0\1\71"+
    "\3\70\20\71\1\70\3\71\1\70\10\71\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\7\71\1\234\1\213"+
    "\1\71\1\0\1\71\3\70\20\71\1\70\3\71\1\70"+
    "\6\71\1\167\1\71\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\10\71\1\213\1\71\1\0\1\71\3\70"+
    "\20\71\1\70\3\71\1\70\10\71\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\10\71\1\213\1\71\1\0"+
    "\1\71\3\70\12\71\1\161\5\71\1\70\3\71\1\70"+
    "\10\71\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\10\71\1\213\1\71\1\0\1\71\3\70\6\71\1\72"+
    "\11\71\1\70\3\71\1\70\2\71\1\153\5\71\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\71\1\213"+
    "\1\71\1\0\1\71\3\70\20\71\1\70\3\71\1\70"+
    "\10\71\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\10\71\1\213\1\71\1\0\1\71\3\70\1\71\1\214"+
    "\16\71\1\70\3\71\1\70\10\71\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\1\71\1\214\1\71\1\214"+
    "\4\71\1\213\1\71\1\0\1\71\3\70\1\71\1\214"+
    "\16\71\1\70\3\71\1\70\10\71\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\6\71\1\214\1\71\1\213"+
    "\1\71\1\0\1\71\3\70\7\71\1\214\10\71\1\70"+
    "\3\71\1\70\10\71\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\3\71\1\214\1\71\1\214\2\71\1\213"+
    "\1\71\1\0\1\71\3\70\4\71\1\214\13\71\1\70"+
    "\3\71\1\70\1\126\7\71\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\10\71\1\213\1\71\1\0\1\71"+
    "\3\70\1\71\1\127\3\71\1\235\12\71\1\70\3\71"+
    "\45\0\1\236\60\0\1\237\65\0\1\240\17\0\1\241"+
    "\14\0\1\240\34\0\1\242\43\0\1\243\22\0\1\244"+
    "\2\0\1\245\15\0\1\246\1\0\1\247\1\0\1\250"+
    "\15\0\1\251\116\0\1\252\73\0\1\253\43\0\1\254"+
    "\21\0\1\244\3\0\1\255\1\0\1\254\11\0\1\254"+
    "\4\0\1\254\11\0\1\254\55\0\1\256\16\0\1\257"+
    "\31\0\1\260\107\0\1\261\3\0\1\262\62\0\1\263"+
    "\16\0\1\70\10\71\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\6\71\1\220\1\71\1\213\1\71\1\0"+
    "\1\71\3\70\20\71\1\70\3\71\1\70\10\71\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\5\71\1\214"+
    "\2\71\1\213\1\71\1\0\1\71\3\70\7\71\1\214"+
    "\10\71\1\70\3\71\1\70\10\71\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\3\71\1\224\1\71\1\214"+
    "\2\71\1\213\1\71\1\0\1\71\3\70\1\71\1\214"+
    "\16\71\1\70\3\71\1\70\10\71\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\3\71\1\214\4\71\1\213"+
    "\1\71\1\0\1\71\3\70\1\71\1\214\16\71\1\70"+
    "\3\71\1\70\10\71\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\10\71\1\213\1\71\1\0\1\71\3\70"+
    "\2\71\1\214\15\71\1\70\3\71\1\70\10\71\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\71\1\213"+
    "\1\71\1\0\1\71\3\70\13\71\1\264\4\71\1\70"+
    "\3\71\1\70\10\71\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\6\71\1\265\1\71\1\213\1\71\1\0"+
    "\1\71\3\70\20\71\1\70\3\71\1\70\10\71\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\71\1\213"+
    "\1\71\1\0\1\71\3\70\6\71\1\266\11\71\1\70"+
    "\3\71\1\70\1\71\1\162\1\71\2\162\3\71\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\71\1\213"+
    "\1\71\1\0\1\71\3\70\14\71\1\162\1\71\2\162"+
    "\1\70\3\71\1\70\10\71\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\1\71\1\167\6\71\1\213\1\71"+
    "\1\0\1\71\3\70\20\71\1\70\3\71\1\70\3\71"+
    "\2\162\3\71\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\10\71\1\213\1\71\1\0\1\71\3\70\16\71"+
    "\1\162\1\71\1\70\3\71\1\70\10\71\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\5\71\1\214\2\71"+
    "\1\213\1\71\1\0\1\71\3\70\20\71\1\70\3\71"+
    "\52\0\1\267\16\0\17\47\2\0\6\47\1\270\36\47"+
    "\3\0\17\47\2\0\7\47\1\271\35\47\3\0\17\47"+
    "\2\0\13\47\1\272\31\47\3\0\17\47\2\0\16\47"+
    "\1\273\26\47\2\0\1\274\37\0\1\274\30\0\1\274"+
    "\27\0\1\275\71\0\1\276\74\0\1\277\34\0\20\60"+
    "\1\0\6\60\1\300\36\60\3\0\20\60\1\0\7\60"+
    "\1\301\35\60\3\0\20\60\1\0\13\60\1\302\31\60"+
    "\3\0\20\60\1\0\16\60\1\303\26\60\2\0\1\304"+
    "\37\0\1\304\30\0\1\304\27\0\1\305\71\0\1\306"+
    "\74\0\1\307\34\0\1\70\10\71\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\10\71\1\213\1\214\1\0"+
    "\1\71\3\70\20\71\1\70\2\71\1\214\1\70\10\71"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\6\71"+
    "\1\214\1\71\1\213\1\71\1\0\1\71\3\70\20\71"+
    "\1\70\3\71\1\70\10\71\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\7\71\1\214\1\213\1\71\1\0"+
    "\1\71\3\70\4\71\1\214\13\71\1\70\3\71\1\70"+
    "\10\71\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\1\71\1\214\6\71\1\213\1\71\1\0\1\71\3\70"+
    "\10\71\1\214\7\71\1\70\3\71\1\70\2\71\1\310"+
    "\5\71\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\10\71\1\213\1\71\1\0\1\71\3\70\11\71\1\214"+
    "\6\71\1\70\3\71\1\70\10\71\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\7\71\1\214\1\213\1\71"+
    "\1\0\1\71\3\70\20\71\1\70\3\71\1\70\10\71"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\10\71"+
    "\1\213\1\71\1\0\1\71\3\70\7\71\1\311\10\71"+
    "\1\70\3\71\1\70\10\71\1\0\4\70\4\0\1\70"+
    "\1\0\1\70\1\0\3\71\1\214\4\71\1\213\1\214"+
    "\1\0\1\71\3\70\1\71\1\214\16\71\1\70\2\71"+
    "\1\214\1\70\10\71\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\10\71\1\213\1\71\1\0\1\71\3\70"+
    "\1\71\1\312\16\71\1\70\3\71\1\70\10\71\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\7\71\1\72"+
    "\1\213\1\71\1\0\1\71\3\70\20\71\1\70\3\71"+
    "\1\70\10\71\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\10\71\1\213\1\71\1\0\1\71\3\70\2\71"+
    "\1\162\15\71\1\70\3\71\1\70\10\71\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\10\71\1\213\1\71"+
    "\1\0\1\71\3\70\4\71\1\162\13\71\1\70\3\71"+
    "\27\0\1\313\70\0\1\314\112\0\1\315\1\263\64\0"+
    "\1\316\53\0\1\317\66\0\1\320\3\0\1\237\72\0"+
    "\1\261\64\0\1\313\1\0\1\255\106\0\1\321\73\0"+
    "\1\322\73\0\1\314\65\0\1\323\51\0\1\324\110\0"+
    "\1\325\45\0\1\314\34\0\1\314\35\0\1\326\20\0"+
    "\1\327\61\0\1\330\53\0\1\331\106\0\1\314\56\0"+
    "\1\332\104\0\1\315\17\0\1\70\10\71\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\3\71\1\333\4\71"+
    "\1\213\1\71\1\0\1\71\3\70\20\71\1\70\3\71"+
    "\1\70\10\71\1\0\4\70\4\0\1\70\1\0\1\70"+
    "\1\0\2\71\1\334\5\71\1\213\1\71\1\0\1\71"+
    "\3\70\20\71\1\70\3\71\46\0\1\335\22\0\17\47"+
    "\2\0\7\47\1\336\35\47\3\0\17\47\2\0\15\47"+
    "\1\337\27\47\3\0\17\47\2\0\14\47\1\271\30\47"+
    "\3\0\17\47\2\0\17\47\1\340\25\47\43\0\1\341"+
    "\60\0\1\342\76\0\1\343\67\0\1\276\33\0\20\60"+
    "\1\0\7\60\1\344\35\60\3\0\20\60\1\0\15\60"+
    "\1\345\27\60\3\0\20\60\1\0\14\60\1\301\30\60"+
    "\3\0\20\60\1\0\17\60\1\346\25\60\43\0\1\347"+
    "\60\0\1\350\76\0\1\351\67\0\1\306\33\0\1\70"+
    "\10\71\1\0\4\70\4\0\1\70\1\0\1\70\1\0"+
    "\10\71\1\213\1\71\1\0\1\71\3\70\15\71\1\214"+
    "\2\71\1\70\3\71\1\70\7\71\1\352\1\0\4\70"+
    "\4\0\1\70\1\0\1\70\1\0\10\71\1\213\1\71"+
    "\1\0\1\71\3\70\20\71\1\70\3\71\1\70\10\71"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\10\71"+
    "\1\213\1\71\1\0\1\71\3\70\15\71\1\162\2\71"+
    "\1\70\3\71\35\0\1\314\70\0\1\255\67\0\1\353"+
    "\63\0\1\354\76\0\1\355\66\0\1\255\17\0\1\356"+
    "\72\0\1\357\65\0\1\360\65\0\1\361\30\0\1\362"+
    "\114\0\1\363\115\0\1\262\64\0\1\364\45\0\1\365"+
    "\113\0\1\366\14\0\1\70\10\71\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\10\71\1\213\1\71\1\0"+
    "\1\71\3\70\12\71\1\214\5\71\1\70\3\71\1\70"+
    "\5\71\1\162\2\71\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\10\71\1\213\1\71\1\0\1\71\3\70"+
    "\1\162\2\71\2\162\13\71\1\70\3\71\34\0\1\367"+
    "\34\0\17\47\2\0\10\47\1\271\4\47\1\337\27\47"+
    "\3\0\16\47\1\370\2\0\45\47\3\0\1\47\12\340"+
    "\1\47\3\340\1\371\1\0\1\47\20\340\3\47\21\340"+
    "\3\341\1\0\10\341\1\371\1\341\1\0\2\371\1\341"+
    "\1\371\2\0\4\371\10\341\1\371\1\341\2\371\3\0"+
    "\20\341\1\371\3\341\31\0\1\276\4\0\1\343\50\0"+
    "\1\372\52\0\20\60\1\0\10\60\1\301\4\60\1\345"+
    "\27\60\3\0\16\60\1\373\1\60\1\0\45\60\3\0"+
    "\1\60\12\346\1\60\4\346\1\0\1\60\20\346\3\60"+
    "\21\346\3\347\1\0\10\347\1\374\1\347\1\0\2\374"+
    "\1\347\1\374\2\0\4\374\10\347\1\374\1\347\2\374"+
    "\3\0\20\347\1\374\3\347\31\0\1\306\4\0\1\351"+
    "\50\0\1\375\52\0\1\70\10\71\1\0\4\70\4\0"+
    "\1\70\1\0\1\70\1\0\5\71\1\376\2\71\1\213"+
    "\1\71\1\0\1\71\3\70\20\71\1\70\3\71\57\0"+
    "\1\377\64\0\1\u0100\71\0\1\u0101\17\0\1\257\141\0"+
    "\1\314\47\0\1\u0102\66\0\1\u0103\42\0\1\u0104\116\0"+
    "\1\237\114\0\1\314\16\0\1\u0105\121\0\1\u0106\113\0"+
    "\1\u0107\11\0\16\47\1\340\2\0\45\47\21\0\1\341"+
    "\52\0\16\60\1\346\1\60\1\0\45\60\21\0\1\347"+
    "\52\0\1\70\10\71\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\10\71\1\213\1\71\1\0\1\71\3\70"+
    "\10\71\1\u0108\7\71\1\70\3\71\51\0\1\313\22\0"+
    "\1\u0109\137\0\1\314\70\0\1\261\51\0\1\u010a\71\0"+
    "\1\314\103\0\1\313\24\0\1\u010b\136\0\1\u010c\17\0"+
    "\1\70\7\71\1\u010d\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\10\71\1\213\1\71\1\0\1\71\3\70"+
    "\20\71\1\70\3\71\46\0\1\314\72\0\1\313\50\0"+
    "\1\314\75\0\1\u010e\33\0\1\70\2\71\1\u010f\5\71"+
    "\1\0\4\70\4\0\1\70\1\0\1\70\1\0\10\71"+
    "\1\213\1\71\1\0\1\71\3\70\20\71\1\70\3\71"+
    "\21\0\1\u010e\21\0\1\u0110\25\0\1\70\10\71\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\71\1\213"+
    "\1\71\1\0\1\71\3\70\4\71\1\u0111\13\71\1\70"+
    "\3\71\1\0\1\u0112\1\0\1\u0112\2\0\3\u0112\5\0"+
    "\1\u0110\7\0\10\u0112\1\0\1\u0112\1\u0110\3\0\1\u0113"+
    "\14\u0112\1\0\1\u0112\3\0\3\u0112\1\70\10\71\1\0"+
    "\4\70\4\0\1\70\1\0\1\70\1\0\10\71\1\213"+
    "\1\71\1\0\1\71\3\70\4\71\1\u0114\13\71\1\70"+
    "\3\71\1\0\10\u0112\1\0\1\u0112\3\0\1\u0110\7\0"+
    "\10\u0112\1\0\1\u0112\1\u0110\3\0\1\u0113\20\u0112\1\0"+
    "\3\u0112\1\70\10\71\1\0\4\70\4\0\1\70\1\0"+
    "\1\70\1\0\10\71\1\213\1\71\1\0\1\71\3\70"+
    "\7\71\1\227\10\71\1\70\3\71";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14307];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\7\1\1\11\4\1\1\11\26\1\1\11"+
    "\7\1\1\11\24\1\4\11\24\1\15\0\15\1\2\0"+
    "\1\11\4\1\4\0\4\1\4\0\23\1\2\0\1\1"+
    "\13\0\1\11\7\0\3\1\1\0\4\1\4\0\4\1"+
    "\4\0\3\1\1\0\1\11\16\0\2\1\1\0\4\1"+
    "\2\0\4\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\2\0\1\1\6\0\1\1\2\0\1\1\2\0\1\1"+
    "\11\0\1\1\4\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[276];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  We must have this here as JFLex does not generate a
	 * no parameter constructor.
	 */
	public AssemblerAvrTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}

      /**
       * Adds the token specified to the current linked list of tokens.
       *
       * @param tokenType The token's type.
       * @see #addToken(int, int, int)
       */
      private void addHyperlinkToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so, true);
      }

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}

	


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AssemblerAvrTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AssemblerAvrTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { addToken(Token.PREPROCESSOR);
          }
        case 28: break;
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 29: break;
        case 14: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 30: break;
        case 17: 
          { addToken(Token.CPU_INSTRUCTION);
          }
        case 31: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 32: break;
        case 20: 
          { addToken(Token.LABEL);
          }
        case 33: break;
        case 18: 
          { addToken(Token.REGISTER);
          }
        case 34: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 35: break;
        case 8: 
          { addToken(Token.WHITESPACE);
          }
        case 36: break;
        case 21: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 37: break;
        case 5: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 38: break;
        case 23: 
          { addToken(Token.RESERVED_WORD);
          }
        case 39: break;
        case 22: 
          { addToken(Token.LITERAL_NUMBER_BINARY);
          }
        case 40: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 41: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 42: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 43: break;
        case 9: 
          { addToken(Token.FUNCTION);
          }
        case 44: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 45: break;
        case 24: 
          { addToken(Token.DATA_TYPE);
          }
        case 46: break;
        case 13: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 47: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 48: break;
        case 25: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 49: break;
        case 6: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 50: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 51: break;
        case 3: 
          { addToken(Token.OPERATOR);
          }
        case 52: break;
        case 10: 
          { 
          }
        case 53: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 277: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 278: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 279: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
