/* The following code was generated by JFlex 1.4.1 on 2/4/24, 2:09 PM */

/*
 * 19/10/2015
 *
 * AssemblerAvrTokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing Atmel AVR assembler.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class takes plain text and returns tokens representing AVR
 * assembler.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>AssemblerAvrTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Oleg Trifonov
 * @version 0.1
 *
 */

public class AssemblerAvrTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\23\1\22\1\0\1\23\23\0\1\23\1\26\1\15\1\73"+
    "\1\14\1\13\1\26\1\16\2\24\1\21\1\27\1\25\1\27\1\44"+
    "\1\20\1\6\1\5\1\71\1\72\1\2\1\2\1\2\1\2\1\67"+
    "\1\2\1\42\1\17\1\47\1\26\1\50\1\24\1\45\1\4\1\11"+
    "\1\53\1\57\1\41\1\35\1\54\1\30\1\36\1\1\1\70\1\37"+
    "\1\61\1\60\1\63\1\32\1\64\1\62\1\33\1\31\1\65\1\66"+
    "\1\43\1\7\1\51\1\55\1\25\1\0\1\25\1\46\1\12\1\0"+
    "\1\3\1\10\1\52\1\56\1\40\1\34\1\54\1\74\1\36\1\1"+
    "\1\70\1\37\1\61\1\60\1\63\1\32\1\64\1\62\1\33\1\31"+
    "\1\65\1\66\1\75\1\7\1\51\1\55\1\0\1\46\1\0\1\26"+
    "\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\1\2\2\2\1\1\2\1\1"+
    "\1\3\1\4\1\5\1\6\1\3\1\7\1\10\5\1"+
    "\1\2\3\1\1\2\4\1\1\2\1\1\1\2\5\1"+
    "\1\11\2\12\1\13\7\12\1\14\6\12\6\1\2\2"+
    "\7\1\1\2\1\1\1\15\1\16\1\17\1\20\4\1"+
    "\1\21\1\22\10\1\1\21\3\1\1\21\1\1\15\0"+
    "\2\1\1\21\2\2\1\1\1\2\3\1\1\22\1\1"+
    "\1\22\1\1\1\22\1\21\2\0\1\23\1\12\2\0"+
    "\3\12\2\0\1\12\2\0\3\12\2\0\1\24\1\21"+
    "\1\1\1\21\1\25\1\26\7\1\1\11\2\21\4\1"+
    "\2\0\1\27\13\0\1\30\7\0\2\21\1\1\1\0"+
    "\1\12\2\0\3\12\2\0\1\12\2\0\3\12\2\0"+
    "\3\1\1\0\1\27\16\0\1\21\1\1\1\0\1\12"+
    "\1\0\2\12\1\31\1\0\1\12\1\0\2\12\1\32"+
    "\1\0\1\1\1\0\1\27\1\0\1\27\2\0\1\27"+
    "\7\0\1\12\2\0\1\12\1\0\1\1\11\0\1\1"+
    "\4\0\1\1\1\0\1\1\1\0\1\1\1\0\1\33"+
    "\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\370\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\370\0\u045c\0\u049a\0\u04d8\0\u0516"+
    "\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706"+
    "\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6"+
    "\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\370\0\u0aa8"+
    "\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\370\0\u0c5a"+
    "\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a"+
    "\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a"+
    "\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\370\0\370"+
    "\0\370\0\370\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322"+
    "\0\u1360\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512"+
    "\0\u1550\0\u158e\0\u1322\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4"+
    "\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u0e0c\0\u1c18\0\u1c56"+
    "\0\u1c94\0\u1cd2\0\u1d10\0\u09b0\0\u1d4e\0\370\0\u1d8c\0\u1dca"+
    "\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba"+
    "\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u0dce\0\u0e0c"+
    "\0\u216c\0\u0f42\0\u0fbe\0\u0ffc\0\u21aa\0\u21e8\0\u2226\0\u2264"+
    "\0\u22a2\0\u1d10\0\u22e0\0\u0e0c\0\u231e\0\u1ae2\0\u235c\0\u239a"+
    "\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a"+
    "\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a"+
    "\0\370\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c"+
    "\0\u216c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade"+
    "\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce"+
    "\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe"+
    "\0\370\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070"+
    "\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u3260"+
    "\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450"+
    "\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640"+
    "\0\u367e\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830"+
    "\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u3412\0\u39e2"+
    "\0\u3a20\0\u3586\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u3b94"+
    "\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u3d84"+
    "\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36\0\370"+
    "\0\u3f74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\7\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\5\1\20\1\21\1\22"+
    "\1\23\1\17\1\24\1\25\2\5\2\17\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\5\1\40\1\41\1\5\3\17\1\42\1\43\1\44"+
    "\2\42\1\45\1\46\1\47\1\50\1\51\1\52\3\42"+
    "\1\7\1\42\2\7\1\53\1\26\1\40\1\5\1\6"+
    "\1\7\1\10\1\11\1\7\1\12\1\13\1\14\1\15"+
    "\1\16\1\54\1\5\1\20\1\21\1\22\1\23\1\17"+
    "\1\24\1\25\2\5\2\17\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\5\1\40"+
    "\1\41\1\5\3\17\1\42\1\43\1\44\2\42\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\3\42\1\7\1\42"+
    "\2\7\1\53\1\26\1\40\21\55\1\56\1\57\5\55"+
    "\1\60\3\55\1\61\1\62\5\55\1\63\30\55\1\64"+
    "\1\65\22\66\1\67\5\66\1\70\3\66\1\71\1\72"+
    "\5\66\1\73\30\66\1\74\1\75\76\0\1\76\12\77"+
    "\1\0\4\76\4\0\1\76\1\0\1\76\1\0\12\77"+
    "\1\76\1\77\1\0\1\77\3\76\10\77\1\100\11\77"+
    "\1\76\2\77\2\76\1\7\1\76\3\7\2\76\1\7"+
    "\1\76\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\5\76\1\7\3\76\1\7\2\76\1\0\6\76\1\7"+
    "\3\76\1\7\7\76\1\7\1\76\2\7\4\76\12\77"+
    "\1\0\4\76\4\0\1\76\1\0\1\76\1\0\3\77"+
    "\1\101\6\77\1\76\1\77\1\0\1\77\3\76\5\77"+
    "\2\102\1\103\12\77\1\76\2\77\1\76\1\77\1\104"+
    "\1\77\3\104\2\77\1\104\1\77\1\0\4\76\4\0"+
    "\1\76\1\0\1\76\1\0\3\77\1\101\1\77\1\104"+
    "\3\77\1\104\1\76\1\77\1\0\1\77\3\76\2\77"+
    "\1\104\2\77\1\102\1\105\1\103\6\77\1\104\1\77"+
    "\2\104\1\76\2\77\2\76\1\7\1\76\3\7\1\106"+
    "\1\107\1\7\1\76\1\0\4\76\4\0\1\76\1\0"+
    "\1\76\1\0\5\76\1\7\3\76\1\7\2\76\1\0"+
    "\6\76\1\7\3\76\1\7\7\76\1\7\1\76\2\7"+
    "\4\76\12\77\1\0\4\76\4\0\1\76\1\0\1\76"+
    "\1\0\12\77\1\76\1\77\1\0\1\77\3\76\1\77"+
    "\2\110\17\77\1\76\2\77\1\76\12\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\3\77\1\111\3\77"+
    "\1\112\2\77\1\76\1\77\1\0\1\77\3\76\1\77"+
    "\2\113\6\77\1\114\10\77\1\76\2\77\1\76\1\77"+
    "\1\104\1\77\3\104\2\77\1\104\1\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\3\77\1\111\1\77"+
    "\1\104\1\77\1\112\1\77\1\104\1\76\1\77\1\0"+
    "\1\77\3\76\1\77\1\113\1\115\3\77\1\104\2\77"+
    "\1\114\4\77\1\104\1\77\2\104\1\76\2\77\1\76"+
    "\12\77\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\3\77\1\116\6\77\1\76\1\77\1\0\1\77\3\76"+
    "\22\77\1\76\2\77\15\20\1\117\60\20\16\21\1\120"+
    "\57\21\22\22\1\0\53\22\20\0\1\121\1\122\77\0"+
    "\1\25\52\0\1\76\12\77\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\6\77\1\123\3\77\1\76\1\77"+
    "\1\0\1\77\3\76\22\77\1\76\2\77\1\76\12\77"+
    "\1\0\4\76\4\0\1\76\1\0\1\76\1\0\3\77"+
    "\1\124\6\77\1\76\1\77\1\0\1\77\3\76\22\77"+
    "\1\76\2\77\1\76\12\77\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\12\77\1\76\1\77\1\0\1\77"+
    "\3\76\12\77\1\100\1\77\1\125\5\77\1\76\2\77"+
    "\1\76\7\77\2\126\1\77\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\1\77\1\127\1\130\4\77\1\131"+
    "\2\132\1\76\1\133\1\0\1\77\3\76\11\77\1\134"+
    "\2\77\1\135\5\77\1\76\1\77\1\133\1\76\12\77"+
    "\1\0\4\76\4\0\1\76\1\0\1\76\1\0\12\77"+
    "\1\76\1\77\1\0\1\77\3\76\10\77\1\136\11\77"+
    "\1\76\2\77\1\76\1\77\1\104\1\77\3\104\2\77"+
    "\1\104\1\77\1\0\4\76\4\0\1\76\1\0\1\76"+
    "\1\0\5\77\1\104\3\77\1\104\1\76\1\77\1\0"+
    "\1\77\3\76\2\77\1\104\3\77\1\104\1\77\1\136"+
    "\5\77\1\104\1\77\2\104\1\76\2\77\1\76\1\137"+
    "\11\77\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\12\77\1\76\1\77\1\0\1\77\3\76\1\77\2\140"+
    "\4\77\1\141\12\77\1\76\2\77\1\76\2\77\2\142"+
    "\6\77\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\2\77\1\143\1\144\6\77\1\76\1\77\1\0\1\77"+
    "\3\76\5\77\2\145\3\77\1\123\7\77\1\76\2\77"+
    "\1\76\12\77\1\0\4\76\4\0\1\76\1\0\1\76"+
    "\1\0\6\77\1\146\3\77\1\76\1\77\1\0\1\77"+
    "\3\76\12\77\1\101\7\77\1\76\2\77\1\76\1\77"+
    "\1\104\1\77\3\104\2\77\1\104\1\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\5\77\1\104\1\146"+
    "\2\77\1\104\1\76\1\77\1\0\1\77\3\76\2\77"+
    "\1\104\3\77\1\104\3\77\1\101\3\77\1\104\1\77"+
    "\2\104\1\76\2\77\1\76\12\77\1\0\4\76\4\0"+
    "\1\76\1\0\1\76\1\0\12\77\1\76\1\77\1\0"+
    "\1\77\3\76\5\77\2\101\13\77\1\76\2\77\10\0"+
    "\2\147\21\0\1\150\2\0\1\151\1\152\2\153\1\0"+
    "\1\154\6\0\2\155\1\156\1\0\2\157\1\160\1\161"+
    "\1\0\1\162\1\0\1\163\7\0\1\154\1\76\12\77"+
    "\1\0\4\76\4\0\1\76\1\0\1\76\1\0\12\77"+
    "\1\76\1\77\1\0\1\77\3\76\22\77\1\76\2\77"+
    "\1\76\2\77\2\164\3\77\2\165\1\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\2\77\1\166\4\77"+
    "\1\132\2\77\1\76\1\77\1\0\1\77\3\76\12\77"+
    "\1\143\7\77\1\76\2\77\1\76\1\77\1\104\1\164"+
    "\1\167\2\104\1\77\1\165\1\170\1\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\2\77\1\166\2\77"+
    "\1\104\1\77\1\132\1\77\1\104\1\76\1\77\1\0"+
    "\1\77\3\76\2\77\1\104\3\77\1\104\3\77\1\143"+
    "\3\77\1\104\1\77\2\104\1\76\2\77\1\76\12\77"+
    "\1\0\4\76\4\0\1\76\1\0\1\76\1\0\10\77"+
    "\2\171\1\76\1\77\1\0\1\77\3\76\22\77\1\76"+
    "\2\77\1\76\1\77\1\104\1\77\3\104\2\77\1\104"+
    "\1\77\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\5\77\1\104\2\77\1\171\1\172\1\76\1\77\1\0"+
    "\1\77\3\76\2\77\1\104\3\77\1\104\7\77\1\104"+
    "\1\77\2\104\1\76\2\77\1\76\12\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\10\77\2\173\1\76"+
    "\1\77\1\0\1\77\3\76\12\77\1\100\7\77\1\76"+
    "\2\77\1\76\12\77\1\0\4\76\4\0\1\76\1\0"+
    "\1\76\1\0\12\77\1\76\1\77\1\0\1\77\3\76"+
    "\12\77\1\174\1\77\1\175\5\77\1\76\2\77\1\76"+
    "\1\137\1\176\2\177\1\200\1\176\4\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\10\77\2\201\1\76"+
    "\1\77\1\0\1\77\3\76\1\77\2\140\7\77\1\144"+
    "\3\77\1\176\1\77\1\200\1\202\1\76\2\77\1\76"+
    "\12\77\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\12\77\1\76\1\77\1\0\1\77\3\76\11\77\1\203"+
    "\2\77\1\124\5\77\1\76\2\77\23\0\1\204\12\0"+
    "\1\205\40\0\12\54\15\0\12\54\1\0\1\54\5\0"+
    "\22\54\1\0\2\54\21\55\2\0\11\55\1\0\37\55"+
    "\22\0\1\206\55\0\21\55\2\0\6\55\1\207\2\55"+
    "\1\0\37\55\33\0\1\210\4\0\1\211\37\0\21\55"+
    "\2\0\6\55\1\212\2\55\1\0\1\55\1\213\35\55"+
    "\2\0\21\55\2\0\11\55\1\0\6\55\1\214\30\55"+
    "\1\0\1\215\31\0\1\216\107\0\1\215\31\0\1\215"+
    "\22\66\1\0\11\66\1\0\37\66\2\0\22\66\1\0"+
    "\6\66\1\217\2\66\1\0\37\66\33\0\1\220\4\0"+
    "\1\221\37\0\22\66\1\0\6\66\1\222\2\66\1\0"+
    "\1\66\1\223\35\66\2\0\22\66\1\0\11\66\1\0"+
    "\6\66\1\224\30\66\1\0\1\225\31\0\1\226\107\0"+
    "\1\225\31\0\1\225\13\76\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\14\76\1\0\32\76\12\77\1\0"+
    "\4\76\4\0\1\76\1\0\1\76\1\0\12\77\1\227"+
    "\1\77\1\0\1\77\3\76\22\77\1\76\2\77\1\76"+
    "\12\77\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\2\77\1\230\7\77\1\227\1\77\1\0\1\77\3\76"+
    "\22\77\1\76\2\77\1\76\12\77\1\0\4\76\4\0"+
    "\1\76\1\0\1\76\1\0\12\77\1\227\1\77\1\0"+
    "\1\77\3\76\11\77\1\230\10\77\1\76\2\77\1\76"+
    "\12\77\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\6\77\1\231\3\77\1\227\1\77\1\0\1\77\3\76"+
    "\1\77\2\230\2\77\2\230\13\77\1\76\2\77\1\76"+
    "\12\77\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\12\77\1\227\1\77\1\0\1\77\3\76\5\77\2\203"+
    "\13\77\1\76\2\77\1\76\1\77\1\104\1\77\3\104"+
    "\2\77\1\104\1\77\1\0\4\76\4\0\1\76\1\0"+
    "\1\76\1\0\5\77\1\104\3\77\1\104\1\227\1\77"+
    "\1\0\1\77\3\76\2\77\1\104\3\77\1\104\7\77"+
    "\1\104\1\77\2\104\1\76\2\77\1\76\1\77\1\104"+
    "\1\77\3\104\2\77\1\104\1\77\1\0\4\76\4\0"+
    "\1\76\1\0\1\76\1\0\5\77\1\104\1\231\2\77"+
    "\1\104\1\227\1\77\1\0\1\77\3\76\1\77\1\230"+
    "\1\232\2\77\1\230\1\232\7\77\1\104\1\77\2\104"+
    "\1\76\2\77\2\76\5\233\1\76\2\233\1\76\1\0"+
    "\4\76\4\0\1\76\1\0\1\76\1\0\4\76\2\233"+
    "\2\76\2\233\2\76\1\0\5\76\2\233\2\76\2\233"+
    "\7\76\1\233\1\76\2\233\10\76\2\234\4\76\1\0"+
    "\4\76\4\0\1\76\1\0\1\76\1\0\14\76\1\0"+
    "\32\76\12\77\1\0\4\76\4\0\1\76\1\0\1\76"+
    "\1\0\1\230\11\77\1\227\1\77\1\0\1\77\3\76"+
    "\22\77\1\76\1\230\1\77\1\76\12\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\1\77\1\230\6\77"+
    "\2\124\1\227\1\77\1\0\1\77\3\76\22\77\1\76"+
    "\2\77\1\76\12\77\1\0\4\76\4\0\1\76\1\0"+
    "\1\76\1\0\12\77\1\227\1\77\1\0\1\77\3\76"+
    "\5\77\2\230\13\77\1\76\2\77\1\76\12\77\1\0"+
    "\4\76\4\0\1\76\1\0\1\76\1\0\7\77\1\101"+
    "\2\77\1\227\1\77\1\0\1\77\3\76\22\77\1\76"+
    "\2\77\1\76\7\77\2\171\1\77\1\0\4\76\4\0"+
    "\1\76\1\0\1\76\1\0\2\171\1\235\1\110\2\77"+
    "\1\236\1\237\2\240\1\227\1\77\1\0\1\77\3\76"+
    "\1\77\2\171\1\241\3\77\1\241\1\242\4\77\1\171"+
    "\4\77\1\76\1\171\1\77\1\76\1\77\1\104\1\77"+
    "\3\104\2\77\1\104\1\77\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\5\77\1\104\1\77\1\101\1\77"+
    "\1\104\1\227\1\77\1\0\1\77\3\76\2\77\1\104"+
    "\3\77\1\104\7\77\1\104\1\77\2\104\1\76\2\77"+
    "\1\76\12\77\1\0\4\76\4\0\1\76\1\0\1\76"+
    "\1\0\4\77\2\243\4\77\1\227\1\77\1\0\1\77"+
    "\3\76\22\77\1\76\2\77\1\76\12\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\12\77\1\227\1\77"+
    "\1\0\1\77\3\76\16\77\1\244\3\77\1\76\2\77"+
    "\1\76\12\77\1\0\4\76\4\0\1\76\1\0\1\76"+
    "\1\0\1\77\1\230\10\77\1\227\1\77\1\0\1\77"+
    "\3\76\22\77\1\76\2\77\1\76\12\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\3\77\1\110\6\77"+
    "\1\227\1\77\1\0\1\77\3\76\22\77\1\76\2\77"+
    "\1\76\12\77\1\0\4\76\4\0\1\76\1\0\1\76"+
    "\1\0\6\77\1\245\3\77\1\227\1\77\1\0\1\77"+
    "\3\76\1\77\2\203\6\77\1\246\10\77\1\76\2\77"+
    "\1\76\2\77\2\247\6\77\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\3\77\1\230\6\77\1\227\1\77"+
    "\1\0\1\77\3\76\5\77\2\230\13\77\1\76\2\77"+
    "\1\76\12\77\1\0\4\76\4\0\1\76\1\0\1\76"+
    "\1\0\12\77\1\227\1\77\1\0\1\77\3\76\10\77"+
    "\1\230\11\77\1\76\2\77\1\76\12\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\10\77\2\250\1\227"+
    "\1\77\1\0\1\77\3\76\22\77\1\76\2\77\1\76"+
    "\12\77\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\2\230\1\77\1\230\2\77\1\230\3\77\1\227\1\77"+
    "\1\0\1\77\3\76\1\77\2\230\1\77\1\230\2\77"+
    "\1\230\1\77\1\230\3\77\1\230\4\77\1\76\1\230"+
    "\1\77\1\76\2\77\2\100\6\77\1\0\4\76\4\0"+
    "\1\76\1\0\1\76\1\0\12\77\1\227\1\77\1\0"+
    "\1\77\3\76\22\77\1\76\2\77\1\76\12\77\1\0"+
    "\4\76\4\0\1\76\1\0\1\76\1\0\10\77\2\251"+
    "\1\227\1\77\1\0\1\77\3\76\22\77\1\76\2\77"+
    "\1\76\7\77\2\203\1\77\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\12\77\1\227\1\77\1\0\1\77"+
    "\3\76\22\77\1\76\2\77\1\76\12\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\12\77\1\227\1\77"+
    "\1\0\1\77\3\76\14\77\1\175\5\77\1\76\2\77"+
    "\1\76\12\77\1\0\4\76\4\0\1\76\1\0\1\76"+
    "\1\0\12\77\1\227\1\77\1\0\1\77\3\76\10\77"+
    "\1\100\11\77\1\76\2\77\1\76\2\77\2\164\6\77"+
    "\1\0\4\76\4\0\1\76\1\0\1\76\1\0\12\77"+
    "\1\227\1\77\1\0\1\77\3\76\22\77\1\76\2\77"+
    "\1\76\12\77\1\0\4\76\4\0\1\76\1\0\1\76"+
    "\1\0\12\77\1\227\1\77\1\0\1\77\3\76\1\77"+
    "\2\230\17\77\1\76\2\77\1\76\12\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\1\77\1\230\1\77"+
    "\1\230\6\77\1\227\1\77\1\0\1\77\3\76\1\77"+
    "\2\230\17\77\1\76\2\77\1\76\12\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\7\77\1\230\2\77"+
    "\1\227\1\77\1\0\1\77\3\76\11\77\1\230\10\77"+
    "\1\76\2\77\1\76\12\77\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\3\77\1\230\2\77\1\230\3\77"+
    "\1\227\1\77\1\0\1\77\3\76\5\77\2\230\13\77"+
    "\1\76\2\77\1\76\1\137\11\77\1\0\4\76\4\0"+
    "\1\76\1\0\1\76\1\0\12\77\1\227\1\77\1\0"+
    "\1\77\3\76\1\77\2\140\4\77\1\252\12\77\1\76"+
    "\2\77\51\0\1\253\64\0\2\254\70\0\2\255\22\0"+
    "\1\256\53\0\1\257\46\0\1\260\23\0\1\261\3\0"+
    "\1\262\20\0\1\263\1\0\1\264\1\0\1\265\14\0"+
    "\2\266\124\0\1\267\101\0\1\270\46\0\2\271\21\0"+
    "\1\261\4\0\2\272\1\0\1\271\12\0\2\271\4\0"+
    "\1\271\10\0\1\271\63\0\1\273\15\0\2\274\33\0"+
    "\2\275\116\0\1\276\3\0\1\277\67\0\1\300\15\0"+
    "\1\76\12\77\1\0\4\76\4\0\1\76\1\0\1\76"+
    "\1\0\7\77\1\235\2\77\1\227\1\77\1\0\1\77"+
    "\3\76\22\77\1\76\2\77\1\76\12\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\6\77\1\230\3\77"+
    "\1\227\1\77\1\0\1\77\3\76\11\77\1\230\10\77"+
    "\1\76\2\77\1\76\12\77\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\3\77\1\241\2\77\1\230\3\77"+
    "\1\227\1\77\1\0\1\77\3\76\1\77\2\230\17\77"+
    "\1\76\2\77\1\76\1\77\1\104\1\77\3\104\2\77"+
    "\1\104\1\77\1\0\4\76\4\0\1\76\1\0\1\76"+
    "\1\0\5\77\1\104\1\77\1\235\1\77\1\104\1\227"+
    "\1\77\1\0\1\77\3\76\2\77\1\104\3\77\1\104"+
    "\7\77\1\104\1\77\2\104\1\76\2\77\1\76\1\77"+
    "\1\104\1\77\3\104\2\77\1\104\1\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\5\77\1\104\1\230"+
    "\2\77\1\104\1\227\1\77\1\0\1\77\3\76\2\77"+
    "\1\104\3\77\1\104\2\77\1\230\4\77\1\104\1\77"+
    "\2\104\1\76\2\77\1\76\12\77\1\0\4\76\4\0"+
    "\1\76\1\0\1\76\1\0\3\77\1\230\6\77\1\227"+
    "\1\77\1\0\1\77\3\76\1\77\2\230\17\77\1\76"+
    "\2\77\1\76\1\77\1\104\1\77\3\104\2\77\1\104"+
    "\1\77\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\3\77\1\230\1\77\1\104\3\77\1\104\1\227\1\77"+
    "\1\0\1\77\3\76\1\77\1\230\1\232\3\77\1\104"+
    "\7\77\1\104\1\77\2\104\1\76\2\77\1\76\12\77"+
    "\1\0\4\76\4\0\1\76\1\0\1\76\1\0\12\77"+
    "\1\227\1\77\1\0\1\77\3\76\3\77\1\230\16\77"+
    "\1\76\2\77\1\76\12\77\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\12\77\1\227\1\77\1\0\1\77"+
    "\3\76\15\77\1\301\4\77\1\76\2\77\1\76\12\77"+
    "\1\0\4\76\4\0\1\76\1\0\1\76\1\0\7\77"+
    "\1\302\2\77\1\227\1\77\1\0\1\77\3\76\22\77"+
    "\1\76\2\77\1\76\12\77\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\12\77\1\227\1\77\1\0\1\77"+
    "\3\76\10\77\1\303\11\77\1\76\2\77\1\76\1\77"+
    "\1\176\2\77\2\176\4\77\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\12\77\1\227\1\77\1\0\1\77"+
    "\3\76\16\77\1\176\1\77\2\176\1\76\2\77\1\76"+
    "\12\77\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\1\77\1\203\10\77\1\227\1\77\1\0\1\77\3\76"+
    "\22\77\1\76\2\77\1\76\4\77\2\176\4\77\1\0"+
    "\4\76\4\0\1\76\1\0\1\76\1\0\12\77\1\227"+
    "\1\77\1\0\1\77\3\76\20\77\1\176\1\77\1\76"+
    "\2\77\1\76\12\77\1\0\4\76\4\0\1\76\1\0"+
    "\1\76\1\0\6\77\1\230\3\77\1\227\1\77\1\0"+
    "\1\77\3\76\22\77\1\76\2\77\60\0\1\304\15\0"+
    "\21\55\2\0\6\55\1\305\2\55\1\0\37\55\34\0"+
    "\1\306\102\0\1\307\36\0\21\55\2\0\7\55\1\310"+
    "\1\55\1\0\37\55\2\0\21\55\2\0\11\55\1\0"+
    "\2\55\1\311\34\55\2\0\21\55\2\0\11\55\1\0"+
    "\6\55\1\312\30\55\1\0\1\313\43\0\1\313\31\0"+
    "\1\313\31\0\1\314\44\0\22\66\1\0\6\66\1\315"+
    "\2\66\1\0\37\66\34\0\1\316\102\0\1\317\36\0"+
    "\22\66\1\0\7\66\1\320\1\66\1\0\37\66\2\0"+
    "\22\66\1\0\11\66\1\0\2\66\1\321\34\66\2\0"+
    "\22\66\1\0\11\66\1\0\6\66\1\322\30\66\1\0"+
    "\1\323\43\0\1\323\31\0\1\323\31\0\1\324\44\0"+
    "\1\76\12\77\1\0\4\76\4\0\1\76\1\0\1\76"+
    "\1\0\12\77\1\227\1\230\1\0\1\77\3\76\22\77"+
    "\1\76\1\77\1\230\1\76\12\77\1\0\4\76\4\0"+
    "\1\76\1\0\1\76\1\0\7\77\1\230\2\77\1\227"+
    "\1\77\1\0\1\77\3\76\22\77\1\76\2\77\1\76"+
    "\12\77\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\10\77\2\230\1\227\1\77\1\0\1\77\3\76\5\77"+
    "\2\230\13\77\1\76\2\77\1\76\12\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\1\77\1\230\10\77"+
    "\1\227\1\77\1\0\1\77\3\76\12\77\1\230\7\77"+
    "\1\76\2\77\1\76\2\77\2\325\6\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\12\77\1\227\1\77"+
    "\1\0\1\77\3\76\13\77\1\230\6\77\1\76\2\77"+
    "\1\76\12\77\1\0\4\76\4\0\1\76\1\0\1\76"+
    "\1\0\10\77\2\230\1\227\1\77\1\0\1\77\3\76"+
    "\22\77\1\76\2\77\1\76\12\77\1\0\4\76\4\0"+
    "\1\76\1\0\1\76\1\0\12\77\1\227\1\77\1\0"+
    "\1\77\3\76\11\77\1\326\10\77\1\76\2\77\1\76"+
    "\12\77\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\3\77\1\230\6\77\1\227\1\230\1\0\1\77\3\76"+
    "\1\77\2\230\17\77\1\76\1\77\1\230\1\76\12\77"+
    "\1\0\4\76\4\0\1\76\1\0\1\76\1\0\12\77"+
    "\1\227\1\77\1\0\1\77\3\76\1\77\2\327\17\77"+
    "\1\76\2\77\1\76\12\77\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\10\77\2\100\1\227\1\77\1\0"+
    "\1\77\3\76\22\77\1\76\2\77\1\76\12\77\1\0"+
    "\4\76\4\0\1\76\1\0\1\76\1\0\12\77\1\227"+
    "\1\77\1\0\1\77\3\76\3\77\1\176\16\77\1\76"+
    "\2\77\1\76\12\77\1\0\4\76\4\0\1\76\1\0"+
    "\1\76\1\0\12\77\1\227\1\77\1\0\1\77\3\76"+
    "\5\77\2\176\13\77\1\76\2\77\31\0\1\330\75\0"+
    "\1\331\122\0\2\332\1\300\67\0\2\333\55\0\1\334"+
    "\73\0\1\335\4\0\1\254\77\0\2\276\67\0\1\330"+
    "\2\0\1\272\115\0\2\336\100\0\1\337\100\0\1\331"+
    "\72\0\1\340\53\0\2\341\117\0\1\342\46\0\2\331"+
    "\77\0\1\343\23\0\1\344\64\0\2\345\55\0\1\346"+
    "\116\0\1\331\61\0\2\347\112\0\2\332\16\0\1\76"+
    "\12\77\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\3\77\1\350\6\77\1\227\1\77\1\0\1\77\3\76"+
    "\22\77\1\76\2\77\1\76\12\77\1\0\4\76\4\0"+
    "\1\76\1\0\1\76\1\0\2\77\1\351\7\77\1\227"+
    "\1\77\1\0\1\77\3\76\22\77\1\76\2\77\52\0"+
    "\2\352\22\0\21\55\2\0\7\55\1\353\1\55\1\0"+
    "\37\55\44\0\1\354\73\0\2\306\34\0\21\55\2\0"+
    "\11\55\1\0\5\55\1\355\31\55\2\0\21\55\2\0"+
    "\11\55\1\0\3\55\2\310\32\55\2\0\21\55\2\0"+
    "\11\55\1\0\7\55\1\356\27\55\46\0\1\357\63\0"+
    "\1\360\43\0\22\66\1\0\7\66\1\361\1\66\1\0"+
    "\37\66\44\0\1\362\73\0\2\316\34\0\22\66\1\0"+
    "\11\66\1\0\5\66\1\363\31\66\2\0\22\66\1\0"+
    "\11\66\1\0\3\66\2\320\32\66\2\0\22\66\1\0"+
    "\11\66\1\0\7\66\1\364\27\66\46\0\1\365\63\0"+
    "\1\366\43\0\1\76\12\77\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\12\77\1\227\1\77\1\0\1\77"+
    "\3\76\17\77\1\230\2\77\1\76\2\77\1\76\11\77"+
    "\1\367\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\12\77\1\227\1\77\1\0\1\77\3\76\22\77\1\76"+
    "\2\77\1\76\12\77\1\0\4\76\4\0\1\76\1\0"+
    "\1\76\1\0\12\77\1\227\1\77\1\0\1\77\3\76"+
    "\17\77\1\176\2\77\1\76\2\77\40\0\2\331\74\0"+
    "\2\272\73\0\1\370\67\0\1\371\104\0\2\372\72\0"+
    "\1\272\22\0\1\373\77\0\1\374\72\0\1\375\71\0"+
    "\1\376\31\0\2\377\122\0\1\u0100\125\0\1\277\71\0"+
    "\1\u0101\46\0\1\u0102\124\0\1\u0103\13\0\1\76\12\77"+
    "\1\0\4\76\4\0\1\76\1\0\1\76\1\0\12\77"+
    "\1\227\1\77\1\0\1\77\3\76\14\77\1\230\5\77"+
    "\1\76\2\77\1\76\6\77\1\176\3\77\1\0\4\76"+
    "\4\0\1\76\1\0\1\76\1\0\12\77\1\227\1\77"+
    "\1\0\1\77\3\76\1\176\3\77\3\176\13\77\1\76"+
    "\2\77\37\0\1\u0104\36\0\21\55\2\0\10\55\1\310"+
    "\1\0\5\55\1\355\31\55\22\0\1\u0105\55\0\20\55"+
    "\1\u0106\2\0\11\55\1\0\37\55\2\0\1\55\14\356"+
    "\1\55\3\356\1\u0107\1\0\1\55\10\356\1\357\11\356"+
    "\3\55\23\356\2\357\1\0\12\357\1\u0107\1\357\1\0"+
    "\2\u0107\1\357\1\u0107\2\0\4\u0107\12\357\1\u0107\1\357"+
    "\2\u0107\3\0\22\357\1\u0107\2\357\33\0\1\306\6\0"+
    "\1\354\33\0\22\66\1\0\10\66\1\320\1\0\5\66"+
    "\1\363\31\66\22\0\1\u0108\55\0\20\66\1\u0109\1\66"+
    "\1\0\11\66\1\0\37\66\2\0\1\66\14\364\1\66"+
    "\4\364\1\0\1\66\10\364\1\365\11\364\3\66\23\364"+
    "\2\365\1\0\12\365\1\u010a\1\365\1\0\2\u010a\1\365"+
    "\1\u010a\2\0\4\u010a\12\365\1\u010a\1\365\2\u010a\3\0"+
    "\22\365\1\u010a\2\365\33\0\1\316\6\0\1\362\33\0"+
    "\1\76\12\77\1\0\4\76\4\0\1\76\1\0\1\76"+
    "\1\0\6\77\1\u010b\3\77\1\227\1\77\1\0\1\77"+
    "\3\76\22\77\1\76\2\77\65\0\1\u010c\71\0\1\u010d"+
    "\76\0\1\u010e\16\0\2\274\153\0\1\331\51\0\1\u010f"+
    "\72\0\1\u0110\45\0\2\u0111\124\0\1\254\125\0\1\331"+
    "\15\0\2\u0112\130\0\1\u0113\123\0\1\u0114\30\0\1\357"+
    "\55\0\20\55\1\356\2\0\11\55\1\0\37\55\22\0"+
    "\1\365\55\0\20\66\1\364\1\66\1\0\11\66\1\0"+
    "\37\66\2\0\1\76\12\77\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\12\77\1\227\1\77\1\0\1\77"+
    "\3\76\12\77\1\u0115\7\77\1\76\2\77\56\0\2\330"+
    "\21\0\2\u0116\151\0\1\331\75\0\1\276\53\0\1\u0117"+
    "\76\0\1\331\112\0\1\330\24\0\2\u0118\147\0\2\u0119"+
    "\16\0\1\76\11\77\1\u011a\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\12\77\1\227\1\77\1\0\1\77"+
    "\3\76\22\77\1\76\2\77\52\0\2\331\77\0\1\330"+
    "\52\0\1\331\103\0\2\u011b\34\0\1\76\2\77\2\u011c"+
    "\6\77\1\0\4\76\4\0\1\76\1\0\1\76\1\0"+
    "\12\77\1\227\1\77\1\0\1\77\3\76\22\77\1\76"+
    "\2\77\23\0\1\u011b\23\0\1\u011d\26\0\1\76\12\77"+
    "\1\0\4\76\4\0\1\76\1\0\1\76\1\0\12\77"+
    "\1\227\1\77\1\0\1\77\3\76\5\77\2\u011e\13\77"+
    "\1\76\2\77\1\0\1\u011f\1\0\2\u011f\2\0\4\u011f"+
    "\5\0\1\u011d\7\0\12\u011f\1\0\1\u011f\1\u011d\3\0"+
    "\1\u0120\16\u011f\1\0\1\u011f\3\0\2\u011f\1\76\12\77"+
    "\1\0\4\76\4\0\1\76\1\0\1\76\1\0\12\77"+
    "\1\227\1\77\1\0\1\77\3\76\5\77\2\u0121\13\77"+
    "\1\76\2\77\1\0\12\u011f\1\0\1\u011f\3\0\1\u011d"+
    "\7\0\12\u011f\1\0\1\u011f\1\u011d\3\0\1\u0120\22\u011f"+
    "\1\0\2\u011f\1\76\12\77\1\0\4\76\4\0\1\76"+
    "\1\0\1\76\1\0\12\77\1\227\1\77\1\0\1\77"+
    "\3\76\11\77\1\244\10\77\1\76\2\77";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16306];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\11\1\1\11\4\1\1\11\32\1\1\11"+
    "\7\1\1\11\27\1\4\11\24\1\15\0\20\1\2\0"+
    "\1\11\1\1\2\0\3\1\2\0\1\1\2\0\3\1"+
    "\2\0\24\1\2\0\1\1\13\0\1\11\7\0\3\1"+
    "\1\0\1\1\2\0\3\1\2\0\1\1\2\0\3\1"+
    "\2\0\3\1\1\0\1\11\16\0\2\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\7\0\1\1"+
    "\2\0\1\1\1\0\1\1\11\0\1\1\4\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  We must have this here as JFLex does not generate a
	 * no parameter constructor.
	 */
	public AssemblerAvrTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}

      /**
       * Adds the token specified to the current linked list of tokens.
       *
       * @param tokenType The token's type.
       * @see #addToken(int, int, int)
       */
      private void addHyperlinkToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start,end, tokenType, so, true);
      }

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}

	


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AssemblerAvrTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AssemblerAvrTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 202) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27: 
          { addToken(Token.PREPROCESSOR);
          }
        case 28: break;
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 29: break;
        case 14: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 30: break;
        case 17: 
          { addToken(Token.CPU_INSTRUCTION);
          }
        case 31: break;
        case 19: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 32: break;
        case 20: 
          { addToken(Token.LABEL);
          }
        case 33: break;
        case 18: 
          { addToken(Token.REGISTER);
          }
        case 34: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 35: break;
        case 8: 
          { addToken(Token.WHITESPACE);
          }
        case 36: break;
        case 21: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 37: break;
        case 5: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 38: break;
        case 23: 
          { addToken(Token.RESERVED_WORD);
          }
        case 39: break;
        case 22: 
          { addToken(Token.LITERAL_NUMBER_BINARY);
          }
        case 40: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 41: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 42: break;
        case 15: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 43: break;
        case 9: 
          { addToken(Token.FUNCTION);
          }
        case 44: break;
        case 4: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 45: break;
        case 24: 
          { addToken(Token.DATA_TYPE);
          }
        case 46: break;
        case 13: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 47: break;
        case 26: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 48: break;
        case 25: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 49: break;
        case 6: 
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 50: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 51: break;
        case 3: 
          { addToken(Token.OPERATOR);
          }
        case 52: break;
        case 10: 
          { 
          }
        case 53: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 290: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 291: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 292: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
